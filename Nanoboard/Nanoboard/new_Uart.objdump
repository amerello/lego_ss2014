
new_Uart.elf:     file format elf32-littlenios2
new_Uart.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x00010bc8 memsz 0x00010bc8 flags r-x
    LOAD off    0x00011be8 vaddr 0x02010be8 paddr 0x02011710 align 2**12
         filesz 0x00000b28 memsz 0x00000b28 flags rw-
    LOAD off    0x00013238 vaddr 0x02012238 paddr 0x02012238 align 2**12
         filesz 0x00000000 memsz 0x00000304 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010504  020001b8  020001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000052c  020106bc  020106bc  000116bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000b28  02010be8  02011710  00011be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000304  02012238  02012238  00013238  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00012710  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e58  00000000  00000000  00012738  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001a49  00000000  00000000  00013590  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000286cd  00000000  00000000  00014fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008a46  00000000  00000000  0003d6a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000170e9  00000000  00000000  000460ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002114  00000000  00000000  0005d1d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002580  00000000  00000000  0005f2ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000cc0f  00000000  00000000  0006186c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006e47c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a70  00000000  00000000  0006e4c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00072959  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0007295c  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0007295f  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00072960  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00072964  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00072968  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0007296c  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00072975  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0007297e  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000d  00000000  00000000  00072987  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000033  00000000  00000000  00072994  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000bbd05  00000000  00000000  000729c7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
020001b8 l    d  .text	00000000 .text
020106bc l    d  .rodata	00000000 .rodata
02010be8 l    d  .rwdata	00000000 .rwdata
02012238 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
020001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 accelerometer_adxl345_spi.c
00000000 l    df *ABS*	00000000 adc_spi_read.c
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 terasic_spi.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
020039ec l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
02004d2c l     F .text	00000058 __sprint_r
02010a1a l     O .rodata	00000010 blanks.3452
02010a0a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
02006da8 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
020087d0 l     F .text	00000058 std
020088dc l     F .text	00000008 __fp_lock
020088e4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
02010ff0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
020116dc l     O .rwdata	00000004 charset
02010a50 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
02010b98 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0200c4e0 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0200cf2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0200cfcc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0200d1a0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0200d2c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0200d3a4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0200d504 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0200d734 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
02011700 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0200dbc0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
020115a4 l     O .rwdata	000000c8 epcs
0201166c l     O .rwdata	0000002c jtag_uart
02011698 l     O .rwdata	0000002c uart_0
0200dcb0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0200dd74 l     F .text	00000288 alt_epcs_flash_query
0200dd3c l     F .text	00000038 alt_flash_device_register
0200dffc l     F .text	00000108 alt_epcs_flash_memcmp
0200e484 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0200e924 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 epcs_commands.c
0200ef10 l     F .text	00000038 epcs_await_wip_released
0200ef48 l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0200f69c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0200f874 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0200fb84 l     F .text	000000f8 alt_file_locked
0200fe08 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
020104a4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
02010658 l     F .text	00000040 alt_sim_halt
02009e80 g     F .text	00000094 _mprec_log10
020010e4 g     F .text	00000104 I2C_Read
0200e384 g     F .text	00000090 alt_epcs_flash_get_info
02009f6c g     F .text	00000088 __any_on
0200b6b4 g     F .text	00000070 _isatty_r
02010b70 g     O .rodata	00000028 __mprec_tinytens
0200d564 g     F .text	0000006c alt_main
02004b94 g     F .text	000000a0 _puts_r
020122ac g     O .bss	00000100 alt_irq
0200b724 g     F .text	00000078 _lseek_r
02011710 g       *ABS*	00000000 __flash_rwdata_start
0200c9e4 g     F .text	00000088 __eqdf2
020116c4 g     O .rwdata	00000004 ACC_mg_per_digit
0201253c g       *ABS*	00000000 __alt_heap_start
02004b1c g     F .text	00000044 printf
020019c0 g     F .text	000000d0 ADXL345_SPI_Init
0200b16c g     F .text	00000068 __sseek
02008838 g     F .text	000000a4 __sinit
02009544 g     F .text	00000084 _setlocale_r
02008938 g     F .text	0000009c __sfmoreglue
0200d5f0 g     F .text	00000020 __malloc_unlock
0200ec54 g     F .text	00000090 alt_up_rs232_read_fd
02002f5c g     F .text	00000174 __divsf3
020004ac g     F .text	00000170 calibrate_acc
020098fc g     F .text	000000e0 memmove
02008928 g     F .text	00000010 _cleanup
02009ff4 g     F .text	000000bc _Balloc
02000364 g     F .text	00000148 handle_measuredis
0200caf4 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0200ee18 g     F .text	000000f8 epcs_sector_erase
02001554 g     F .text	00000124 i2c_write
02000000 g     F .entry	0000000c __reset
02000020 g       *ABS*	00000000 __flash_exceptions_start
0200b640 g     F .text	00000074 _fstat_r
0201225c g     O .bss	00000004 errno
02003f3c g     F .text	0000002c __make_fp
02012270 g     O .bss	00000004 alt_argv
020196c4 g       *ABS*	00000000 _gp
0200da6c g     F .text	00000030 usleep
020017c4 g     F .text	00000178 i2c_data_verify
02002648 g     F .text	000005b0 FLASH_Verify
02001e7c g     F .text	000000d0 Flash_Open
02011424 g     O .rwdata	00000180 alt_fd_list
02001fa4 g     F .text	0000013c Flash_GetBlockInfo
0200f11c g     F .text	00000064 epcs_write_status_register
0200f7c4 g     F .text	00000094 alt_find_dev
0200985c g     F .text	000000a0 memcpy
0200891c g     F .text	0000000c _cleanup_r
020036ec g     F .text	000000f8 __floatsidf
0200f94c g     F .text	00000078 alt_io_redirect
0200cc04 g     F .text	00000088 __ltdf2
020106bc g       *ABS*	00000000 __DTOR_END__
0200ebe0 g     F .text	00000074 alt_up_rs232_read_data
02004c34 g     F .text	00000014 puts
0200fe68 g     F .text	00000020 altera_nios2_irq_init
02001c68 g     F .text	00000044 ADXL345_SPI_IdRead
0200e518 g     F .text	0000011c alt_epcs_flash_write_block
02009dd0 g     F .text	000000b0 __ratio
0200e77c g     F .text	00000104 altera_avalon_jtag_uart_read
020043c8 g     F .text	00000014 malloc
02004b60 g     F .text	00000034 _printf_r
02003b28 g     F .text	00000008 __udivsi3
0200d200 g     F .text	000000c4 isatty
02010a80 g     O .rodata	000000c8 __mprec_tens
02009520 g     F .text	00000008 __locale_charset
020012f8 g     F .text	0000015c I2C_MultipleRead
02012250 g     O .bss	00000004 __malloc_top_pad
020116d8 g     O .rwdata	00000004 __mb_cur_max
02009528 g     F .text	0000000c _localeconv_r
0200a758 g     F .text	0000003c __i2b
02008f04 g     F .text	0000049c __sfvwrite_r
02004c48 g     F .text	00000070 _sbrk_r
0200b79c g     F .text	00000078 _read_r
0200cf8c g     F .text	00000024 alt_dcache_flush
020113f0 g     O .rwdata	0000000c __lc_ctype
020116f0 g     O .rwdata	00000004 alt_max_fd
0200eb48 g     F .text	00000050 alt_up_rs232_check_parity
0200427c g     F .text	00000138 __unpack_d
0200b51c g     F .text	00000110 _fclose_r
0200879c g     F .text	00000034 fflush
02012254 g     O .bss	00000004 __malloc_max_sbrked_mem
0200f9c4 g     F .text	000001c0 alt_irq_register
02001cac g     F .text	00000104 ADC_Read
0200c970 g     F .text	00000074 __adddf3
0200e414 g     F .text	00000070 alt_epcs_flash_erase_block
02009cb0 g     F .text	00000120 __b2d
0200be80 g     F .text	00000660 __umoddi3
0200d410 g     F .text	000000f4 lseek
020116d4 g     O .rwdata	00000004 _global_impure_ptr
02001a90 g     F .text	000000a4 ADXL345_SPI_WaitDataReady
0200f434 g     F .text	00000058 epcs_exit_4_bytes_mode
0200ab00 g     F .text	000005f4 _realloc_r
0201253c g       *ABS*	00000000 __bss_end
0200d960 g     F .text	0000010c alt_tick
0200b814 g     F .text	0000066c __udivdi3
020007f4 g     F .text	000000bc motor_setting
02010b48 g     O .rodata	00000028 __mprec_bigtens
0200a9e0 g     F .text	00000120 __s2b
02003858 g     F .text	00000194 __floatunsidf
02009bd0 g     F .text	00000060 __mcmp
02008904 g     F .text	00000018 __fp_lock_all
0200100c g     F .text	000000d8 I2C_Write
0200d8c8 g     F .text	00000098 alt_alarm_stop
02012280 g     O .bss	00000004 alt_irq_active
02000688 g     F .text	00000130 handle_accel
020000ec g     F .exceptions	000000cc alt_irq_handler
020113fc g     O .rwdata	00000028 alt_dev_null
02003e74 g     F .text	000000c8 __unpack_f
02001454 g     F .text	00000088 i2c_start
0200cfb0 g     F .text	0000001c alt_dcache_flush_all
02009a9c g     F .text	00000070 __hi0bits
0200cc8c g     F .text	000000d8 __fixdfsi
02011710 g       *ABS*	00000000 __ram_rwdata_end
020116e8 g     O .rwdata	00000008 alt_dev_list
0200da9c g     F .text	00000124 write
02010be8 g       *ABS*	00000000 __ram_rodata_end
0200d0c8 g     F .text	000000d8 fstat
0200ece4 g     F .text	00000094 alt_up_rs232_write_fd
0200a8c0 g     F .text	00000120 __pow5mult
02012260 g     O .bss	00000004 __nlocale_changed
02003b30 g     F .text	00000008 __umodsi3
0200f2f0 g     F .text	0000006c epcs_read_electronic_signature
020020e0 g     F .text	000000b8 Flash_Read
0200061c g     F .text	0000006c init_accel
0201253c g       *ABS*	00000000 end
02003d14 g     F .text	00000160 __pack_f
020001f4 g     F .text	00000138 measuredis
020106b8 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02002dc0 g     F .text	00000158 SPI_MultipleRead
0200e998 g     F .text	00000088 alt_avalon_timer_sc_init
02003c94 g     F .text	00000080 __clzsi2
0200e880 g     F .text	000000a4 altera_avalon_jtag_uart_write
02001f4c g     F .text	00000058 Flash_Close
02008828 g     F .text	00000004 __sfp_lock_acquire
02009778 g     F .text	000000e4 memchr
02004d84 g     F .text	00001ec4 ___vfprintf_internal_r
02008bf0 g     F .text	00000314 _free_r
020104a8 g     F .text	000001b0 __call_exitprocs
02012264 g     O .bss	00000004 __mlocale_changed
020116cc g     O .rwdata	00000004 __malloc_sbrk_base
020001b8 g     F .text	0000003c _start
02012278 g     O .bss	00000004 _alt_tick_rate
0200a3b8 g     F .text	0000014c __lshift
0200fe88 g     F .text	00000238 alt_avalon_spi_command
0201227c g     O .bss	00000004 _alt_nticks
0200d610 g     F .text	00000124 read
0200dc54 g     F .text	0000005c alt_sys_init
02010370 g     F .text	00000134 __register_exitproc
02001b9c g     F .text	000000cc ADXL345_SPI_XYZ_Read
0200eb08 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
0200a504 g     F .text	00000254 __multiply
02003b38 g     F .text	00000038 __mulsi3
02010be8 g       *ABS*	00000000 __ram_rwdata_start
020106bc g       *ABS*	00000000 __ram_rodata_start
02012284 g     O .bss	00000028 __malloc_current_mallinfo
0200a0b0 g     F .text	0000017c __d2b
0200edb8 g     F .text	00000060 epcs_read_status_register
0200e6cc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
020101e0 g     F .text	000000d0 alt_get_fd
0200f48c g     F .text	0000015c alt_busy_sleep
0200cd64 g     F .text	000000c8 __fpcmp_parts_d
0200b4ac g     F .text	00000070 _close_r
0200f35c g     F .text	00000080 epcs_read_device_id
020102fc g     F .text	00000074 memcmp
0200193c g     F .text	00000084 I2C_Verify
0201253c g       *ABS*	00000000 __alt_stack_base
02006c6c g     F .text	0000013c __swsetup_r
02003494 g     F .text	00000258 __divdf3
020089d4 g     F .text	000000f0 __sfp
020024dc g     F .text	00000084 Flash_GetBlockCount
02009f14 g     F .text	00000058 __copybits
02010be8 g     O .rwdata	00000408 __malloc_av_
02008834 g     F .text	00000004 __sinit_lock_release
020014dc g     F .text	00000078 i2c_stop
020030d0 g     F .text	000003c4 __muldf3
0200b250 g     F .text	00000060 __sread
02010884 g     O .rodata	00000010 __thenan_sf
0200ea74 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
020100c0 g     F .text	00000120 alt_find_file
0200f5e8 g     F .text	000000b4 alt_dev_llist_insert
0200d5d0 g     F .text	00000020 __malloc_lock
0200d80c g     F .text	000000bc sbrk
020085a0 g     F .text	000001fc _fflush_r
0200b3e4 g     F .text	000000c8 _calloc_r
020116f8 g     O .rwdata	00000008 alt_flash_dev_list
02001db0 g     F .text	000000cc Flash_InfoDump
02012238 g       *ABS*	00000000 __bss_start
020099dc g     F .text	00000098 memset
0200099c g     F .text	00000670 main
02012274 g     O .bss	00000004 alt_envp
02012258 g     O .bss	00000004 __malloc_max_total_mem
0200e724 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
02001678 g     F .text	0000014c i2c_read
0200b164 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0200b62c g     F .text	00000014 fclose
020037e4 g     F .text	00000074 __truncdfsf2
020123ac g     O .bss	00000190 _atexit0
02006fec g     F .text	000015b4 _dtoa_r
020043dc g     F .text	00000740 _malloc_r
020116f4 g     O .rwdata	00000004 alt_errno
02009468 g     F .text	000000b8 _fwalk
02003a68 g     F .text	00000060 __divsi3
02010894 g     O .rodata	00000014 __thenan_df
02008ac4 g     F .text	0000012c _malloc_trim_r
020106bc g       *ABS*	00000000 __CTOR_END__
0200e104 g     F .text	00000280 alt_epcs_flash_write
0200b2b0 g     F .text	000000bc strcmp
020106bc g       *ABS*	00000000 __flash_rodata_start
020106bc g       *ABS*	00000000 __DTOR_LIST__
0200ed78 g     F .text	00000040 alt_up_rs232_open_dev
020007b8 g     F .text	0000003c delay
0200ca6c g     F .text	00000088 __nedf2
0200032c g     F .text	00000038 init_measuredis
0200dc20 g     F .text	00000034 alt_irq_init
0200d794 g     F .text	00000078 alt_release_fd
02002d7c g     F .text	00000044 SPI_Write
020108a8 g     O .rodata	00000100 __clz_tab
02002560 g     F .text	000000e8 Flash_Size
02012268 g     O .bss	00000004 _PathLocale
020102b0 g     F .text	00000014 atexit
0200b36c g     F .text	00000078 _write_r
020095c8 g     F .text	0000001c setlocale
020116d0 g     O .rwdata	00000004 _impure_ptr
0201226c g     O .bss	00000004 alt_argc
0200f760 g     F .text	00000064 _do_dtors
02000020 g       .exceptions	00000000 alt_irq_entry
02009c30 g     F .text	00000080 __ulp
0200b0f4 g     F .text	00000040 __isinfd
020088ec g     F .text	00000018 __fp_unlock_all
020011e8 g     F .text	00000110 I2C_MultipleWrite
020116e0 g     O .rwdata	00000008 alt_fs_list
0200ea20 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
0200eb98 g     F .text	00000048 alt_up_rs232_write_data
02012238 g     O .bss	00000004 ACC_acc
02000020 g       *ABS*	00000000 __ram_exceptions_start
02009534 g     F .text	00000010 localeconv
0200ef80 g     F .text	0000014c epcs_read_buffer
0200dce8 g     F .text	00000054 alt_epcs_flash_init
02011710 g       *ABS*	00000000 _edata
0201253c g       *ABS*	00000000 _end
0200cff8 g     F .text	0000007c alt_flash_open_dev
020001b8 g       *ABS*	00000000 __ram_exceptions_end
020008b0 g     F .text	00000040 read_first
0200f3dc g     F .text	00000058 epcs_enter_4_bytes_mode
02002198 g     F .text	00000250 Flash_Write
0200b1d4 g     F .text	0000007c __swrite
020116c8 g     O .rwdata	00000004 __malloc_trim_threshold
020102c4 g     F .text	00000038 exit
020093a0 g     F .text	000000c8 _fwalk_reent
0200a22c g     F .text	0000018c __mdiff
0200d074 g     F .text	00000054 alt_flash_close_dev
02003ac8 g     F .text	00000060 __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
0200882c g     F .text	00000004 __sfp_lock_release
02000000 g       *ABS*	00000000 __alt_mem_sdram
02001b34 g     F .text	00000068 ADXL345_SPI_IsDataReady
02002c44 g     F .text	00000138 SPI_MultipleWrite
020008f0 g     F .text	000000ac write_string
0201223c g     O .bss	00000004 US_distance
02010698 g     F .text	00000020 _exit
0200b134 g     F .text	00000030 __isnand
02012240 g     O .bss	00000004 US_base_address
02003b70 g     F .text	00000124 __muldi3
020095e4 g     F .text	00000194 __smakebuf_r
02004cb8 g     F .text	00000074 strlen
02012244 g     O .bss	00000006 ACC_cali
0200f0cc g     F .text	00000050 epcs_write_enable
0200fc7c g     F .text	0000018c open
0200cb7c g     F .text	00000088 __gedf2
0200f858 g     F .text	0000001c alt_icache_flush_all
02002bf8 g     F .text	0000004c SPI_Init
0201170c g     O .rwdata	00000004 alt_priority_mask
02006c48 g     F .text	00000024 __vfprintf_internal
04000000 g       *ABS*	00000000 __alt_mem_epcs
0200c8f0 g     F .text	00000080 __subdf3
0201224c g     O .bss	00000004 US_state
0200e634 g     F .text	00000098 alt_epcs_flash_read
02002f18 g     F .text	00000044 SPI_Read
02009b0c g     F .text	000000c4 __lo0bits
020023e8 g     F .text	000000f4 Flash_Erase
02011704 g     O .rwdata	00000008 alt_alarm_list
0200f6fc g     F .text	00000064 _do_ctors
0200eacc g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
0200ce2c g     F .text	00000100 close
0200d324 g     F .text	00000080 alt_load
02003f68 g     F .text	00000314 __pack_d
020043b4 g     F .text	00000014 free
02008830 g     F .text	00000004 __sinit_lock_acquire
0200f180 g     F .text	00000170 epcs_write_buffer
0200a794 g     F .text	0000012c __multadd
02009a74 g     F .text	00000028 _Bfree



Disassembly of section .entry:

02000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000004:	08406e14 	ori	at,at,440
    jmp r1
 2000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20000fc:	0005313a 	rdctl	r2,ipending
 2000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 200010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000110:	00800044 	movi	r2,1
 2000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2000118:	e0ffff17 	ldw	r3,-4(fp)
 200011c:	e0bffe17 	ldw	r2,-8(fp)
 2000120:	1884703a 	and	r2,r3,r2
 2000124:	1005003a 	cmpeq	r2,r2,zero
 2000128:	1000171e 	bne	r2,zero,2000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 200012c:	e0bffd17 	ldw	r2,-12(fp)
 2000130:	00c08074 	movhi	r3,513
 2000134:	18c8ab04 	addi	r3,r3,8876
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	10c5883a 	add	r2,r2,r3
 2000140:	11800017 	ldw	r6,0(r2)
 2000144:	e0bffd17 	ldw	r2,-12(fp)
 2000148:	00c08074 	movhi	r3,513
 200014c:	18c8ab04 	addi	r3,r3,8876
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	10c5883a 	add	r2,r2,r3
 2000158:	10800104 	addi	r2,r2,4
 200015c:	11000017 	ldw	r4,0(r2)
 2000160:	e17ffd17 	ldw	r5,-12(fp)
 2000164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000168:	0005313a 	rdctl	r2,ipending
 200016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 2000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2000178:	e0bfff17 	ldw	r2,-4(fp)
 200017c:	1004c03a 	cmpne	r2,r2,zero
 2000180:	103fe21e 	bne	r2,zero,200010c <alt_irq_handler+0x20>
 2000184:	00000706 	br	20001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000188:	e0bffe17 	ldw	r2,-8(fp)
 200018c:	1085883a 	add	r2,r2,r2
 2000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2000194:	e0bffd17 	ldw	r2,-12(fp)
 2000198:	10800044 	addi	r2,r2,1
 200019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a0:	003fdd06 	br	2000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a4:	e037883a 	mov	sp,fp
 20001a8:	dfc00117 	ldw	ra,4(sp)
 20001ac:	df000017 	ldw	fp,0(sp)
 20001b0:	dec00204 	addi	sp,sp,8
 20001b4:	f800283a 	ret

Disassembly of section .text:

020001b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001b8:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 20001bc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 20001c0:	06808074 	movhi	gp,513
    ori gp, gp, %lo(_gp)
 20001c4:	d6a5b114 	ori	gp,gp,38596
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001c8:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 20001cc:	10888e14 	ori	r2,r2,8760

    movhi r3, %hi(__bss_end)
 20001d0:	00c08074 	movhi	r3,513
    ori r3, r3, %lo(__bss_end)
 20001d4:	18c94f14 	ori	r3,r3,9532

    beq r2, r3, 1f
 20001d8:	10c00326 	beq	r2,r3,20001e8 <_start+0x30>

0:
    stw zero, (r2)
 20001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001e4:	10fffd36 	bltu	r2,r3,20001dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 20001e8:	200d3240 	call	200d324 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 20001ec:	200d5640 	call	200d564 <alt_main>

020001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 20001f0:	003fff06 	br	20001f0 <alt_after_alt_main>

020001f4 <measuredis>:
But if the distance is over 3 meter, it will return -1.
This function is blocking.
*/

float measuredis(const unsigned int base_address)
	{
 20001f4:	defffa04 	addi	sp,sp,-24
 20001f8:	dfc00515 	stw	ra,20(sp)
 20001fc:	df000415 	stw	fp,16(sp)
 2000200:	df000404 	addi	fp,sp,16
 2000204:	e13fff15 	stw	r4,-4(fp)
	 unsigned int state;
	 unsigned int distance0;
	 float distance;
	 state=get_sensor_state(base_address);
 2000208:	e0bfff17 	ldw	r2,-4(fp)
 200020c:	10800204 	addi	r2,r2,8
 2000210:	10800037 	ldwio	r2,0(r2)
 2000214:	e0bffe15 	stw	r2,-8(fp)
		while(state==1)
 2000218:	00000406 	br	200022c <measuredis+0x38>
		{
			state=get_sensor_state(base_address);
 200021c:	e0bfff17 	ldw	r2,-4(fp)
 2000220:	10800204 	addi	r2,r2,8
 2000224:	10800037 	ldwio	r2,0(r2)
 2000228:	e0bffe15 	stw	r2,-8(fp)
	{
	 unsigned int state;
	 unsigned int distance0;
	 float distance;
	 state=get_sensor_state(base_address);
		while(state==1)
 200022c:	e0bffe17 	ldw	r2,-8(fp)
 2000230:	10800060 	cmpeqi	r2,r2,1
 2000234:	103ff91e 	bne	r2,zero,200021c <measuredis+0x28>
		{
			state=get_sensor_state(base_address);
		}
		printf("state: %d\n",state);
 2000238:	01008074 	movhi	r4,513
 200023c:	2101af04 	addi	r4,r4,1724
 2000240:	e17ffe17 	ldw	r5,-8(fp)
 2000244:	2004b1c0 	call	2004b1c <printf>
		trigger_clear(base_address);
 2000248:	e0bfff17 	ldw	r2,-4(fp)
 200024c:	10000035 	stwio	zero,0(r2)
		trigger_sensor(base_address);
 2000250:	e0bfff17 	ldw	r2,-4(fp)
 2000254:	1007883a 	mov	r3,r2
 2000258:	00800044 	movi	r2,1
 200025c:	18800035 	stwio	r2,0(r3)
		trigger_clear(base_address);
 2000260:	e0bfff17 	ldw	r2,-4(fp)
 2000264:	10000035 	stwio	zero,0(r2)
		state=get_sensor_state(base_address);
 2000268:	e0bfff17 	ldw	r2,-4(fp)
 200026c:	10800204 	addi	r2,r2,8
 2000270:	10800037 	ldwio	r2,0(r2)
 2000274:	e0bffe15 	stw	r2,-8(fp)
		while(state!=2)
 2000278:	00000406 	br	200028c <measuredis+0x98>
		{
				state=get_sensor_state(base_address);
 200027c:	e0bfff17 	ldw	r2,-4(fp)
 2000280:	10800204 	addi	r2,r2,8
 2000284:	10800037 	ldwio	r2,0(r2)
 2000288:	e0bffe15 	stw	r2,-8(fp)
		printf("state: %d\n",state);
		trigger_clear(base_address);
		trigger_sensor(base_address);
		trigger_clear(base_address);
		state=get_sensor_state(base_address);
		while(state!=2)
 200028c:	e0bffe17 	ldw	r2,-8(fp)
 2000290:	10800098 	cmpnei	r2,r2,2
 2000294:	103ff91e 	bne	r2,zero,200027c <measuredis+0x88>
		{
				state=get_sensor_state(base_address);
		}
		distance0=get_sensor_data(base_address);
 2000298:	e0bfff17 	ldw	r2,-4(fp)
 200029c:	10800104 	addi	r2,r2,4
 20002a0:	10800037 	ldwio	r2,0(r2)
 20002a4:	e0bffd15 	stw	r2,-12(fp)
		if(distance0==-1)
 20002a8:	e0bffd17 	ldw	r2,-12(fp)
 20002ac:	10bfffd8 	cmpnei	r2,r2,-1
 20002b0:	1000031e 	bne	r2,zero,20002c0 <measuredis+0xcc>
			distance = -1;
 20002b4:	00afe034 	movhi	r2,49024
 20002b8:	e0bffc15 	stw	r2,-16(fp)
 20002bc:	00001306 	br	200030c <measuredis+0x118>
		else
			distance=distance0*0.0000034;
 20002c0:	e13ffd17 	ldw	r4,-12(fp)
 20002c4:	20038580 	call	2003858 <__floatunsidf>
 20002c8:	100b883a 	mov	r5,r2
 20002cc:	180d883a 	mov	r6,r3
 20002d0:	2809883a 	mov	r4,r5
 20002d4:	300b883a 	mov	r5,r6
 20002d8:	01b11a34 	movhi	r6,50280
 20002dc:	319e8f44 	addi	r6,r6,31293
 20002e0:	01cfb374 	movhi	r7,16077
 20002e4:	39e15c44 	addi	r7,r7,-31375
 20002e8:	20030d00 	call	20030d0 <__muldf3>
 20002ec:	1009883a 	mov	r4,r2
 20002f0:	180b883a 	mov	r5,r3
 20002f4:	2005883a 	mov	r2,r4
 20002f8:	2807883a 	mov	r3,r5
 20002fc:	1009883a 	mov	r4,r2
 2000300:	180b883a 	mov	r5,r3
 2000304:	20037e40 	call	20037e4 <__truncdfsf2>
 2000308:	e0bffc15 	stw	r2,-16(fp)
		return distance/2;
 200030c:	e13ffc17 	ldw	r4,-16(fp)
 2000310:	01500034 	movhi	r5,16384
 2000314:	2002f5c0 	call	2002f5c <__divsf3>
	}
 2000318:	e037883a 	mov	sp,fp
 200031c:	dfc00117 	ldw	ra,4(sp)
 2000320:	df000017 	ldw	fp,0(sp)
 2000324:	dec00204 	addi	sp,sp,8
 2000328:	f800283a 	ret

0200032c <init_measuredis>:
unsigned int US_base_address;
float* US_distance;
unsigned int US_state;

// initialize measuredis
void init_measuredis(const unsigned int base_address,float* distance){
 200032c:	defffd04 	addi	sp,sp,-12
 2000330:	df000215 	stw	fp,8(sp)
 2000334:	df000204 	addi	fp,sp,8
 2000338:	e13ffe15 	stw	r4,-8(fp)
 200033c:	e17fff15 	stw	r5,-4(fp)
	US_base_address=base_address;
 2000340:	e0bffe17 	ldw	r2,-8(fp)
 2000344:	d0a2df15 	stw	r2,-29828(gp)
	US_distance = distance;
 2000348:	e0bfff17 	ldw	r2,-4(fp)
 200034c:	d0a2de15 	stw	r2,-29832(gp)
	US_state = 0;
 2000350:	d022e215 	stw	zero,-29816(gp)
}
 2000354:	e037883a 	mov	sp,fp
 2000358:	df000017 	ldw	fp,0(sp)
 200035c:	dec00104 	addi	sp,sp,4
 2000360:	f800283a 	ret

02000364 <handle_measuredis>:
// nonblocking function, reads values into US_distance
void handle_measuredis(void)
{
 2000364:	defffa04 	addi	sp,sp,-24
 2000368:	dfc00515 	stw	ra,20(sp)
 200036c:	df000415 	stw	fp,16(sp)
 2000370:	dc000315 	stw	r16,12(sp)
 2000374:	df000304 	addi	fp,sp,12
	unsigned int state=get_sensor_state(US_base_address);
 2000378:	d0a2df17 	ldw	r2,-29828(gp)
 200037c:	10800204 	addi	r2,r2,8
 2000380:	10800037 	ldwio	r2,0(r2)
 2000384:	e0bffe15 	stw	r2,-8(fp)

	switch(US_state){
 2000388:	d0a2e217 	ldw	r2,-29816(gp)
 200038c:	e0bfff15 	stw	r2,-4(fp)
 2000390:	e0ffff17 	ldw	r3,-4(fp)
 2000394:	1805003a 	cmpeq	r2,r3,zero
 2000398:	1000041e 	bne	r2,zero,20003ac <handle_measuredis+0x48>
 200039c:	e0ffff17 	ldw	r3,-4(fp)
 20003a0:	18800060 	cmpeqi	r2,r3,1
 20003a4:	10000f1e 	bne	r2,zero,20003e4 <handle_measuredis+0x80>
 20003a8:	00003a06 	br	2000494 <handle_measuredis+0x130>
	case 0:
		if (state != 1){
 20003ac:	e0bffe17 	ldw	r2,-8(fp)
 20003b0:	10800060 	cmpeqi	r2,r2,1
 20003b4:	1000371e 	bne	r2,zero,2000494 <handle_measuredis+0x130>
		  US_state = 1;
 20003b8:	00800044 	movi	r2,1
 20003bc:	d0a2e215 	stw	r2,-29816(gp)
		  trigger_clear(US_base_address);
 20003c0:	d0a2df17 	ldw	r2,-29828(gp)
 20003c4:	10000035 	stwio	zero,0(r2)
		  trigger_sensor(US_base_address);
 20003c8:	d0a2df17 	ldw	r2,-29828(gp)
 20003cc:	1007883a 	mov	r3,r2
 20003d0:	00800044 	movi	r2,1
 20003d4:	18800035 	stwio	r2,0(r3)
		  trigger_clear(US_base_address);
 20003d8:	d0a2df17 	ldw	r2,-29828(gp)
 20003dc:	10000035 	stwio	zero,0(r2)
		}
		break;
 20003e0:	00002c06 	br	2000494 <handle_measuredis+0x130>
	case 1:
		if(state == 2){
 20003e4:	e0bffe17 	ldw	r2,-8(fp)
 20003e8:	10800098 	cmpnei	r2,r2,2
 20003ec:	1000291e 	bne	r2,zero,2000494 <handle_measuredis+0x130>
			US_state=0;
 20003f0:	d022e215 	stw	zero,-29816(gp)
			int distance0=get_sensor_data(US_base_address);
 20003f4:	d0a2df17 	ldw	r2,-29828(gp)
 20003f8:	10800104 	addi	r2,r2,4
 20003fc:	10800037 	ldwio	r2,0(r2)
 2000400:	e0bffd15 	stw	r2,-12(fp)
			if(distance0==-1)
 2000404:	e0bffd17 	ldw	r2,-12(fp)
 2000408:	10bfffd8 	cmpnei	r2,r2,-1
 200040c:	1000041e 	bne	r2,zero,2000420 <handle_measuredis+0xbc>
				*US_distance = -1;
 2000410:	d0e2de17 	ldw	r3,-29832(gp)
 2000414:	00afe034 	movhi	r2,49024
 2000418:	18800015 	stw	r2,0(r3)
 200041c:	00001d06 	br	2000494 <handle_measuredis+0x130>
			else
				*US_distance=distance0*0.0000034/2;
 2000420:	d422de17 	ldw	r16,-29832(gp)
 2000424:	e13ffd17 	ldw	r4,-12(fp)
 2000428:	20036ec0 	call	20036ec <__floatsidf>
 200042c:	100b883a 	mov	r5,r2
 2000430:	180d883a 	mov	r6,r3
 2000434:	2809883a 	mov	r4,r5
 2000438:	300b883a 	mov	r5,r6
 200043c:	01b11a34 	movhi	r6,50280
 2000440:	319e8f44 	addi	r6,r6,31293
 2000444:	01cfb374 	movhi	r7,16077
 2000448:	39e15c44 	addi	r7,r7,-31375
 200044c:	20030d00 	call	20030d0 <__muldf3>
 2000450:	1009883a 	mov	r4,r2
 2000454:	180b883a 	mov	r5,r3
 2000458:	2005883a 	mov	r2,r4
 200045c:	2807883a 	mov	r3,r5
 2000460:	1009883a 	mov	r4,r2
 2000464:	180b883a 	mov	r5,r3
 2000468:	000d883a 	mov	r6,zero
 200046c:	01d00034 	movhi	r7,16384
 2000470:	20034940 	call	2003494 <__divdf3>
 2000474:	1009883a 	mov	r4,r2
 2000478:	180b883a 	mov	r5,r3
 200047c:	2005883a 	mov	r2,r4
 2000480:	2807883a 	mov	r3,r5
 2000484:	1009883a 	mov	r4,r2
 2000488:	180b883a 	mov	r5,r3
 200048c:	20037e40 	call	20037e4 <__truncdfsf2>
 2000490:	80800015 	stw	r2,0(r16)
	}




}
 2000494:	e037883a 	mov	sp,fp
 2000498:	dfc00217 	ldw	ra,8(sp)
 200049c:	df000117 	ldw	fp,4(sp)
 20004a0:	dc000017 	ldw	r16,0(sp)
 20004a4:	dec00304 	addi	sp,sp,12
 20004a8:	f800283a 	ret

020004ac <calibrate_acc>:
	short sum[3];
};
short ACC_cali[3];

//to reduce the bias we sum up the sum of 100 values and subtract the mean of values.
int calibrate_acc(){
 20004ac:	defff504 	addi	sp,sp,-44
 20004b0:	dfc00a15 	stw	ra,40(sp)
 20004b4:	df000915 	stw	fp,36(sp)
 20004b8:	df000904 	addi	fp,sp,36
	bool bSuccess;
	alt_16 szXYZ[3];
	int sumXYZ[3];

	/*Initialize the Accelerometer via SPI interface.*/
	bSuccess = ADXL345_SPI_Init(GSENSOR_SPI_BASE);
 20004bc:	01010034 	movhi	r4,1024
 20004c0:	21020004 	addi	r4,r4,2048
 20004c4:	20019c00 	call	20019c0 <ADXL345_SPI_Init>
 20004c8:	e0bff915 	stw	r2,-28(fp)
    int i;
    for(i = 0; i< 3; i++){
 20004cc:	e03ff815 	stw	zero,-32(fp)
 20004d0:	00000a06 	br	20004fc <calibrate_acc+0x50>
    	sumXYZ[i]=0;
 20004d4:	e0bff817 	ldw	r2,-32(fp)
 20004d8:	1085883a 	add	r2,r2,r2
 20004dc:	1085883a 	add	r2,r2,r2
 20004e0:	e0fff704 	addi	r3,fp,-36
 20004e4:	10c5883a 	add	r2,r2,r3
 20004e8:	10800504 	addi	r2,r2,20
 20004ec:	10000015 	stw	zero,0(r2)
	int sumXYZ[3];

	/*Initialize the Accelerometer via SPI interface.*/
	bSuccess = ADXL345_SPI_Init(GSENSOR_SPI_BASE);
    int i;
    for(i = 0; i< 3; i++){
 20004f0:	e0bff817 	ldw	r2,-32(fp)
 20004f4:	10800044 	addi	r2,r2,1
 20004f8:	e0bff815 	stw	r2,-32(fp)
 20004fc:	e0bff817 	ldw	r2,-32(fp)
 2000500:	108000d0 	cmplti	r2,r2,3
 2000504:	103ff31e 	bne	r2,zero,20004d4 <calibrate_acc+0x28>
    }
#ifdef VERBOSE
    printf("Calibrating Acceleration sensor...");
#endif
    /*If initialization is successful, continue reading.*/
	for(i=0;i<100&& bSuccess;)
 2000508:	e03ff815 	stw	zero,-32(fp)
 200050c:	00003006 	br	20005d0 <calibrate_acc+0x124>
	{
		/*Check if SPI interface has read data or not. If data is available read it.*/
		if (ADXL345_SPI_IsDataReady(GSENSOR_SPI_BASE))
 2000510:	01010034 	movhi	r4,1024
 2000514:	21020004 	addi	r4,r4,2048
 2000518:	2001b340 	call	2001b34 <ADXL345_SPI_IsDataReady>
 200051c:	1005003a 	cmpeq	r2,r2,zero
 2000520:	10002b1e 	bne	r2,zero,20005d0 <calibrate_acc+0x124>
		{
			bSuccess = ADXL345_SPI_XYZ_Read(GSENSOR_SPI_BASE, szXYZ);
 2000524:	e17ffa04 	addi	r5,fp,-24
 2000528:	01010034 	movhi	r4,1024
 200052c:	21020004 	addi	r4,r4,2048
 2000530:	2001b9c0 	call	2001b9c <ADXL345_SPI_XYZ_Read>
 2000534:	e0bff915 	stw	r2,-28(fp)
			if (bSuccess)
 2000538:	e0bff917 	ldw	r2,-28(fp)
 200053c:	1005003a 	cmpeq	r2,r2,zero
 2000540:	1000231e 	bne	r2,zero,20005d0 <calibrate_acc+0x124>
			{
#ifdef VERBOSE
				printf("Calibration #%d,sumXYZ[0]=%d\n",i,sumXYZ[0]);
#endif
				int j;
				for(j = 0; j< 3; j++)
 2000544:	e03ff715 	stw	zero,-36(fp)
 2000548:	00001b06 	br	20005b8 <calibrate_acc+0x10c>
					sumXYZ[j]+=szXYZ[j];
 200054c:	e13ff717 	ldw	r4,-36(fp)
 2000550:	e0bff717 	ldw	r2,-36(fp)
 2000554:	1085883a 	add	r2,r2,r2
 2000558:	1085883a 	add	r2,r2,r2
 200055c:	e17ff704 	addi	r5,fp,-36
 2000560:	1145883a 	add	r2,r2,r5
 2000564:	10800504 	addi	r2,r2,20
 2000568:	10c00017 	ldw	r3,0(r2)
 200056c:	e0bff717 	ldw	r2,-36(fp)
 2000570:	1085883a 	add	r2,r2,r2
 2000574:	e17ff704 	addi	r5,fp,-36
 2000578:	1145883a 	add	r2,r2,r5
 200057c:	10800304 	addi	r2,r2,12
 2000580:	1080000b 	ldhu	r2,0(r2)
 2000584:	10bfffcc 	andi	r2,r2,65535
 2000588:	10a0001c 	xori	r2,r2,32768
 200058c:	10a00004 	addi	r2,r2,-32768
 2000590:	1887883a 	add	r3,r3,r2
 2000594:	2105883a 	add	r2,r4,r4
 2000598:	1085883a 	add	r2,r2,r2
 200059c:	e13ff704 	addi	r4,fp,-36
 20005a0:	1105883a 	add	r2,r2,r4
 20005a4:	10800504 	addi	r2,r2,20
 20005a8:	10c00015 	stw	r3,0(r2)
			{
#ifdef VERBOSE
				printf("Calibration #%d,sumXYZ[0]=%d\n",i,sumXYZ[0]);
#endif
				int j;
				for(j = 0; j< 3; j++)
 20005ac:	e0bff717 	ldw	r2,-36(fp)
 20005b0:	10800044 	addi	r2,r2,1
 20005b4:	e0bff715 	stw	r2,-36(fp)
 20005b8:	e0bff717 	ldw	r2,-36(fp)
 20005bc:	108000d0 	cmplti	r2,r2,3
 20005c0:	103fe21e 	bne	r2,zero,200054c <calibrate_acc+0xa0>
					sumXYZ[j]+=szXYZ[j];
			    i++;
 20005c4:	e0bff817 	ldw	r2,-32(fp)
 20005c8:	10800044 	addi	r2,r2,1
 20005cc:	e0bff815 	stw	r2,-32(fp)
    }
#ifdef VERBOSE
    printf("Calibrating Acceleration sensor...");
#endif
    /*If initialization is successful, continue reading.*/
	for(i=0;i<100&& bSuccess;)
 20005d0:	e0bff817 	ldw	r2,-32(fp)
 20005d4:	10801908 	cmpgei	r2,r2,100
 20005d8:	1000031e 	bne	r2,zero,20005e8 <calibrate_acc+0x13c>
 20005dc:	e0bff917 	ldw	r2,-28(fp)
 20005e0:	1004c03a 	cmpne	r2,r2,zero
 20005e4:	103fca1e 	bne	r2,zero,2000510 <calibrate_acc+0x64>
		printf("offset: x:%d, y:%d, z:%d\n",ACC_cali[0],ACC_cali[1],ACC_cali[2]);
		printf("...done\n");
		return 0;
	}
#else
	if(!bSuccess) return -1; else return 0;
 20005e8:	e0bff917 	ldw	r2,-28(fp)
 20005ec:	1004c03a 	cmpne	r2,r2,zero
 20005f0:	1000031e 	bne	r2,zero,2000600 <calibrate_acc+0x154>
 20005f4:	017fffc4 	movi	r5,-1
 20005f8:	e17fff15 	stw	r5,-4(fp)
 20005fc:	00000106 	br	2000604 <calibrate_acc+0x158>
 2000600:	e03fff15 	stw	zero,-4(fp)
 2000604:	e0bfff17 	ldw	r2,-4(fp)
#endif
}
 2000608:	e037883a 	mov	sp,fp
 200060c:	dfc00117 	ldw	ra,4(sp)
 2000610:	df000017 	ldw	fp,0(sp)
 2000614:	dec00204 	addi	sp,sp,8
 2000618:	f800283a 	ret

0200061c <init_accel>:

struct acc *ACC_acc;
const int ACC_mg_per_digit = 4;

bool init_accel(struct acc* Acc){
 200061c:	defffc04 	addi	sp,sp,-16
 2000620:	dfc00315 	stw	ra,12(sp)
 2000624:	df000215 	stw	fp,8(sp)
 2000628:	df000204 	addi	fp,sp,8
 200062c:	e13fff15 	stw	r4,-4(fp)
 	ACC_acc = Acc;
 2000630:	e0bfff17 	ldw	r2,-4(fp)
 2000634:	d0a2dd15 	stw	r2,-29836(gp)
 	int i;
 	for(i=0;i<3; i++)
 2000638:	e03ffe15 	stw	zero,-8(fp)
 200063c:	00000906 	br	2000664 <init_accel+0x48>
 		ACC_acc->sum[i]=0;
 2000640:	d0e2dd17 	ldw	r3,-29836(gp)
 2000644:	e0bffe17 	ldw	r2,-8(fp)
 2000648:	1085883a 	add	r2,r2,r2
 200064c:	10c5883a 	add	r2,r2,r3
 2000650:	10800184 	addi	r2,r2,6
 2000654:	1000000d 	sth	zero,0(r2)
const int ACC_mg_per_digit = 4;

bool init_accel(struct acc* Acc){
 	ACC_acc = Acc;
 	int i;
 	for(i=0;i<3; i++)
 2000658:	e0bffe17 	ldw	r2,-8(fp)
 200065c:	10800044 	addi	r2,r2,1
 2000660:	e0bffe15 	stw	r2,-8(fp)
 2000664:	e0bffe17 	ldw	r2,-8(fp)
 2000668:	108000d0 	cmplti	r2,r2,3
 200066c:	103ff41e 	bne	r2,zero,2000640 <init_accel+0x24>
 		ACC_acc->sum[i]=0;

    return calibrate_acc();
 2000670:	20004ac0 	call	20004ac <calibrate_acc>
}
 2000674:	e037883a 	mov	sp,fp
 2000678:	dfc00117 	ldw	ra,4(sp)
 200067c:	df000017 	ldw	fp,0(sp)
 2000680:	dec00204 	addi	sp,sp,8
 2000684:	f800283a 	ret

02000688 <handle_accel>:
void handle_accel(void)
{
 2000688:	defff904 	addi	sp,sp,-28
 200068c:	dfc00615 	stw	ra,24(sp)
 2000690:	df000515 	stw	fp,20(sp)
 2000694:	dc400415 	stw	r17,16(sp)
 2000698:	dc000315 	stw	r16,12(sp)
 200069c:	df000304 	addi	fp,sp,12

	alt_16 szXYZ[3];
	/*Check if SPI interface has read data or not. If data is available read it.*/
	if (ADXL345_SPI_IsDataReady(GSENSOR_SPI_BASE))
 20006a0:	01010034 	movhi	r4,1024
 20006a4:	21020004 	addi	r4,r4,2048
 20006a8:	2001b340 	call	2001b34 <ADXL345_SPI_IsDataReady>
 20006ac:	1005003a 	cmpeq	r2,r2,zero
 20006b0:	10003a1e 	bne	r2,zero,200079c <handle_accel+0x114>
	{

		if(ADXL345_SPI_XYZ_Read(GSENSOR_SPI_BASE, szXYZ))
 20006b4:	e17ffe04 	addi	r5,fp,-8
 20006b8:	01010034 	movhi	r4,1024
 20006bc:	21020004 	addi	r4,r4,2048
 20006c0:	2001b9c0 	call	2001b9c <ADXL345_SPI_XYZ_Read>
 20006c4:	1005003a 	cmpeq	r2,r2,zero
 20006c8:	1000341e 	bne	r2,zero,200079c <handle_accel+0x114>
		{
			int i;
			for(i=0;i<3;i++){
 20006cc:	e03ffd15 	stw	zero,-12(fp)
 20006d0:	00002f06 	br	2000790 <handle_accel+0x108>
				ACC_acc->acc[i]=szXYZ[i]*ACC_mg_per_digit-ACC_cali[i];
 20006d4:	d422dd17 	ldw	r16,-29836(gp)
 20006d8:	e47ffd17 	ldw	r17,-12(fp)
 20006dc:	e0bffd17 	ldw	r2,-12(fp)
 20006e0:	1085883a 	add	r2,r2,r2
 20006e4:	e0fffd04 	addi	r3,fp,-12
 20006e8:	10c5883a 	add	r2,r2,r3
 20006ec:	10800104 	addi	r2,r2,4
 20006f0:	1080000b 	ldhu	r2,0(r2)
 20006f4:	113fffcc 	andi	r4,r2,65535
 20006f8:	2120001c 	xori	r4,r4,32768
 20006fc:	21200004 	addi	r4,r4,-32768
 2000700:	d1600017 	ldw	r5,-32768(gp)
 2000704:	2003b380 	call	2003b38 <__mulsi3>
 2000708:	1009883a 	mov	r4,r2
 200070c:	e0bffd17 	ldw	r2,-12(fp)
 2000710:	1087883a 	add	r3,r2,r2
 2000714:	d0a2e004 	addi	r2,gp,-29824
 2000718:	1885883a 	add	r2,r3,r2
 200071c:	1080000b 	ldhu	r2,0(r2)
 2000720:	2085c83a 	sub	r2,r4,r2
 2000724:	1007883a 	mov	r3,r2
 2000728:	8c45883a 	add	r2,r17,r17
 200072c:	1405883a 	add	r2,r2,r16
 2000730:	10c0000d 	sth	r3,0(r2)
				ACC_acc->sum[i]=ACC_acc->acc[i]+ ACC_acc->sum[i];
 2000734:	d162dd17 	ldw	r5,-29836(gp)
 2000738:	e1bffd17 	ldw	r6,-12(fp)
 200073c:	d0e2dd17 	ldw	r3,-29836(gp)
 2000740:	e0bffd17 	ldw	r2,-12(fp)
 2000744:	1085883a 	add	r2,r2,r2
 2000748:	10c5883a 	add	r2,r2,r3
 200074c:	1080000b 	ldhu	r2,0(r2)
 2000750:	1009883a 	mov	r4,r2
 2000754:	d0e2dd17 	ldw	r3,-29836(gp)
 2000758:	e0bffd17 	ldw	r2,-12(fp)
 200075c:	1085883a 	add	r2,r2,r2
 2000760:	10c5883a 	add	r2,r2,r3
 2000764:	10800184 	addi	r2,r2,6
 2000768:	1080000b 	ldhu	r2,0(r2)
 200076c:	2085883a 	add	r2,r4,r2
 2000770:	1007883a 	mov	r3,r2
 2000774:	3185883a 	add	r2,r6,r6
 2000778:	1145883a 	add	r2,r2,r5
 200077c:	10800184 	addi	r2,r2,6
 2000780:	10c0000d 	sth	r3,0(r2)
	{

		if(ADXL345_SPI_XYZ_Read(GSENSOR_SPI_BASE, szXYZ))
		{
			int i;
			for(i=0;i<3;i++){
 2000784:	e0bffd17 	ldw	r2,-12(fp)
 2000788:	10800044 	addi	r2,r2,1
 200078c:	e0bffd15 	stw	r2,-12(fp)
 2000790:	e0bffd17 	ldw	r2,-12(fp)
 2000794:	108000d0 	cmplti	r2,r2,3
 2000798:	103fce1e 	bne	r2,zero,20006d4 <handle_accel+0x4c>
				ACC_acc->sum[i]=ACC_acc->acc[i]+ ACC_acc->sum[i];

			}
		}
	}
}
 200079c:	e037883a 	mov	sp,fp
 20007a0:	dfc00317 	ldw	ra,12(sp)
 20007a4:	df000217 	ldw	fp,8(sp)
 20007a8:	dc400117 	ldw	r17,4(sp)
 20007ac:	dc000017 	ldw	r16,0(sp)
 20007b0:	dec00404 	addi	sp,sp,16
 20007b4:	f800283a 	ret

020007b8 <delay>:
//#define VERBOSE

#include "Ultrasound_interface.h"
#include "Accelerometer_interface.h"
void delay (volatile unsigned int del)
{
 20007b8:	defffe04 	addi	sp,sp,-8
 20007bc:	df000115 	stw	fp,4(sp)
 20007c0:	df000104 	addi	fp,sp,4
 20007c4:	e13fff15 	stw	r4,-4(fp)
	while (del != 0)
 20007c8:	00000306 	br	20007d8 <delay+0x20>
	{
		del --;
 20007cc:	e0bfff17 	ldw	r2,-4(fp)
 20007d0:	10bfffc4 	addi	r2,r2,-1
 20007d4:	e0bfff15 	stw	r2,-4(fp)

#include "Ultrasound_interface.h"
#include "Accelerometer_interface.h"
void delay (volatile unsigned int del)
{
	while (del != 0)
 20007d8:	e0bfff17 	ldw	r2,-4(fp)
 20007dc:	1004c03a 	cmpne	r2,r2,zero
 20007e0:	103ffa1e 	bne	r2,zero,20007cc <delay+0x14>
	{
		del --;
	}
}
 20007e4:	e037883a 	mov	sp,fp
 20007e8:	df000017 	ldw	fp,0(sp)
 20007ec:	dec00104 	addi	sp,sp,4
 20007f0:	f800283a 	ret

020007f4 <motor_setting>:
// phase2 and duty2 in right direction.
// period= fpga clock cycles used for one pwm period
// enable: 1=left, 2=right.
void motor_setting(unsigned long phase1, unsigned long duty1,
		unsigned long phase2, unsigned long duty2, unsigned long period,
		unsigned long enable) {
 20007f4:	defff504 	addi	sp,sp,-44
 20007f8:	df000a15 	stw	fp,40(sp)
 20007fc:	df000a04 	addi	fp,sp,40
 2000800:	e13ffc15 	stw	r4,-16(fp)
 2000804:	e17ffd15 	stw	r5,-12(fp)
 2000808:	e1bffe15 	stw	r6,-8(fp)
 200080c:	e1ffff15 	stw	r7,-4(fp)
	volatile unsigned int * pwm_en = (volatile unsigned int *) PWM_EN;
 2000810:	00a18034 	movhi	r2,34304
 2000814:	10844004 	addi	r2,r2,4352
 2000818:	e0bffb15 	stw	r2,-20(fp)
	volatile unsigned int * pwm_period = (volatile unsigned int *) PWM_PERIOD;
 200081c:	00a18034 	movhi	r2,34304
 2000820:	10844104 	addi	r2,r2,4356
 2000824:	e0bffa15 	stw	r2,-24(fp)
	volatile unsigned int * pwm_phase1 = (volatile unsigned int *) PWM_PHASE1;
 2000828:	00a18034 	movhi	r2,34304
 200082c:	10844404 	addi	r2,r2,4368
 2000830:	e0bff915 	stw	r2,-28(fp)
	volatile unsigned int * pwm_phase2 = (volatile unsigned int *) PWM_PHASE2;
 2000834:	00a18034 	movhi	r2,34304
 2000838:	10844504 	addi	r2,r2,4372
 200083c:	e0bff815 	stw	r2,-32(fp)
	volatile unsigned int * pwm_duty1 = (volatile unsigned int *) PWM_DUTY1;
 2000840:	00a18034 	movhi	r2,34304
 2000844:	10844204 	addi	r2,r2,4360
 2000848:	e0bff715 	stw	r2,-36(fp)
	volatile unsigned int * pwm_duty2 = (volatile unsigned int *) PWM_DUTY2;
 200084c:	00a18034 	movhi	r2,34304
 2000850:	10844304 	addi	r2,r2,4364
 2000854:	e0bff615 	stw	r2,-40(fp)

	*pwm_en = enable;
 2000858:	e0fffb17 	ldw	r3,-20(fp)
 200085c:	e0800217 	ldw	r2,8(fp)
 2000860:	18800015 	stw	r2,0(r3)
	*pwm_period = period;
 2000864:	e0fffa17 	ldw	r3,-24(fp)
 2000868:	e0800117 	ldw	r2,4(fp)
 200086c:	18800015 	stw	r2,0(r3)
	*pwm_phase1 = phase1;
 2000870:	e0fff917 	ldw	r3,-28(fp)
 2000874:	e0bffc17 	ldw	r2,-16(fp)
 2000878:	18800015 	stw	r2,0(r3)
	*pwm_phase2 = phase2;
 200087c:	e0fff817 	ldw	r3,-32(fp)
 2000880:	e0bffe17 	ldw	r2,-8(fp)
 2000884:	18800015 	stw	r2,0(r3)
	*pwm_duty1 = duty1;
 2000888:	e0fff717 	ldw	r3,-36(fp)
 200088c:	e0bffd17 	ldw	r2,-12(fp)
 2000890:	18800015 	stw	r2,0(r3)
	*pwm_duty2 = duty2;
 2000894:	e0fff617 	ldw	r3,-40(fp)
 2000898:	e0bfff17 	ldw	r2,-4(fp)
 200089c:	18800015 	stw	r2,0(r3)

}
 20008a0:	e037883a 	mov	sp,fp
 20008a4:	df000017 	ldw	fp,0(sp)
 20008a8:	dec00104 	addi	sp,sp,4
 20008ac:	f800283a 	ret

020008b0 <read_first>:
// we use a special uart core from the Altera University Program for serial communication.
// the advantage of this is that it has a 128 bit buffer and we don't have to work with interrupts.
// we can simply check if there are packets in the buffer and read until it is empty.

// read first date out of the buffer
void read_first(alt_up_rs232_dev* dev,alt_u8* buffer){
 20008b0:	defffb04 	addi	sp,sp,-20
 20008b4:	dfc00415 	stw	ra,16(sp)
 20008b8:	df000315 	stw	fp,12(sp)
 20008bc:	df000304 	addi	fp,sp,12
 20008c0:	e13ffe15 	stw	r4,-8(fp)
 20008c4:	e17fff15 	stw	r5,-4(fp)
	alt_u8 p = 0;
 20008c8:	e03ffd05 	stb	zero,-12(fp)
	alt_up_rs232_read_data(dev,buffer,&p);
 20008cc:	e13ffe17 	ldw	r4,-8(fp)
 20008d0:	e17fff17 	ldw	r5,-4(fp)
 20008d4:	e1bffd04 	addi	r6,fp,-12
 20008d8:	200ebe00 	call	200ebe0 <alt_up_rs232_read_data>
}
 20008dc:	e037883a 	mov	sp,fp
 20008e0:	dfc00117 	ldw	ra,4(sp)
 20008e4:	df000017 	ldw	fp,0(sp)
 20008e8:	dec00204 	addi	sp,sp,8
 20008ec:	f800283a 	ret

020008f0 <write_string>:
// write a string into the buffer, wait if buffer is to small
alt_u8 write_string(alt_up_rs232_dev* dev,alt_u8* string){
 20008f0:	defffa04 	addi	sp,sp,-24
 20008f4:	dfc00515 	stw	ra,20(sp)
 20008f8:	df000415 	stw	fp,16(sp)
 20008fc:	df000404 	addi	fp,sp,16
 2000900:	e13ffe15 	stw	r4,-8(fp)
 2000904:	e17fff15 	stw	r5,-4(fp)
	int i = 0;
 2000908:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 c;
	for(i=0,c=0; string[i] != 0 && c ==0;i++){
 200090c:	e03ffd15 	stw	zero,-12(fp)
 2000910:	e03ffc05 	stb	zero,-16(fp)
 2000914:	00001006 	br	2000958 <write_string+0x68>
		while(alt_up_rs232_get_available_space_in_write_FIFO(dev)==0);
 2000918:	e13ffe17 	ldw	r4,-8(fp)
 200091c:	200eb080 	call	200eb08 <alt_up_rs232_get_available_space_in_write_FIFO>
 2000920:	1005003a 	cmpeq	r2,r2,zero
 2000924:	103ffc1e 	bne	r2,zero,2000918 <write_string+0x28>
		c=alt_up_rs232_write_data(dev,string[i]);
 2000928:	e0bffd17 	ldw	r2,-12(fp)
 200092c:	1007883a 	mov	r3,r2
 2000930:	e0bfff17 	ldw	r2,-4(fp)
 2000934:	1885883a 	add	r2,r3,r2
 2000938:	10800003 	ldbu	r2,0(r2)
 200093c:	11403fcc 	andi	r5,r2,255
 2000940:	e13ffe17 	ldw	r4,-8(fp)
 2000944:	200eb980 	call	200eb98 <alt_up_rs232_write_data>
 2000948:	e0bffc05 	stb	r2,-16(fp)
}
// write a string into the buffer, wait if buffer is to small
alt_u8 write_string(alt_up_rs232_dev* dev,alt_u8* string){
	int i = 0;
	alt_u8 c;
	for(i=0,c=0; string[i] != 0 && c ==0;i++){
 200094c:	e0bffd17 	ldw	r2,-12(fp)
 2000950:	10800044 	addi	r2,r2,1
 2000954:	e0bffd15 	stw	r2,-12(fp)
 2000958:	e0bffd17 	ldw	r2,-12(fp)
 200095c:	1007883a 	mov	r3,r2
 2000960:	e0bfff17 	ldw	r2,-4(fp)
 2000964:	1885883a 	add	r2,r3,r2
 2000968:	10800003 	ldbu	r2,0(r2)
 200096c:	10803fcc 	andi	r2,r2,255
 2000970:	1005003a 	cmpeq	r2,r2,zero
 2000974:	1000031e 	bne	r2,zero,2000984 <write_string+0x94>
 2000978:	e0bffc03 	ldbu	r2,-16(fp)
 200097c:	1005003a 	cmpeq	r2,r2,zero
 2000980:	103fe51e 	bne	r2,zero,2000918 <write_string+0x28>
		while(alt_up_rs232_get_available_space_in_write_FIFO(dev)==0);
		c=alt_up_rs232_write_data(dev,string[i]);
	}
	return c;
 2000984:	e0bffc03 	ldbu	r2,-16(fp)
}
 2000988:	e037883a 	mov	sp,fp
 200098c:	dfc00117 	ldw	ra,4(sp)
 2000990:	df000017 	ldw	fp,0(sp)
 2000994:	dec00204 	addi	sp,sp,8
 2000998:	f800283a 	ret

0200099c <main>:
	}values;
	alt_u8 serial[48];
}outdata;

int main()
{
 200099c:	deffc904 	addi	sp,sp,-220
 20009a0:	dfc03615 	stw	ra,216(sp)
 20009a4:	df003515 	stw	fp,212(sp)
 20009a8:	dc003415 	stw	r16,208(sp)
 20009ac:	df003404 	addi	fp,sp,208

	//init Motor
	 // init Encoder and direction sensor
	volatile unsigned int * pEnc = (volatile unsigned int *) (0x80000000
			| MOTOR_ENCODER_0_BASE);
 20009b0:	00a18034 	movhi	r2,34304
 20009b4:	10844c04 	addi	r2,r2,4400
 20009b8:	e0bfe615 	stw	r2,-104(fp)
	volatile unsigned int * pDir = (volatile unsigned int *) (0x80000000
			| MOTOR_ENCODER_0_BASE + 4);
 20009bc:	00a18034 	movhi	r2,34304
 20009c0:	10844d04 	addi	r2,r2,4404
 20009c4:	e0bfe515 	stw	r2,-108(fp)
	volatile unsigned int direction =0;
 20009c8:	e03fe715 	stw	zero,-100(fp)
     // init pwm parameters
	unsigned long phase1 = 0x000, phase2 = 0x000,
 20009cc:	e03fe415 	stw	zero,-112(fp)
 20009d0:	e03fe315 	stw	zero,-116(fp)
			period = 100000, enable = 0x2;
 20009d4:	008000b4 	movhi	r2,2
 20009d8:	10a1a804 	addi	r2,r2,-31072
 20009dc:	e0bfe215 	stw	r2,-120(fp)
 20009e0:	00800084 	movi	r2,2
 20009e4:	e0bfe115 	stw	r2,-124(fp)


	int i = 0, j= 0;
 20009e8:	e03fe015 	stw	zero,-128(fp)
 20009ec:	e03fdf15 	stw	zero,-132(fp)
	alt_u8 c = 0;
 20009f0:	e03fe805 	stb	zero,-96(fp)
	indata indat;
	outdata outdat;
	alt_u8 LED = 0;
 20009f4:	e03fde05 	stb	zero,-136(fp)
	alt_u8 versionName[] = "Nano Board Version 1.0\n";
 20009f8:	00c08074 	movhi	r3,513
 20009fc:	18c1b504 	addi	r3,r3,1748
 2000a00:	18800017 	ldw	r2,0(r3)
 2000a04:	e0bff815 	stw	r2,-32(fp)
 2000a08:	18800117 	ldw	r2,4(r3)
 2000a0c:	e0bff915 	stw	r2,-28(fp)
 2000a10:	18800217 	ldw	r2,8(r3)
 2000a14:	e0bffa15 	stw	r2,-24(fp)
 2000a18:	18800317 	ldw	r2,12(r3)
 2000a1c:	e0bffb15 	stw	r2,-20(fp)
 2000a20:	18800417 	ldw	r2,16(r3)
 2000a24:	e0bffc15 	stw	r2,-16(fp)
 2000a28:	18800517 	ldw	r2,20(r3)
 2000a2c:	e0bffd15 	stw	r2,-12(fp)

	//PID Parameters
	const int I_Parameter =50;
 2000a30:	00800c84 	movi	r2,50
 2000a34:	e0bfdd15 	stw	r2,-140(fp)
	const int P_Parameter =30;
 2000a38:	00800784 	movi	r2,30
 2000a3c:	e0bfdc15 	stw	r2,-144(fp)
	const int FF_Parameter =0;
 2000a40:	e03fdb15 	stw	zero,-148(fp)
	const int D_Parameter = 1;
 2000a44:	00800044 	movi	r2,1
 2000a48:	e0bfda15 	stw	r2,-152(fp)

    outdat.values.ubat = 0;
 2000a4c:	e03feb8d 	sth	zero,-82(fp)
	outdat.values.I = 0;
 2000a50:	e03ff415 	stw	zero,-48(fp)
	outdat.values.W = 0;
 2000a54:	e03ff215 	stw	zero,-56(fp)
	int prevW = 0;
 2000a58:	e03fd915 	stw	zero,-156(fp)
	outdat.values.P  = 0;
 2000a5c:	e03ff315 	stw	zero,-52(fp)
	outdat.values.D  = 0;
 2000a60:	e03ff515 	stw	zero,-44(fp)
	outdat.values.FF = 0;
 2000a64:	e03ff615 	stw	zero,-40(fp)
	outdat.values.X  = 0;
 2000a68:	e03ff115 	stw	zero,-60(fp)
	int prevX=0;
 2000a6c:	e03fd815 	stw	zero,-160(fp)
	outdat.values.enMotorController=FALSE;
 2000a70:	e03feb45 	stb	zero,-83(fp)
	outdat.values.distance=-1;
 2000a74:	00afe034 	movhi	r2,49024
 2000a78:	e0bff715 	stw	r2,-36(fp)

	// Counters
	unsigned int connection_broken_counter 	= 0;
 2000a7c:	e03fd715 	stw	zero,-164(fp)
	unsigned int uart_timeout 				= 0;
 2000a80:	e03fd615 	stw	zero,-168(fp)
	unsigned int display_Counter			= 1;
 2000a84:	00800044 	movi	r2,1
 2000a88:	e0bfd515 	stw	r2,-172(fp)
	unsigned int dist_Counter				= 2;
 2000a8c:	00800084 	movi	r2,2
 2000a90:	e0bfd415 	stw	r2,-176(fp)

	// bools
	alt_u8 adcDone = TRUE;
 2000a94:	00800044 	movi	r2,1
 2000a98:	e0bfd385 	stb	r2,-178(fp)
	alt_u8 connBroken = TRUE;
 2000a9c:	00800044 	movi	r2,1
 2000aa0:	e0bfd345 	stb	r2,-179(fp)
	alt_u8 setEnMotorwasoff = FALSE;
 2000aa4:	e03fd305 	stb	zero,-180(fp)

	// init sensors
	init_measuredis(ULTRASOUND_INTERFACE_0_BASE,&(outdat.values.distance));
 2000aa8:	e0bfeb04 	addi	r2,fp,-84
 2000aac:	11400c04 	addi	r5,r2,48
 2000ab0:	01018034 	movhi	r4,1536
 2000ab4:	21044804 	addi	r4,r4,4384
 2000ab8:	200032c0 	call	200032c <init_measuredis>
	init_accel(&(outdat.values.Acc));
 2000abc:	e0bfeb04 	addi	r2,fp,-84
 2000ac0:	11000104 	addi	r4,r2,4
 2000ac4:	200061c0 	call	200061c <init_accel>

	// init serial
	alt_up_rs232_dev *dev = alt_up_rs232_open_dev("/dev/uart_0");
 2000ac8:	01008074 	movhi	r4,513
 2000acc:	2101b204 	addi	r4,r4,1736
 2000ad0:	200ed780 	call	200ed78 <alt_up_rs232_open_dev>
 2000ad4:	e0bfd215 	stw	r2,-184(fp)

	if(dev == 0)
 2000ad8:	e0bfd217 	ldw	r2,-184(fp)
 2000adc:	1005003a 	cmpeq	r2,r2,zero
 2000ae0:	1001431e 	bne	r2,zero,2000ff0 <main+0x654>
		goto error;

    // switch on all leds
	LED = 255;
 2000ae4:	00bfffc4 	movi	r2,-1
 2000ae8:	e0bfde05 	stb	r2,-136(fp)
	IOWR(LED_BASE,0,LED);
 2000aec:	e0ffde03 	ldbu	r3,-136(fp)
 2000af0:	00818034 	movhi	r2,1536
 2000af4:	10845004 	addi	r2,r2,4416
 2000af8:	10c00035 	stwio	r3,0(r2)
 2000afc:	00000006 	br	2000b00 <main+0x164>

	while(1)
	{

		display_Counter = (display_Counter +1 ) % 100;
 2000b00:	e0bfd517 	ldw	r2,-172(fp)
 2000b04:	11000044 	addi	r4,r2,1
 2000b08:	01401904 	movi	r5,100
 2000b0c:	2003b300 	call	2003b30 <__umodsi3>
 2000b10:	e0bfd515 	stw	r2,-172(fp)
        dist_Counter = (dist_Counter+1)%10;
 2000b14:	e0bfd417 	ldw	r2,-176(fp)
 2000b18:	11000044 	addi	r4,r2,1
 2000b1c:	01400284 	movi	r5,10
 2000b20:	2003b300 	call	2003b30 <__umodsi3>
 2000b24:	e0bfd415 	stw	r2,-176(fp)
		// check length of incoming message
		i = alt_up_rs232_get_used_space_in_read_FIFO(dev);
 2000b28:	e13fd217 	ldw	r4,-184(fp)
 2000b2c:	200eacc0 	call	200eacc <alt_up_rs232_get_used_space_in_read_FIFO>
 2000b30:	e0bfe015 	stw	r2,-128(fp)

		//INIT COMMUNICATION
		if(connBroken){
 2000b34:	e0bfd343 	ldbu	r2,-179(fp)
 2000b38:	1005003a 	cmpeq	r2,r2,zero
 2000b3c:	10001c1e 	bne	r2,zero,2000bb0 <main+0x214>
			outdat.values.W=0;
 2000b40:	e03ff215 	stw	zero,-56(fp)
			indat.values.setEnMotorController=FALSE;
 2000b44:	e03fe985 	stb	zero,-90(fp)

			// is there one char in the buffer?
			if(i >= 1){
 2000b48:	e0bfe017 	ldw	r2,-128(fp)
 2000b4c:	10800050 	cmplti	r2,r2,1
 2000b50:	10000c1e 	bne	r2,zero,2000b84 <main+0x1e8>
				read_first(dev,&c);
 2000b54:	e17fe804 	addi	r5,fp,-96
 2000b58:	e13fd217 	ldw	r4,-184(fp)
 2000b5c:	20008b00 	call	20008b0 <read_first>
				// after connection was broken first character is 'I'
				if(c == 'I'){
 2000b60:	e0bfe803 	ldbu	r2,-96(fp)
 2000b64:	10803fcc 	andi	r2,r2,255
 2000b68:	10801258 	cmpnei	r2,r2,73
 2000b6c:	1000051e 	bne	r2,zero,2000b84 <main+0x1e8>
					connBroken = FALSE;
 2000b70:	e03fd345 	stb	zero,-179(fp)
#ifdef VERBOSE
					printf("Received Init character\n");
#endif
					// send init string
					write_string(dev,versionName);
 2000b74:	e17ff804 	addi	r5,fp,-32
 2000b78:	e13fd217 	ldw	r4,-184(fp)
 2000b7c:	20008f00 	call	20008f0 <write_string>

					uart_timeout = 0;
 2000b80:	e03fd615 	stw	zero,-168(fp)
				}
			}
			// blink the Leds on no connection
			if(display_Counter==0){
 2000b84:	e0bfd517 	ldw	r2,-172(fp)
 2000b88:	1004c03a 	cmpne	r2,r2,zero
 2000b8c:	1000521e 	bne	r2,zero,2000cd8 <main+0x33c>
				LED = ~LED;
 2000b90:	e0bfde03 	ldbu	r2,-136(fp)
 2000b94:	0084303a 	nor	r2,zero,r2
 2000b98:	e0bfde05 	stb	r2,-136(fp)
			    IOWR(LED_BASE,0,LED);
 2000b9c:	e0ffde03 	ldbu	r3,-136(fp)
 2000ba0:	00818034 	movhi	r2,1536
 2000ba4:	10845004 	addi	r2,r2,4416
 2000ba8:	10c00035 	stwio	r3,0(r2)
 2000bac:	00004a06 	br	2000cd8 <main+0x33c>

		}
		else // connected to main processor
		{
			// count rounds since last received packet
			uart_timeout++;
 2000bb0:	e0bfd617 	ldw	r2,-168(fp)
 2000bb4:	10800044 	addi	r2,r2,1
 2000bb8:	e0bfd615 	stw	r2,-168(fp)
			outdat.values.network_timeout = uart_timeout;
 2000bbc:	e0bfd617 	ldw	r2,-168(fp)
 2000bc0:	e0bff015 	stw	r2,-64(fp)

			if(uart_timeout >=50)
 2000bc4:	e0bfd617 	ldw	r2,-168(fp)
 2000bc8:	10800cb0 	cmpltui	r2,r2,50
 2000bcc:	1000031e 	bne	r2,zero,2000bdc <main+0x240>
			{
				connBroken = TRUE;
 2000bd0:	00800044 	movi	r2,1
 2000bd4:	e0bfd345 	stb	r2,-179(fp)
#ifdef VERBOSE
				printf("Uart Connection Broken!!!\n");
#endif
				uart_timeout = 0;
 2000bd8:	e03fd615 	stw	zero,-168(fp)
			}
            // is the packet in the buffer a whole indat packet?
			if( i >= sizeof(indat)+1)
 2000bdc:	e0bfe017 	ldw	r2,-128(fp)
 2000be0:	10800270 	cmpltui	r2,r2,9
 2000be4:	10003c1e 	bne	r2,zero,2000cd8 <main+0x33c>
			{
				// RECEIVE

				// drop all data until start bit received
				read_first(dev,&c);
 2000be8:	e17fe804 	addi	r5,fp,-96
 2000bec:	e13fd217 	ldw	r4,-184(fp)
 2000bf0:	20008b00 	call	20008b0 <read_first>
				if(c == 'S')
 2000bf4:	e0bfe803 	ldbu	r2,-96(fp)
 2000bf8:	10803fcc 	andi	r2,r2,255
 2000bfc:	108014d8 	cmpnei	r2,r2,83
 2000c00:	1000351e 	bne	r2,zero,2000cd8 <main+0x33c>
				{
					uart_timeout = 0;
 2000c04:	e03fd615 	stw	zero,-168(fp)
					// receive indata
					for(j=0;j<sizeof(indat);j++){
 2000c08:	e03fdf15 	stw	zero,-132(fp)
 2000c0c:	00000806 	br	2000c30 <main+0x294>
						read_first(dev,indat.serial+j);
 2000c10:	e0bfdf17 	ldw	r2,-132(fp)
 2000c14:	e17fe904 	addi	r5,fp,-92
 2000c18:	288b883a 	add	r5,r5,r2
 2000c1c:	e13fd217 	ldw	r4,-184(fp)
 2000c20:	20008b00 	call	20008b0 <read_first>
				read_first(dev,&c);
				if(c == 'S')
				{
					uart_timeout = 0;
					// receive indata
					for(j=0;j<sizeof(indat);j++){
 2000c24:	e0bfdf17 	ldw	r2,-132(fp)
 2000c28:	10800044 	addi	r2,r2,1
 2000c2c:	e0bfdf15 	stw	r2,-132(fp)
 2000c30:	e0bfdf17 	ldw	r2,-132(fp)
 2000c34:	10800230 	cmpltui	r2,r2,8
 2000c38:	103ff51e 	bne	r2,zero,2000c10 <main+0x274>
						read_first(dev,indat.serial+j);
					}

					// Forward W from indat to outdat
					outdat.values.W = indat.values.W;
 2000c3c:	e0bfea17 	ldw	r2,-88(fp)
 2000c40:	e0bff215 	stw	r2,-56(fp)
					// Set LEDs as received

					IOWR(LED_BASE,0,indat.values.led);
 2000c44:	e0bfe903 	ldbu	r2,-92(fp)
 2000c48:	10c03fcc 	andi	r3,r2,255
 2000c4c:	00818034 	movhi	r2,1536
 2000c50:	10845004 	addi	r2,r2,4416
 2000c54:	10c00035 	stwio	r3,0(r2)

					// SEND
					// init Character for response is 'R'
					alt_up_rs232_write_data(dev,'R');
 2000c58:	e13fd217 	ldw	r4,-184(fp)
 2000c5c:	01401484 	movi	r5,82
 2000c60:	200eb980 	call	200eb98 <alt_up_rs232_write_data>
					//Send outdat packet
					for(j=0;j<sizeof(outdat);j++){
 2000c64:	e03fdf15 	stw	zero,-132(fp)
 2000c68:	00000a06 	br	2000c94 <main+0x2f8>
						alt_up_rs232_write_data(dev,outdat.serial[j]);
 2000c6c:	e0ffdf17 	ldw	r3,-132(fp)
 2000c70:	e0bfeb04 	addi	r2,fp,-84
 2000c74:	10c5883a 	add	r2,r2,r3
 2000c78:	10800003 	ldbu	r2,0(r2)
 2000c7c:	11403fcc 	andi	r5,r2,255
 2000c80:	e13fd217 	ldw	r4,-184(fp)
 2000c84:	200eb980 	call	200eb98 <alt_up_rs232_write_data>

					// SEND
					// init Character for response is 'R'
					alt_up_rs232_write_data(dev,'R');
					//Send outdat packet
					for(j=0;j<sizeof(outdat);j++){
 2000c88:	e0bfdf17 	ldw	r2,-132(fp)
 2000c8c:	10800044 	addi	r2,r2,1
 2000c90:	e0bfdf15 	stw	r2,-132(fp)
 2000c94:	e0bfdf17 	ldw	r2,-132(fp)
 2000c98:	10800d30 	cmpltui	r2,r2,52
 2000c9c:	103ff31e 	bne	r2,zero,2000c6c <main+0x2d0>
						alt_up_rs232_write_data(dev,outdat.serial[j]);
					}
					// clear acc sums
					for(j=0;j<3; j++)
 2000ca0:	e03fdf15 	stw	zero,-132(fp)
 2000ca4:	00000906 	br	2000ccc <main+0x330>
					  outdat.values.Acc.sum[j] = 0;
 2000ca8:	e0bfdf17 	ldw	r2,-132(fp)
 2000cac:	1085883a 	add	r2,r2,r2
 2000cb0:	e0ffce04 	addi	r3,fp,-200
 2000cb4:	10c5883a 	add	r2,r2,r3
 2000cb8:	10801f04 	addi	r2,r2,124
 2000cbc:	1000008d 	sth	zero,2(r2)
					//Send outdat packet
					for(j=0;j<sizeof(outdat);j++){
						alt_up_rs232_write_data(dev,outdat.serial[j]);
					}
					// clear acc sums
					for(j=0;j<3; j++)
 2000cc0:	e0bfdf17 	ldw	r2,-132(fp)
 2000cc4:	10800044 	addi	r2,r2,1
 2000cc8:	e0bfdf15 	stw	r2,-132(fp)
 2000ccc:	e0bfdf17 	ldw	r2,-132(fp)
 2000cd0:	108000d0 	cmplti	r2,r2,3
 2000cd4:	103ff41e 	bne	r2,zero,2000ca8 <main+0x30c>
				}
			}

		}
		// Display Values
		if (display_Counter == 0) {
 2000cd8:	e0bfd517 	ldw	r2,-172(fp)
 2000cdc:	1004c03a 	cmpne	r2,r2,zero
 2000ce0:	1000091e 	bne	r2,zero,2000d08 <main+0x36c>
		  outdat.values.ubat = ADC_Read(0)*1250/2630;
 2000ce4:	0009883a 	mov	r4,zero
 2000ce8:	2001cac0 	call	2001cac <ADC_Read>
 2000cec:	113fffcc 	andi	r4,r2,65535
 2000cf0:	01413884 	movi	r5,1250
 2000cf4:	2003b380 	call	2003b38 <__mulsi3>
 2000cf8:	1009883a 	mov	r4,r2
 2000cfc:	01429184 	movi	r5,2630
 2000d00:	2003a680 	call	2003a68 <__divsi3>
 2000d04:	e0bfeb8d 	sth	r2,-82(fp)
#endif

		}


		if(outdat.values.enMotorController)
 2000d08:	e0bfeb43 	ldbu	r2,-83(fp)
 2000d0c:	10803fcc 	andi	r2,r2,255
 2000d10:	1005003a 	cmpeq	r2,r2,zero
 2000d14:	10007a1e 	bne	r2,zero,2000f00 <main+0x564>
		{
			int x_temp;

			// read Encoder
			*pEnc = 1;
 2000d18:	e0ffe617 	ldw	r3,-104(fp)
 2000d1c:	00800044 	movi	r2,1
 2000d20:	18800015 	stw	r2,0(r3)
			delay(5000);
 2000d24:	0104e204 	movi	r4,5000
 2000d28:	20007b80 	call	20007b8 <delay>
			prevX = outdat.values.X;
 2000d2c:	e0bff117 	ldw	r2,-60(fp)
 2000d30:	e0bfd815 	stw	r2,-160(fp)
			x_temp = *pEnc * 2; // * 2 for similar size of W and X
 2000d34:	e0bfe617 	ldw	r2,-104(fp)
 2000d38:	10800017 	ldw	r2,0(r2)
 2000d3c:	1085883a 	add	r2,r2,r2
 2000d40:	e0bfd115 	stw	r2,-188(fp)
			//U[X]=rotations per 100us
			direction = *pDir;
 2000d44:	e0bfe517 	ldw	r2,-108(fp)
 2000d48:	10800017 	ldw	r2,0(r2)
 2000d4c:	e0bfe715 	stw	r2,-100(fp)
			// add direction
			if (direction == 2)
 2000d50:	e0bfe717 	ldw	r2,-100(fp)
 2000d54:	10800098 	cmpnei	r2,r2,2
 2000d58:	1000031e 	bne	r2,zero,2000d68 <main+0x3cc>
				x_temp *= -1;
 2000d5c:	e0bfd117 	ldw	r2,-188(fp)
 2000d60:	0085c83a 	sub	r2,zero,r2
 2000d64:	e0bfd115 	stw	r2,-188(fp)
			outdat.values.X = x_temp;
 2000d68:	e0bfd117 	ldw	r2,-188(fp)
 2000d6c:	e0bff115 	stw	r2,-60(fp)

			int diff = outdat.values.W -outdat.values.X;
 2000d70:	e0fff217 	ldw	r3,-56(fp)
 2000d74:	e0bff117 	ldw	r2,-60(fp)
 2000d78:	1885c83a 	sub	r2,r3,r2
 2000d7c:	e0bfd015 	stw	r2,-192(fp)
			// P Controller
			outdat.values.P = (diff) * P_Parameter;
 2000d80:	e13fd017 	ldw	r4,-192(fp)
 2000d84:	e17fdc17 	ldw	r5,-144(fp)
 2000d88:	2003b380 	call	2003b38 <__mulsi3>
 2000d8c:	e0bff315 	stw	r2,-52(fp)

			// I Controller
			outdat.values.I += (diff)*I_Parameter;
 2000d90:	e43ff417 	ldw	r16,-48(fp)
 2000d94:	e13fd017 	ldw	r4,-192(fp)
 2000d98:	e17fdd17 	ldw	r5,-140(fp)
 2000d9c:	2003b380 	call	2003b38 <__mulsi3>
 2000da0:	8085883a 	add	r2,r16,r2
 2000da4:	e0bff415 	stw	r2,-48(fp)

			// proportional to Command Variable (Feed Forward)
			outdat.values.FF = outdat.values.W * FF_Parameter;
 2000da8:	e13ff217 	ldw	r4,-56(fp)
 2000dac:	e17fdb17 	ldw	r5,-148(fp)
 2000db0:	2003b380 	call	2003b38 <__mulsi3>
 2000db4:	e0bff615 	stw	r2,-40(fp)

			// D Controller
			outdat.values.D = (diff - (prevW - prevX)) * D_Parameter;
 2000db8:	e0ffd917 	ldw	r3,-156(fp)
 2000dbc:	e0bfd817 	ldw	r2,-160(fp)
 2000dc0:	1887c83a 	sub	r3,r3,r2
 2000dc4:	e0bfd017 	ldw	r2,-192(fp)
 2000dc8:	10c9c83a 	sub	r4,r2,r3
 2000dcc:	e17fda17 	ldw	r5,-152(fp)
 2000dd0:	2003b380 	call	2003b38 <__mulsi3>
 2000dd4:	e0bff515 	stw	r2,-44(fp)
			prevW = outdat.values.W;
 2000dd8:	e0bff217 	ldw	r2,-56(fp)
 2000ddc:	e0bfd915 	stw	r2,-156(fp)
            // Sum of all Controllers
			int temp_duty= outdat.values.P + outdat.values.I
					 + outdat.values.D + outdat.values.FF;
 2000de0:	e0fff317 	ldw	r3,-52(fp)
 2000de4:	e0bff417 	ldw	r2,-48(fp)
 2000de8:	1887883a 	add	r3,r3,r2
 2000dec:	e0bff517 	ldw	r2,-44(fp)
 2000df0:	1887883a 	add	r3,r3,r2
 2000df4:	e0bff617 	ldw	r2,-40(fp)
 2000df8:	1885883a 	add	r2,r3,r2
 2000dfc:	e0bfcf15 	stw	r2,-196(fp)
			// get direction
			if(temp_duty < 0)
 2000e00:	e0bfcf17 	ldw	r2,-196(fp)
 2000e04:	1004403a 	cmpge	r2,r2,zero
 2000e08:	1000031e 	bne	r2,zero,2000e18 <main+0x47c>
				enable = 2;
 2000e0c:	00800084 	movi	r2,2
 2000e10:	e0bfe115 	stw	r2,-124(fp)
 2000e14:	00000206 	br	2000e20 <main+0x484>
			else
				enable = 1;
 2000e18:	00800044 	movi	r2,1
 2000e1c:	e0bfe115 	stw	r2,-124(fp)
			temp_duty = abs(temp_duty);
 2000e20:	e0bfcf17 	ldw	r2,-196(fp)
 2000e24:	e0bffe15 	stw	r2,-8(fp)
 2000e28:	e0fffe17 	ldw	r3,-8(fp)
 2000e2c:	1804403a 	cmpge	r2,r3,zero
 2000e30:	1000031e 	bne	r2,zero,2000e40 <main+0x4a4>
 2000e34:	e0bffe17 	ldw	r2,-8(fp)
 2000e38:	0085c83a 	sub	r2,zero,r2
 2000e3c:	e0bffe15 	stw	r2,-8(fp)
 2000e40:	e0fffe17 	ldw	r3,-8(fp)
 2000e44:	e0ffcf15 	stw	r3,-196(fp)


			if (temp_duty <= 10000)
 2000e48:	e0bfcf17 	ldw	r2,-196(fp)
 2000e4c:	1089c448 	cmpgei	r2,r2,10001
 2000e50:	1000011e 	bne	r2,zero,2000e58 <main+0x4bc>
				temp_duty = 0;
 2000e54:	e03fcf15 	stw	zero,-196(fp)
			if (temp_duty >= 99000)
 2000e58:	e0ffcf17 	ldw	r3,-196(fp)
 2000e5c:	008000b4 	movhi	r2,2
 2000e60:	10a0adc4 	addi	r2,r2,-32073
 2000e64:	10c0030e 	bge	r2,r3,2000e74 <main+0x4d8>
				temp_duty = 99000;
 2000e68:	008000b4 	movhi	r2,2
 2000e6c:	10a0ae04 	addi	r2,r2,-32072
 2000e70:	e0bfcf15 	stw	r2,-196(fp)
			// 100 times maximal duty and no rotation => connection broken!!
			if(indat.values.enConnBrokenCtr)
 2000e74:	e0bfe943 	ldbu	r2,-91(fp)
 2000e78:	10803fcc 	andi	r2,r2,255
 2000e7c:	1005003a 	cmpeq	r2,r2,zero
 2000e80:	1000131e 	bne	r2,zero,2000ed0 <main+0x534>
			{
				if(temp_duty >= 99000 && outdat.values.X == 0)
 2000e84:	e0ffcf17 	ldw	r3,-196(fp)
 2000e88:	008000b4 	movhi	r2,2
 2000e8c:	10a0adc4 	addi	r2,r2,-32073
 2000e90:	10c0070e 	bge	r2,r3,2000eb0 <main+0x514>
 2000e94:	e0bff117 	ldw	r2,-60(fp)
 2000e98:	1004c03a 	cmpne	r2,r2,zero
 2000e9c:	1000041e 	bne	r2,zero,2000eb0 <main+0x514>
					connection_broken_counter++;
 2000ea0:	e0bfd717 	ldw	r2,-164(fp)
 2000ea4:	10800044 	addi	r2,r2,1
 2000ea8:	e0bfd715 	stw	r2,-164(fp)
			if (temp_duty >= 99000)
				temp_duty = 99000;
			// 100 times maximal duty and no rotation => connection broken!!
			if(indat.values.enConnBrokenCtr)
			{
				if(temp_duty >= 99000 && outdat.values.X == 0)
 2000eac:	00000106 	br	2000eb4 <main+0x518>
					connection_broken_counter++;
				else
					connection_broken_counter =0;
 2000eb0:	e03fd715 	stw	zero,-164(fp)

				if(connection_broken_counter > 100)
 2000eb4:	e0bfd717 	ldw	r2,-164(fp)
 2000eb8:	10801970 	cmpltui	r2,r2,101
 2000ebc:	1000041e 	bne	r2,zero,2000ed0 <main+0x534>
				{
					outdat.values.connBroken = TRUE;
 2000ec0:	00800044 	movi	r2,1
 2000ec4:	e0bfeb05 	stb	r2,-84(fp)
					outdat.values.enMotorController = FALSE;
 2000ec8:	e03feb45 	stb	zero,-83(fp)
					connection_broken_counter = 0;
 2000ecc:	e03fd715 	stw	zero,-164(fp)
				}
			}
			outdat.values.duty = temp_duty;
 2000ed0:	e0bfcf17 	ldw	r2,-196(fp)
 2000ed4:	e0bfef15 	stw	r2,-68(fp)

			motor_setting(phase1, outdat.values.duty, phase2, outdat.values.duty, period, enable);
 2000ed8:	e17fef17 	ldw	r5,-68(fp)
 2000edc:	e1ffef17 	ldw	r7,-68(fp)
 2000ee0:	e0bfe217 	ldw	r2,-120(fp)
 2000ee4:	d8800015 	stw	r2,0(sp)
 2000ee8:	e0bfe117 	ldw	r2,-124(fp)
 2000eec:	d8800115 	stw	r2,4(sp)
 2000ef0:	e13fe417 	ldw	r4,-112(fp)
 2000ef4:	e1bfe317 	ldw	r6,-116(fp)
 2000ef8:	20007f40 	call	20007f4 <motor_setting>
 2000efc:	00002f06 	br	2000fbc <main+0x620>
		}
		else
		{
			// setEnMotorController has to be reseted and then set again:
			if(!indat.values.setEnMotorController)
 2000f00:	e0bfe983 	ldbu	r2,-90(fp)
 2000f04:	10803fcc 	andi	r2,r2,255
 2000f08:	1004c03a 	cmpne	r2,r2,zero
 2000f0c:	1000021e 	bne	r2,zero,2000f18 <main+0x57c>
				setEnMotorwasoff = TRUE;
 2000f10:	00800044 	movi	r2,1
 2000f14:	e0bfd305 	stb	r2,-180(fp)
			motor_setting(phase1,0,phase2,0,period,enable);
 2000f18:	e0bfe217 	ldw	r2,-120(fp)
 2000f1c:	d8800015 	stw	r2,0(sp)
 2000f20:	e0bfe117 	ldw	r2,-124(fp)
 2000f24:	d8800115 	stw	r2,4(sp)
 2000f28:	e13fe417 	ldw	r4,-112(fp)
 2000f2c:	000b883a 	mov	r5,zero
 2000f30:	e1bfe317 	ldw	r6,-116(fp)
 2000f34:	000f883a 	mov	r7,zero
 2000f38:	20007f40 	call	20007f4 <motor_setting>
			outdat.values.I = 0;
 2000f3c:	e03ff415 	stw	zero,-48(fp)
			outdat.values.duty=0;
 2000f40:	e03fef15 	stw	zero,-68(fp)
			int x_temp;
			// read Encoder
			*pEnc = 1;
 2000f44:	e0ffe617 	ldw	r3,-104(fp)
 2000f48:	00800044 	movi	r2,1
 2000f4c:	18800015 	stw	r2,0(r3)
			delay(5000);
 2000f50:	0104e204 	movi	r4,5000
 2000f54:	20007b80 	call	20007b8 <delay>
			x_temp = *pEnc * 2; // * 2 for similar size of W and X
 2000f58:	e0bfe617 	ldw	r2,-104(fp)
 2000f5c:	10800017 	ldw	r2,0(r2)
 2000f60:	1085883a 	add	r2,r2,r2
 2000f64:	e0bfce15 	stw	r2,-200(fp)
			//U[X]=rotations per 100us
			direction = *pDir;
 2000f68:	e0bfe517 	ldw	r2,-108(fp)
 2000f6c:	10800017 	ldw	r2,0(r2)
 2000f70:	e0bfe715 	stw	r2,-100(fp)
			// add direction
			if (direction == 2)
 2000f74:	e0bfe717 	ldw	r2,-100(fp)
 2000f78:	10800098 	cmpnei	r2,r2,2
 2000f7c:	1000031e 	bne	r2,zero,2000f8c <main+0x5f0>
				x_temp *= -1;
 2000f80:	e0bfce17 	ldw	r2,-200(fp)
 2000f84:	0085c83a 	sub	r2,zero,r2
 2000f88:	e0bfce15 	stw	r2,-200(fp)
			outdat.values.X = x_temp;
 2000f8c:	e0bfce17 	ldw	r2,-200(fp)
 2000f90:	e0bff115 	stw	r2,-60(fp)
			if(indat.values.setEnMotorController && setEnMotorwasoff){
 2000f94:	e0bfe983 	ldbu	r2,-90(fp)
 2000f98:	10803fcc 	andi	r2,r2,255
 2000f9c:	1005003a 	cmpeq	r2,r2,zero
 2000fa0:	1000061e 	bne	r2,zero,2000fbc <main+0x620>
 2000fa4:	e0bfd303 	ldbu	r2,-180(fp)
 2000fa8:	1005003a 	cmpeq	r2,r2,zero
 2000fac:	1000031e 	bne	r2,zero,2000fbc <main+0x620>
				outdat.values.enMotorController = TRUE;
 2000fb0:	00800044 	movi	r2,1
 2000fb4:	e0bfeb45 	stb	r2,-83(fp)
				setEnMotorwasoff = FALSE;
 2000fb8:	e03fd305 	stb	zero,-180(fp)
			}
		}

		// handle Ultrasound and acceleration sensor
		switch(dist_Counter){
 2000fbc:	e0bfd417 	ldw	r2,-176(fp)
 2000fc0:	e0bfff15 	stw	r2,-4(fp)
 2000fc4:	e0ffff17 	ldw	r3,-4(fp)
 2000fc8:	1805003a 	cmpeq	r2,r3,zero
 2000fcc:	1000041e 	bne	r2,zero,2000fe0 <main+0x644>
 2000fd0:	e0ffff17 	ldw	r3,-4(fp)
 2000fd4:	18800160 	cmpeqi	r2,r3,5
 2000fd8:	1000031e 	bne	r2,zero,2000fe8 <main+0x64c>
 2000fdc:	003ec806 	br	2000b00 <main+0x164>
		case 0:
			handle_measuredis();
 2000fe0:	20003640 	call	2000364 <handle_measuredis>
			break;
 2000fe4:	003ec606 	br	2000b00 <main+0x164>
		case 5:
			handle_accel();
 2000fe8:	20006880 	call	2000688 <handle_accel>
			break;
		}


	}
 2000fec:	003ec406 	br	2000b00 <main+0x164>
	return 0;
	error:
#ifdef VERBOSE
	printf("ERROR occured!!!!!");
#endif
	return -1;
 2000ff0:	00bfffc4 	movi	r2,-1
}
 2000ff4:	e037883a 	mov	sp,fp
 2000ff8:	dfc00217 	ldw	ra,8(sp)
 2000ffc:	df000117 	ldw	fp,4(sp)
 2001000:	dc000017 	ldw	r16,0(sp)
 2001004:	dec00304 	addi	sp,sp,12
 2001008:	f800283a 	ret

0200100c <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 200100c:	defff804 	addi	sp,sp,-32
 2001010:	dfc00715 	stw	ra,28(sp)
 2001014:	df000615 	stw	fp,24(sp)
 2001018:	df000604 	addi	fp,sp,24
 200101c:	e13ffb15 	stw	r4,-20(fp)
 2001020:	e17ffc15 	stw	r5,-16(fp)
 2001024:	e0800217 	ldw	r2,8(fp)
 2001028:	e1bffd05 	stb	r6,-12(fp)
 200102c:	e1fffe05 	stb	r7,-8(fp)
 2001030:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 2001034:	00800044 	movi	r2,1
 2001038:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 200103c:	e13ffb17 	ldw	r4,-20(fp)
 2001040:	e17ffc17 	ldw	r5,-16(fp)
 2001044:	20014540 	call	2001454 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2001048:	e0bffd03 	ldbu	r2,-12(fp)
 200104c:	11803fcc 	andi	r6,r2,255
 2001050:	e13ffb17 	ldw	r4,-20(fp)
 2001054:	e17ffc17 	ldw	r5,-16(fp)
 2001058:	20015540 	call	2001554 <i2c_write>
 200105c:	1004c03a 	cmpne	r2,r2,zero
 2001060:	1000011e 	bne	r2,zero,2001068 <I2C_Write+0x5c>
        bSuccess = FALSE;
 2001064:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2001068:	e0bffa17 	ldw	r2,-24(fp)
 200106c:	1005003a 	cmpeq	r2,r2,zero
 2001070:	1000071e 	bne	r2,zero,2001090 <I2C_Write+0x84>
 2001074:	e1bffe03 	ldbu	r6,-8(fp)
 2001078:	e13ffb17 	ldw	r4,-20(fp)
 200107c:	e17ffc17 	ldw	r5,-16(fp)
 2001080:	20015540 	call	2001554 <i2c_write>
 2001084:	1004c03a 	cmpne	r2,r2,zero
 2001088:	1000011e 	bne	r2,zero,2001090 <I2C_Write+0x84>
        bSuccess = FALSE;
 200108c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 2001090:	e0bffa17 	ldw	r2,-24(fp)
 2001094:	1005003a 	cmpeq	r2,r2,zero
 2001098:	1000071e 	bne	r2,zero,20010b8 <I2C_Write+0xac>
 200109c:	e1bfff03 	ldbu	r6,-4(fp)
 20010a0:	e13ffb17 	ldw	r4,-20(fp)
 20010a4:	e17ffc17 	ldw	r5,-16(fp)
 20010a8:	20015540 	call	2001554 <i2c_write>
 20010ac:	1004c03a 	cmpne	r2,r2,zero
 20010b0:	1000011e 	bne	r2,zero,20010b8 <I2C_Write+0xac>
        bSuccess = FALSE;
 20010b4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
 20010b8:	e13ffb17 	ldw	r4,-20(fp)
 20010bc:	e17ffc17 	ldw	r5,-16(fp)
 20010c0:	20014dc0 	call	20014dc <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 20010c4:	0106d604 	movi	r4,7000
 20010c8:	200da6c0 	call	200da6c <usleep>
    
    return bSuccess;
 20010cc:	e0bffa17 	ldw	r2,-24(fp)

    
}
 20010d0:	e037883a 	mov	sp,fp
 20010d4:	dfc00117 	ldw	ra,4(sp)
 20010d8:	df000017 	ldw	fp,0(sp)
 20010dc:	dec00204 	addi	sp,sp,8
 20010e0:	f800283a 	ret

020010e4 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
 20010e4:	defff904 	addi	sp,sp,-28
 20010e8:	dfc00615 	stw	ra,24(sp)
 20010ec:	df000515 	stw	fp,20(sp)
 20010f0:	df000504 	addi	fp,sp,20
 20010f4:	e13ffc15 	stw	r4,-16(fp)
 20010f8:	e17ffd15 	stw	r5,-12(fp)
 20010fc:	e1bffe05 	stb	r6,-8(fp)
 2001100:	e1ffff05 	stb	r7,-4(fp)
    bool bSuccess = TRUE;
 2001104:	00800044 	movi	r2,1
 2001108:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 200110c:	e13ffc17 	ldw	r4,-16(fp)
 2001110:	e17ffd17 	ldw	r5,-12(fp)
 2001114:	20014540 	call	2001454 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2001118:	e0bffe03 	ldbu	r2,-8(fp)
 200111c:	11803fcc 	andi	r6,r2,255
 2001120:	e13ffc17 	ldw	r4,-16(fp)
 2001124:	e17ffd17 	ldw	r5,-12(fp)
 2001128:	20015540 	call	2001554 <i2c_write>
 200112c:	1004c03a 	cmpne	r2,r2,zero
 2001130:	1000011e 	bne	r2,zero,2001138 <I2C_Read+0x54>
        bSuccess = FALSE;
 2001134:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2001138:	e0bffb17 	ldw	r2,-20(fp)
 200113c:	1005003a 	cmpeq	r2,r2,zero
 2001140:	1000071e 	bne	r2,zero,2001160 <I2C_Read+0x7c>
 2001144:	e1bfff03 	ldbu	r6,-4(fp)
 2001148:	e13ffc17 	ldw	r4,-16(fp)
 200114c:	e17ffd17 	ldw	r5,-12(fp)
 2001150:	20015540 	call	2001554 <i2c_write>
 2001154:	1004c03a 	cmpne	r2,r2,zero
 2001158:	1000011e 	bne	r2,zero,2001160 <I2C_Read+0x7c>
        bSuccess = FALSE;
 200115c:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
 2001160:	e13ffc17 	ldw	r4,-16(fp)
 2001164:	e17ffd17 	ldw	r5,-12(fp)
 2001168:	20014540 	call	2001454 <i2c_start>
    DeviceAddr |= 1; // Read
 200116c:	e0bffe03 	ldbu	r2,-8(fp)
 2001170:	10800054 	ori	r2,r2,1
 2001174:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 2001178:	e0bffb17 	ldw	r2,-20(fp)
 200117c:	1005003a 	cmpeq	r2,r2,zero
 2001180:	1000081e 	bne	r2,zero,20011a4 <I2C_Read+0xc0>
 2001184:	e0bffe03 	ldbu	r2,-8(fp)
 2001188:	11803fcc 	andi	r6,r2,255
 200118c:	e13ffc17 	ldw	r4,-16(fp)
 2001190:	e17ffd17 	ldw	r5,-12(fp)
 2001194:	20015540 	call	2001554 <i2c_write>
 2001198:	1004c03a 	cmpne	r2,r2,zero
 200119c:	1000011e 	bne	r2,zero,20011a4 <I2C_Read+0xc0>
        bSuccess = FALSE;
 20011a0:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 20011a4:	e0bffb17 	ldw	r2,-20(fp)
 20011a8:	1005003a 	cmpeq	r2,r2,zero
 20011ac:	1000051e 	bne	r2,zero,20011c4 <I2C_Read+0xe0>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 20011b0:	e13ffc17 	ldw	r4,-16(fp)
 20011b4:	e17ffd17 	ldw	r5,-12(fp)
 20011b8:	e1800217 	ldw	r6,8(fp)
 20011bc:	000f883a 	mov	r7,zero
 20011c0:	20016780 	call	2001678 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 20011c4:	e13ffc17 	ldw	r4,-16(fp)
 20011c8:	e17ffd17 	ldw	r5,-12(fp)
 20011cc:	20014dc0 	call	20014dc <i2c_stop>
    
    return bSuccess;
 20011d0:	e0bffb17 	ldw	r2,-20(fp)
}
 20011d4:	e037883a 	mov	sp,fp
 20011d8:	dfc00117 	ldw	ra,4(sp)
 20011dc:	df000017 	ldw	fp,0(sp)
 20011e0:	dec00204 	addi	sp,sp,8
 20011e4:	f800283a 	ret

020011e8 <I2C_MultipleWrite>:


bool I2C_MultipleWrite(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pData, alt_u16 len){
 20011e8:	defff704 	addi	sp,sp,-36
 20011ec:	dfc00815 	stw	ra,32(sp)
 20011f0:	df000715 	stw	fp,28(sp)
 20011f4:	df000704 	addi	fp,sp,28
 20011f8:	e13ffb15 	stw	r4,-20(fp)
 20011fc:	e17ffc15 	stw	r5,-16(fp)
 2001200:	e0800317 	ldw	r2,12(fp)
 2001204:	e1bffd05 	stb	r6,-12(fp)
 2001208:	e1fffe05 	stb	r7,-8(fp)
 200120c:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 2001210:	00800044 	movi	r2,1
 2001214:	e0bffa15 	stw	r2,-24(fp)
    int i;

    i2c_start(clk_base, data_base);
 2001218:	e13ffb17 	ldw	r4,-20(fp)
 200121c:	e17ffc17 	ldw	r5,-16(fp)
 2001220:	20014540 	call	2001454 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2001224:	e0bffd03 	ldbu	r2,-12(fp)
 2001228:	11803fcc 	andi	r6,r2,255
 200122c:	e13ffb17 	ldw	r4,-20(fp)
 2001230:	e17ffc17 	ldw	r5,-16(fp)
 2001234:	20015540 	call	2001554 <i2c_write>
 2001238:	1004c03a 	cmpne	r2,r2,zero
 200123c:	1000011e 	bne	r2,zero,2001244 <I2C_MultipleWrite+0x5c>
        bSuccess = FALSE;
 2001240:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2001244:	e0bffa17 	ldw	r2,-24(fp)
 2001248:	1005003a 	cmpeq	r2,r2,zero
 200124c:	1000071e 	bne	r2,zero,200126c <I2C_MultipleWrite+0x84>
 2001250:	e1bffe03 	ldbu	r6,-8(fp)
 2001254:	e13ffb17 	ldw	r4,-20(fp)
 2001258:	e17ffc17 	ldw	r5,-16(fp)
 200125c:	20015540 	call	2001554 <i2c_write>
 2001260:	1004c03a 	cmpne	r2,r2,zero
 2001264:	1000011e 	bne	r2,zero,200126c <I2C_MultipleWrite+0x84>
        bSuccess = FALSE;
 2001268:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess){
 200126c:	e0bffa17 	ldw	r2,-24(fp)
 2001270:	1005003a 	cmpeq	r2,r2,zero
 2001274:	1000151e 	bne	r2,zero,20012cc <I2C_MultipleWrite+0xe4>
        for(i=0;i<len && bSuccess;i++){
 2001278:	e03ff915 	stw	zero,-28(fp)
 200127c:	00000d06 	br	20012b4 <I2C_MultipleWrite+0xcc>
            bSuccess = i2c_write(clk_base, data_base, *pData);
 2001280:	e0800217 	ldw	r2,8(fp)
 2001284:	10800003 	ldbu	r2,0(r2)
 2001288:	11803fcc 	andi	r6,r2,255
 200128c:	e13ffb17 	ldw	r4,-20(fp)
 2001290:	e17ffc17 	ldw	r5,-16(fp)
 2001294:	20015540 	call	2001554 <i2c_write>
 2001298:	e0bffa15 	stw	r2,-24(fp)
            pData++;
 200129c:	e0800217 	ldw	r2,8(fp)
 20012a0:	10800044 	addi	r2,r2,1
 20012a4:	e0800215 	stw	r2,8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 20012a8:	e0bff917 	ldw	r2,-28(fp)
 20012ac:	10800044 	addi	r2,r2,1
 20012b0:	e0bff915 	stw	r2,-28(fp)
 20012b4:	e0ffff0b 	ldhu	r3,-4(fp)
 20012b8:	e0bff917 	ldw	r2,-28(fp)
 20012bc:	10c0030e 	bge	r2,r3,20012cc <I2C_MultipleWrite+0xe4>
 20012c0:	e0bffa17 	ldw	r2,-24(fp)
 20012c4:	1004c03a 	cmpne	r2,r2,zero
 20012c8:	103fed1e 	bne	r2,zero,2001280 <I2C_MultipleWrite+0x98>
            pData++;
        }
        if (!bSuccess)         
            I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
 20012cc:	e13ffb17 	ldw	r4,-20(fp)
 20012d0:	e17ffc17 	ldw	r5,-16(fp)
 20012d4:	20014dc0 	call	20014dc <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 20012d8:	0106d604 	movi	r4,7000
 20012dc:	200da6c0 	call	200da6c <usleep>
    
    return bSuccess;
 20012e0:	e0bffa17 	ldw	r2,-24(fp)

    
}
 20012e4:	e037883a 	mov	sp,fp
 20012e8:	dfc00117 	ldw	ra,4(sp)
 20012ec:	df000017 	ldw	fp,0(sp)
 20012f0:	dec00204 	addi	sp,sp,8
 20012f4:	f800283a 	ret

020012f8 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pBuf, alt_u16 len){
 20012f8:	defff704 	addi	sp,sp,-36
 20012fc:	dfc00815 	stw	ra,32(sp)
 2001300:	df000715 	stw	fp,28(sp)
 2001304:	df000704 	addi	fp,sp,28
 2001308:	e13ffb15 	stw	r4,-20(fp)
 200130c:	e17ffc15 	stw	r5,-16(fp)
 2001310:	e0800317 	ldw	r2,12(fp)
 2001314:	e1bffd05 	stb	r6,-12(fp)
 2001318:	e1fffe05 	stb	r7,-8(fp)
 200131c:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
 2001320:	00800044 	movi	r2,1
 2001324:	e0bff915 	stw	r2,-28(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 2001328:	e13ffb17 	ldw	r4,-20(fp)
 200132c:	e17ffc17 	ldw	r5,-16(fp)
 2001330:	20014540 	call	2001454 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2001334:	e0bffd03 	ldbu	r2,-12(fp)
 2001338:	11803fcc 	andi	r6,r2,255
 200133c:	e13ffb17 	ldw	r4,-20(fp)
 2001340:	e17ffc17 	ldw	r5,-16(fp)
 2001344:	20015540 	call	2001554 <i2c_write>
 2001348:	1004c03a 	cmpne	r2,r2,zero
 200134c:	1000011e 	bne	r2,zero,2001354 <I2C_MultipleRead+0x5c>
        bSuccess = FALSE;
 2001350:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2001354:	e0bff917 	ldw	r2,-28(fp)
 2001358:	1005003a 	cmpeq	r2,r2,zero
 200135c:	1000071e 	bne	r2,zero,200137c <I2C_MultipleRead+0x84>
 2001360:	e1bffe03 	ldbu	r6,-8(fp)
 2001364:	e13ffb17 	ldw	r4,-20(fp)
 2001368:	e17ffc17 	ldw	r5,-16(fp)
 200136c:	20015540 	call	2001554 <i2c_write>
 2001370:	1004c03a 	cmpne	r2,r2,zero
 2001374:	1000011e 	bne	r2,zero,200137c <I2C_MultipleRead+0x84>
        bSuccess = FALSE;
 2001378:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
 200137c:	e0bff917 	ldw	r2,-28(fp)
 2001380:	1005003a 	cmpeq	r2,r2,zero
 2001384:	1000031e 	bne	r2,zero,2001394 <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
 2001388:	e13ffb17 	ldw	r4,-20(fp)
 200138c:	e17ffc17 	ldw	r5,-16(fp)
 2001390:	20014540 	call	2001454 <i2c_start>
    DeviceAddr |= 1; // Read
 2001394:	e0bffd03 	ldbu	r2,-12(fp)
 2001398:	10800054 	ori	r2,r2,1
 200139c:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 20013a0:	e0bff917 	ldw	r2,-28(fp)
 20013a4:	1005003a 	cmpeq	r2,r2,zero
 20013a8:	1000081e 	bne	r2,zero,20013cc <I2C_MultipleRead+0xd4>
 20013ac:	e0bffd03 	ldbu	r2,-12(fp)
 20013b0:	11803fcc 	andi	r6,r2,255
 20013b4:	e13ffb17 	ldw	r4,-20(fp)
 20013b8:	e17ffc17 	ldw	r5,-16(fp)
 20013bc:	20015540 	call	2001554 <i2c_write>
 20013c0:	1004c03a 	cmpne	r2,r2,zero
 20013c4:	1000011e 	bne	r2,zero,20013cc <I2C_MultipleRead+0xd4>
        bSuccess = FALSE;
 20013c8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 20013cc:	e0bff917 	ldw	r2,-28(fp)
 20013d0:	1005003a 	cmpeq	r2,r2,zero
 20013d4:	1000161e 	bne	r2,zero,2001430 <I2C_MultipleRead+0x138>
        for(i=0;i<len && bSuccess;i++){
 20013d8:	e03ffa15 	stw	zero,-24(fp)
 20013dc:	00000e06 	br	2001418 <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
 20013e0:	e0bfff0b 	ldhu	r2,-4(fp)
 20013e4:	10ffffc4 	addi	r3,r2,-1
 20013e8:	e0bffa17 	ldw	r2,-24(fp)
 20013ec:	188ec03a 	cmpne	r7,r3,r2
 20013f0:	e13ffb17 	ldw	r4,-20(fp)
 20013f4:	e17ffc17 	ldw	r5,-16(fp)
 20013f8:	e1800217 	ldw	r6,8(fp)
 20013fc:	20016780 	call	2001678 <i2c_read>
            pBuf++;
 2001400:	e0800217 	ldw	r2,8(fp)
 2001404:	10800044 	addi	r2,r2,1
 2001408:	e0800215 	stw	r2,8(fp)
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 200140c:	e0bffa17 	ldw	r2,-24(fp)
 2001410:	10800044 	addi	r2,r2,1
 2001414:	e0bffa15 	stw	r2,-24(fp)
 2001418:	e0ffff0b 	ldhu	r3,-4(fp)
 200141c:	e0bffa17 	ldw	r2,-24(fp)
 2001420:	10c0030e 	bge	r2,r3,2001430 <I2C_MultipleRead+0x138>
 2001424:	e0bff917 	ldw	r2,-28(fp)
 2001428:	1004c03a 	cmpne	r2,r2,zero
 200142c:	103fec1e 	bne	r2,zero,20013e0 <I2C_MultipleRead+0xe8>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
            pBuf++;
        }            
    }        
    i2c_stop(clk_base, data_base);
 2001430:	e13ffb17 	ldw	r4,-20(fp)
 2001434:	e17ffc17 	ldw	r5,-16(fp)
 2001438:	20014dc0 	call	20014dc <i2c_stop>
    
    return bSuccess;    
 200143c:	e0bff917 	ldw	r2,-28(fp)
    
}
 2001440:	e037883a 	mov	sp,fp
 2001444:	dfc00117 	ldw	ra,4(sp)
 2001448:	df000017 	ldw	fp,0(sp)
 200144c:	dec00204 	addi	sp,sp,8
 2001450:	f800283a 	ret

02001454 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
 2001454:	defffc04 	addi	sp,sp,-16
 2001458:	dfc00315 	stw	ra,12(sp)
 200145c:	df000215 	stw	fp,8(sp)
 2001460:	df000204 	addi	fp,sp,8
 2001464:	e13ffe15 	stw	r4,-8(fp)
 2001468:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
 200146c:	e0bfff17 	ldw	r2,-4(fp)
 2001470:	10800104 	addi	r2,r2,4
 2001474:	1007883a 	mov	r3,r2
 2001478:	00800044 	movi	r2,1
 200147c:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
 2001480:	e0bfff17 	ldw	r2,-4(fp)
 2001484:	1007883a 	mov	r3,r2
 2001488:	00800044 	movi	r2,1
 200148c:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base);
 2001490:	e0bffe17 	ldw	r2,-8(fp)
 2001494:	1007883a 	mov	r3,r2
 2001498:	00800044 	movi	r2,1
 200149c:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;
 20014a0:	01000044 	movi	r4,1
 20014a4:	200da6c0 	call	200da6c <usleep>
     
    SDA_LOW(data_base); // data low
 20014a8:	e0bfff17 	ldw	r2,-4(fp)
 20014ac:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; 
 20014b0:	01000044 	movi	r4,1
 20014b4:	200da6c0 	call	200da6c <usleep>
    SCL_LOW(clk_base); // clock low
 20014b8:	e0bffe17 	ldw	r2,-8(fp)
 20014bc:	10000035 	stwio	zero,0(r2)
    SCL_DELAY;
 20014c0:	01000044 	movi	r4,1
 20014c4:	200da6c0 	call	200da6c <usleep>
}
 20014c8:	e037883a 	mov	sp,fp
 20014cc:	dfc00117 	ldw	ra,4(sp)
 20014d0:	df000017 	ldw	fp,0(sp)
 20014d4:	dec00204 	addi	sp,sp,8
 20014d8:	f800283a 	ret

020014dc <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
 20014dc:	defffc04 	addi	sp,sp,-16
 20014e0:	dfc00315 	stw	ra,12(sp)
 20014e4:	df000215 	stw	fp,8(sp)
 20014e8:	df000204 	addi	fp,sp,8
 20014ec:	e13ffe15 	stw	r4,-8(fp)
 20014f0:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
 20014f4:	e0bfff17 	ldw	r2,-4(fp)
 20014f8:	10800104 	addi	r2,r2,4
 20014fc:	1007883a 	mov	r3,r2
 2001500:	00800044 	movi	r2,1
 2001504:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
 2001508:	e0bfff17 	ldw	r2,-4(fp)
 200150c:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
 2001510:	e0bffe17 	ldw	r2,-8(fp)
 2001514:	1007883a 	mov	r3,r2
 2001518:	00800044 	movi	r2,1
 200151c:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high long delay
 2001520:	01000044 	movi	r4,1
 2001524:	200da6c0 	call	200da6c <usleep>
    SDA_HIGH(data_base); // data high
 2001528:	e0bfff17 	ldw	r2,-4(fp)
 200152c:	1007883a 	mov	r3,r2
 2001530:	00800044 	movi	r2,1
 2001534:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // data high delay
 2001538:	01000044 	movi	r4,1
 200153c:	200da6c0 	call	200da6c <usleep>
    

    
}
 2001540:	e037883a 	mov	sp,fp
 2001544:	dfc00117 	ldw	ra,4(sp)
 2001548:	df000017 	ldw	fp,0(sp)
 200154c:	dec00204 	addi	sp,sp,8
 2001550:	f800283a 	ret

02001554 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
 2001554:	defff804 	addi	sp,sp,-32
 2001558:	dfc00715 	stw	ra,28(sp)
 200155c:	df000615 	stw	fp,24(sp)
 2001560:	df000604 	addi	fp,sp,24
 2001564:	e13ffd15 	stw	r4,-12(fp)
 2001568:	e17ffe15 	stw	r5,-8(fp)
 200156c:	e1bfff05 	stb	r6,-4(fp)
    alt_u8 Mask = 0x80;
 2001570:	00bfe004 	movi	r2,-128
 2001574:	e0bffc05 	stb	r2,-16(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
 2001578:	e0bffe17 	ldw	r2,-8(fp)
 200157c:	10800104 	addi	r2,r2,4
 2001580:	1007883a 	mov	r3,r2
 2001584:	00800044 	movi	r2,1
 2001588:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
 200158c:	e03ffa15 	stw	zero,-24(fp)
 2001590:	00001f06 	br	2001610 <i2c_write+0xbc>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
 2001594:	e0bffd17 	ldw	r2,-12(fp)
 2001598:	10000035 	stwio	zero,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
 200159c:	e0ffff03 	ldbu	r3,-4(fp)
 20015a0:	e0bffc03 	ldbu	r2,-16(fp)
 20015a4:	1884703a 	and	r2,r3,r2
 20015a8:	10803fcc 	andi	r2,r2,255
 20015ac:	1005003a 	cmpeq	r2,r2,zero
 20015b0:	1000051e 	bne	r2,zero,20015c8 <i2c_write+0x74>
            SDA_HIGH(data_base);
 20015b4:	e0bffe17 	ldw	r2,-8(fp)
 20015b8:	1007883a 	mov	r3,r2
 20015bc:	00800044 	movi	r2,1
 20015c0:	18800035 	stwio	r2,0(r3)
 20015c4:	00000206 	br	20015d0 <i2c_write+0x7c>
        }else{    
            SDA_LOW(data_base);
 20015c8:	e0bffe17 	ldw	r2,-8(fp)
 20015cc:	10000035 	stwio	zero,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
 20015d0:	e0bffc03 	ldbu	r2,-16(fp)
 20015d4:	1004d07a 	srli	r2,r2,1
 20015d8:	e0bffc05 	stb	r2,-16(fp)
        // clock high
        SCL_HIGH(clk_base);
 20015dc:	e0bffd17 	ldw	r2,-12(fp)
 20015e0:	1007883a 	mov	r3,r2
 20015e4:	00800044 	movi	r2,1
 20015e8:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
 20015ec:	01000044 	movi	r4,1
 20015f0:	200da6c0 	call	200da6c <usleep>
        SCL_LOW(clk_base);
 20015f4:	e0bffd17 	ldw	r2,-12(fp)
 20015f8:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
 20015fc:	01000044 	movi	r4,1
 2001600:	200da6c0 	call	200da6c <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
 2001604:	e0bffa17 	ldw	r2,-24(fp)
 2001608:	10800044 	addi	r2,r2,1
 200160c:	e0bffa15 	stw	r2,-24(fp)
 2001610:	e0bffa17 	ldw	r2,-24(fp)
 2001614:	10800210 	cmplti	r2,r2,8
 2001618:	103fde1e 	bne	r2,zero,2001594 <i2c_write+0x40>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
 200161c:	e0bffe17 	ldw	r2,-8(fp)
 2001620:	10800104 	addi	r2,r2,4
 2001624:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
 2001628:	e0bffd17 	ldw	r2,-12(fp)
 200162c:	1007883a 	mov	r3,r2
 2001630:	00800044 	movi	r2,1
 2001634:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;  // clock high delay
 2001638:	01000044 	movi	r4,1
 200163c:	200da6c0 	call	200da6c <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
 2001640:	e0bffe17 	ldw	r2,-8(fp)
 2001644:	10800037 	ldwio	r2,0(r2)
 2001648:	1005003a 	cmpeq	r2,r2,zero
 200164c:	e0bffb15 	stw	r2,-20(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
 2001650:	e0bffd17 	ldw	r2,-12(fp)
 2001654:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
 2001658:	01000044 	movi	r4,1
 200165c:	200da6c0 	call	200da6c <usleep>
    return bAck;
 2001660:	e0bffb17 	ldw	r2,-20(fp)
}    
 2001664:	e037883a 	mov	sp,fp
 2001668:	dfc00117 	ldw	ra,4(sp)
 200166c:	df000017 	ldw	fp,0(sp)
 2001670:	dec00204 	addi	sp,sp,8
 2001674:	f800283a 	ret

02001678 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
 2001678:	defff804 	addi	sp,sp,-32
 200167c:	dfc00715 	stw	ra,28(sp)
 2001680:	df000615 	stw	fp,24(sp)
 2001684:	df000604 	addi	fp,sp,24
 2001688:	e13ffc15 	stw	r4,-16(fp)
 200168c:	e17ffd15 	stw	r5,-12(fp)
 2001690:	e1bffe15 	stw	r6,-8(fp)
 2001694:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
 2001698:	e03ffb05 	stb	zero,-20(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
 200169c:	e0bffd17 	ldw	r2,-12(fp)
 20016a0:	10800104 	addi	r2,r2,4
 20016a4:	10000035 	stwio	zero,0(r2)
    SCL_LOW(clk_base); // clock low
 20016a8:	e0bffc17 	ldw	r2,-16(fp)
 20016ac:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
 20016b0:	01000044 	movi	r4,1
 20016b4:	200da6c0 	call	200da6c <usleep>

    for(i=0;i<8;i++){
 20016b8:	e03ffa15 	stw	zero,-24(fp)
 20016bc:	00001706 	br	200171c <i2c_read+0xa4>
        Data <<= 1;
 20016c0:	e0bffb03 	ldbu	r2,-20(fp)
 20016c4:	1085883a 	add	r2,r2,r2
 20016c8:	e0bffb05 	stb	r2,-20(fp)
        SCL_HIGH(clk_base);  // clock high
 20016cc:	e0bffc17 	ldw	r2,-16(fp)
 20016d0:	1007883a 	mov	r3,r2
 20016d4:	00800044 	movi	r2,1
 20016d8:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
 20016dc:	01000044 	movi	r4,1
 20016e0:	200da6c0 	call	200da6c <usleep>
        if (SDA_READ(data_base))  // read data   
 20016e4:	e0bffd17 	ldw	r2,-12(fp)
 20016e8:	10800037 	ldwio	r2,0(r2)
 20016ec:	1005003a 	cmpeq	r2,r2,zero
 20016f0:	1000031e 	bne	r2,zero,2001700 <i2c_read+0x88>
            Data |= 0x01;
 20016f4:	e0bffb03 	ldbu	r2,-20(fp)
 20016f8:	10800054 	ori	r2,r2,1
 20016fc:	e0bffb05 	stb	r2,-20(fp)
        SCL_LOW(clk_base);  // clock log  
 2001700:	e0bffc17 	ldw	r2,-16(fp)
 2001704:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
 2001708:	01000044 	movi	r4,1
 200170c:	200da6c0 	call	200da6c <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
 2001710:	e0bffa17 	ldw	r2,-24(fp)
 2001714:	10800044 	addi	r2,r2,1
 2001718:	e0bffa15 	stw	r2,-24(fp)
 200171c:	e0bffa17 	ldw	r2,-24(fp)
 2001720:	10800210 	cmplti	r2,r2,8
 2001724:	103fe61e 	bne	r2,zero,20016c0 <i2c_read+0x48>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
 2001728:	e0bffc17 	ldw	r2,-16(fp)
 200172c:	10000035 	stwio	zero,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
 2001730:	e0bffd17 	ldw	r2,-12(fp)
 2001734:	10800104 	addi	r2,r2,4
 2001738:	1007883a 	mov	r3,r2
 200173c:	00800044 	movi	r2,1
 2001740:	18800035 	stwio	r2,0(r3)
    if (bAck)
 2001744:	e0bfff17 	ldw	r2,-4(fp)
 2001748:	1005003a 	cmpeq	r2,r2,zero
 200174c:	1000031e 	bne	r2,zero,200175c <i2c_read+0xe4>
        SDA_LOW(data_base);
 2001750:	e0bffd17 	ldw	r2,-12(fp)
 2001754:	10000035 	stwio	zero,0(r2)
 2001758:	00000406 	br	200176c <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
 200175c:	e0bffd17 	ldw	r2,-12(fp)
 2001760:	1007883a 	mov	r3,r2
 2001764:	00800044 	movi	r2,1
 2001768:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base); // clock high
 200176c:	e0bffc17 	ldw	r2,-16(fp)
 2001770:	1007883a 	mov	r3,r2
 2001774:	00800044 	movi	r2,1
 2001778:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high  delay
 200177c:	01000044 	movi	r4,1
 2001780:	200da6c0 	call	200da6c <usleep>
    SCL_LOW(clk_base); // clock low
 2001784:	e0bffc17 	ldw	r2,-16(fp)
 2001788:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
 200178c:	01000044 	movi	r4,1
 2001790:	200da6c0 	call	200da6c <usleep>
    SDA_LOW(data_base);  // data low
 2001794:	e0bffd17 	ldw	r2,-12(fp)
 2001798:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // data low delay
 200179c:	01000044 	movi	r4,1
 20017a0:	200da6c0 	call	200da6c <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
 20017a4:	e0fffe17 	ldw	r3,-8(fp)
 20017a8:	e0bffb03 	ldbu	r2,-20(fp)
 20017ac:	18800005 	stb	r2,0(r3)
}
 20017b0:	e037883a 	mov	sp,fp
 20017b4:	dfc00117 	ldw	ra,4(sp)
 20017b8:	df000017 	ldw	fp,0(sp)
 20017bc:	dec00204 	addi	sp,sp,8
 20017c0:	f800283a 	ret

020017c4 <i2c_data_verify>:

//==========================================================
// function for verify

bool i2c_data_verify(alt_u32 scl_base, alt_u32 sda_base, alt_u8 ControlAddr){
 20017c4:	defff704 	addi	sp,sp,-36
 20017c8:	dfc00815 	stw	ra,32(sp)
 20017cc:	df000715 	stw	fp,28(sp)
 20017d0:	df000704 	addi	fp,sp,28
 20017d4:	e13ffd15 	stw	r4,-12(fp)
 20017d8:	e17ffe15 	stw	r5,-8(fp)
 20017dc:	e1bfff05 	stb	r6,-4(fp)
    bool bPass;
    const alt_8 DeviceAddr = 0xA0;
 20017e0:	00bfe804 	movi	r2,-96
 20017e4:	e0bffa45 	stb	r2,-23(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 20017e8:	00808074 	movhi	r2,513
 20017ec:	10889f04 	addi	r2,r2,8828
 20017f0:	10800017 	ldw	r2,0(r2)
    alt_u8 OrgData, TestData, Data;
    
    TestData = alt_nticks();
 20017f4:	e0bffa05 	stb	r2,-24(fp)
    if (TestData == 0)
 20017f8:	e0bffa03 	ldbu	r2,-24(fp)
 20017fc:	1004c03a 	cmpne	r2,r2,zero
 2001800:	1000021e 	bne	r2,zero,200180c <i2c_data_verify+0x48>
        TestData = 0x12;
 2001804:	00800484 	movi	r2,18
 2001808:	e0bffa05 	stb	r2,-24(fp)
    
    bPass = I2C_Read(scl_base, sda_base, DeviceAddr, ControlAddr, &OrgData);
 200180c:	e1bffa47 	ldb	r6,-23(fp)
 2001810:	e1ffff03 	ldbu	r7,-4(fp)
 2001814:	e0bffc04 	addi	r2,fp,-16
 2001818:	d8800015 	stw	r2,0(sp)
 200181c:	e13ffd17 	ldw	r4,-12(fp)
 2001820:	e17ffe17 	ldw	r5,-8(fp)
 2001824:	20010e40 	call	20010e4 <I2C_Read>
 2001828:	e0bffb15 	stw	r2,-20(fp)
    if (bPass) // write
 200182c:	e0bffb17 	ldw	r2,-20(fp)
 2001830:	1005003a 	cmpeq	r2,r2,zero
 2001834:	1000081e 	bne	r2,zero,2001858 <i2c_data_verify+0x94>
        bPass = I2C_Write(scl_base, sda_base, DeviceAddr, ControlAddr, TestData);
 2001838:	e1bffa47 	ldb	r6,-23(fp)
 200183c:	e1ffff03 	ldbu	r7,-4(fp)
 2001840:	e0bffa03 	ldbu	r2,-24(fp)
 2001844:	d8800015 	stw	r2,0(sp)
 2001848:	e13ffd17 	ldw	r4,-12(fp)
 200184c:	e17ffe17 	ldw	r5,-8(fp)
 2001850:	200100c0 	call	200100c <I2C_Write>
 2001854:	e0bffb15 	stw	r2,-20(fp)
    if (bPass) // read        
 2001858:	e0bffb17 	ldw	r2,-20(fp)
 200185c:	1005003a 	cmpeq	r2,r2,zero
 2001860:	1000081e 	bne	r2,zero,2001884 <i2c_data_verify+0xc0>
        bPass = I2C_Read(scl_base, sda_base, DeviceAddr, ControlAddr, &Data);
 2001864:	e1bffa47 	ldb	r6,-23(fp)
 2001868:	e1ffff03 	ldbu	r7,-4(fp)
 200186c:	e0bffc44 	addi	r2,fp,-15
 2001870:	d8800015 	stw	r2,0(sp)
 2001874:	e13ffd17 	ldw	r4,-12(fp)
 2001878:	e17ffe17 	ldw	r5,-8(fp)
 200187c:	20010e40 	call	20010e4 <I2C_Read>
 2001880:	e0bffb15 	stw	r2,-20(fp)
    if (bPass && (Data != TestData)) // verify
 2001884:	e0bffb17 	ldw	r2,-20(fp)
 2001888:	1005003a 	cmpeq	r2,r2,zero
 200188c:	1000051e 	bne	r2,zero,20018a4 <i2c_data_verify+0xe0>
 2001890:	e0bffc43 	ldbu	r2,-15(fp)
 2001894:	10c03fcc 	andi	r3,r2,255
 2001898:	e0bffa03 	ldbu	r2,-24(fp)
 200189c:	18800126 	beq	r3,r2,20018a4 <i2c_data_verify+0xe0>
        bPass = FALSE;        
 20018a0:	e03ffb15 	stw	zero,-20(fp)
    // restore        
    if (bPass) // write back
 20018a4:	e0bffb17 	ldw	r2,-20(fp)
 20018a8:	1005003a 	cmpeq	r2,r2,zero
 20018ac:	1000091e 	bne	r2,zero,20018d4 <i2c_data_verify+0x110>
        bPass = I2C_Write(scl_base, sda_base, DeviceAddr, ControlAddr, OrgData);
 20018b0:	e1bffa47 	ldb	r6,-23(fp)
 20018b4:	e1ffff03 	ldbu	r7,-4(fp)
 20018b8:	e0bffc03 	ldbu	r2,-16(fp)
 20018bc:	10803fcc 	andi	r2,r2,255
 20018c0:	d8800015 	stw	r2,0(sp)
 20018c4:	e13ffd17 	ldw	r4,-12(fp)
 20018c8:	e17ffe17 	ldw	r5,-8(fp)
 20018cc:	200100c0 	call	200100c <I2C_Write>
 20018d0:	e0bffb15 	stw	r2,-20(fp)
    if (bPass) // read        
 20018d4:	e0bffb17 	ldw	r2,-20(fp)
 20018d8:	1005003a 	cmpeq	r2,r2,zero
 20018dc:	1000081e 	bne	r2,zero,2001900 <i2c_data_verify+0x13c>
        bPass = I2C_Read(scl_base, sda_base, DeviceAddr, ControlAddr, &Data);
 20018e0:	e1bffa47 	ldb	r6,-23(fp)
 20018e4:	e1ffff03 	ldbu	r7,-4(fp)
 20018e8:	e0bffc44 	addi	r2,fp,-15
 20018ec:	d8800015 	stw	r2,0(sp)
 20018f0:	e13ffd17 	ldw	r4,-12(fp)
 20018f4:	e17ffe17 	ldw	r5,-8(fp)
 20018f8:	20010e40 	call	20010e4 <I2C_Read>
 20018fc:	e0bffb15 	stw	r2,-20(fp)
    if (bPass && (Data != OrgData)) // verify
 2001900:	e0bffb17 	ldw	r2,-20(fp)
 2001904:	1005003a 	cmpeq	r2,r2,zero
 2001908:	1000061e 	bne	r2,zero,2001924 <i2c_data_verify+0x160>
 200190c:	e0bffc43 	ldbu	r2,-15(fp)
 2001910:	e0fffc03 	ldbu	r3,-16(fp)
 2001914:	11003fcc 	andi	r4,r2,255
 2001918:	18803fcc 	andi	r2,r3,255
 200191c:	20800126 	beq	r4,r2,2001924 <i2c_data_verify+0x160>
        bPass = FALSE; 
 2001920:	e03ffb15 	stw	zero,-20(fp)
        
    return bPass;
 2001924:	e0bffb17 	ldw	r2,-20(fp)
}
 2001928:	e037883a 	mov	sp,fp
 200192c:	dfc00117 	ldw	ra,4(sp)
 2001930:	df000017 	ldw	fp,0(sp)
 2001934:	dec00204 	addi	sp,sp,8
 2001938:	f800283a 	ret

0200193c <I2C_Verify>:




bool I2C_Verify(alt_u32 scl_base, alt_u32 sda_base, alt_u32 size){
 200193c:	defffa04 	addi	sp,sp,-24
 2001940:	dfc00515 	stw	ra,20(sp)
 2001944:	df000415 	stw	fp,16(sp)
 2001948:	df000404 	addi	fp,sp,16
 200194c:	e13ffd15 	stw	r4,-12(fp)
 2001950:	e17ffe15 	stw	r5,-8(fp)
 2001954:	e1bfff15 	stw	r6,-4(fp)
    bool bPass;
    if (size <= 256){
 2001958:	e0bfff17 	ldw	r2,-4(fp)
 200195c:	10804068 	cmpgeui	r2,r2,257
 2001960:	1000101e 	bne	r2,zero,20019a4 <I2C_Verify+0x68>
        // less or equal to 256 Bytes
        bPass = i2c_data_verify(scl_base, sda_base, 0);
 2001964:	e13ffd17 	ldw	r4,-12(fp)
 2001968:	e17ffe17 	ldw	r5,-8(fp)
 200196c:	000d883a 	mov	r6,zero
 2001970:	20017c40 	call	20017c4 <i2c_data_verify>
 2001974:	e0bffc15 	stw	r2,-16(fp)
        if (bPass)
 2001978:	e0bffc17 	ldw	r2,-16(fp)
 200197c:	1005003a 	cmpeq	r2,r2,zero
 2001980:	1000091e 	bne	r2,zero,20019a8 <I2C_Verify+0x6c>
            bPass = i2c_data_verify(scl_base, sda_base, size-1);
 2001984:	e0bfff17 	ldw	r2,-4(fp)
 2001988:	10bfffc4 	addi	r2,r2,-1
 200198c:	11803fcc 	andi	r6,r2,255
 2001990:	e13ffd17 	ldw	r4,-12(fp)
 2001994:	e17ffe17 	ldw	r5,-8(fp)
 2001998:	20017c40 	call	20017c4 <i2c_data_verify>
 200199c:	e0bffc15 	stw	r2,-16(fp)
 20019a0:	00000106 	br	20019a8 <I2C_Verify+0x6c>
    }else{
        bPass = FALSE;
 20019a4:	e03ffc15 	stw	zero,-16(fp)
        bPass = i2cl_data_verify(scl_base, sda_base, 0);
        if (bPass)
            bPass = i2cl_data_verify(scl_base, sda_base, size-1);
            */
    }
    return bPass;
 20019a8:	e0bffc17 	ldw	r2,-16(fp)
}
 20019ac:	e037883a 	mov	sp,fp
 20019b0:	dfc00117 	ldw	ra,4(sp)
 20019b4:	df000017 	ldw	fp,0(sp)
 20019b8:	dec00204 	addi	sp,sp,8
 20019bc:	f800283a 	ret

020019c0 <ADXL345_SPI_Init>:

#define DATA_READY_TIMEOUT  (alt_ticks_per_second()/3)



bool ADXL345_SPI_Init(alt_u32 device_base){
 20019c0:	defffc04 	addi	sp,sp,-16
 20019c4:	dfc00315 	stw	ra,12(sp)
 20019c8:	df000215 	stw	fp,8(sp)
 20019cc:	df000204 	addi	fp,sp,8
 20019d0:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    
    // clear fifo
    SPI_Init(device_base);
 20019d4:	e13fff17 	ldw	r4,-4(fp)
 20019d8:	2002bf80 	call	2002bf8 <SPI_Init>
   
    // 3-wire spi
    bSuccess = SPI_Write(device_base, ADXL345_REG_DATA_FORMAT, XL345_SPI3WIRE);
 20019dc:	e13fff17 	ldw	r4,-4(fp)
 20019e0:	01400c44 	movi	r5,49
 20019e4:	01801004 	movi	r6,64
 20019e8:	2002d7c0 	call	2002d7c <SPI_Write>
 20019ec:	e0bffe15 	stw	r2,-8(fp)
 
    // clear fifo   
    SPI_Init(device_base);
 20019f0:	e13fff17 	ldw	r4,-4(fp)
 20019f4:	2002bf80 	call	2002bf8 <SPI_Init>
        
    //Output Data Rate: 40Hz
    if (bSuccess){
 20019f8:	e0bffe17 	ldw	r2,-8(fp)
 20019fc:	1005003a 	cmpeq	r2,r2,zero
 2001a00:	1000051e 	bne	r2,zero,2001a18 <ADXL345_SPI_Init+0x58>
        bSuccess = SPI_Write(device_base, ADXL345_REG_BW_RATE, XL345_RATE_400); // 400 MHZ
 2001a04:	e13fff17 	ldw	r4,-4(fp)
 2001a08:	01400b04 	movi	r5,44
 2001a0c:	01800304 	movi	r6,12
 2001a10:	2002d7c0 	call	2002d7c <SPI_Write>
 2001a14:	e0bffe15 	stw	r2,-8(fp)
    }
    
            
        
    //INT_Enable: Data Ready
    if (bSuccess){   
 2001a18:	e0bffe17 	ldw	r2,-8(fp)
 2001a1c:	1005003a 	cmpeq	r2,r2,zero
 2001a20:	1000051e 	bne	r2,zero,2001a38 <ADXL345_SPI_Init+0x78>
        bSuccess = SPI_Write(device_base, ADXL345_REG_INT_ENALBE, XL345_DATAREADY);
 2001a24:	e13fff17 	ldw	r4,-4(fp)
 2001a28:	01400b84 	movi	r5,46
 2001a2c:	01802004 	movi	r6,128
 2001a30:	2002d7c0 	call	2002d7c <SPI_Write>
 2001a34:	e0bffe15 	stw	r2,-8(fp)
    }
    
    // stop measure
    if (bSuccess){
 2001a38:	e0bffe17 	ldw	r2,-8(fp)
 2001a3c:	1005003a 	cmpeq	r2,r2,zero
 2001a40:	1000051e 	bne	r2,zero,2001a58 <ADXL345_SPI_Init+0x98>
        bSuccess = SPI_Write(device_base, ADXL345_REG_POWER_CTL, XL345_STANDBY);
 2001a44:	e13fff17 	ldw	r4,-4(fp)
 2001a48:	01400b44 	movi	r5,45
 2001a4c:	000d883a 	mov	r6,zero
 2001a50:	2002d7c0 	call	2002d7c <SPI_Write>
 2001a54:	e0bffe15 	stw	r2,-8(fp)
    }

    // start measure
    if (bSuccess){
 2001a58:	e0bffe17 	ldw	r2,-8(fp)
 2001a5c:	1005003a 	cmpeq	r2,r2,zero
 2001a60:	1000051e 	bne	r2,zero,2001a78 <ADXL345_SPI_Init+0xb8>
        bSuccess = SPI_Write(device_base, ADXL345_REG_POWER_CTL, XL345_MEASURE);
 2001a64:	e13fff17 	ldw	r4,-4(fp)
 2001a68:	01400b44 	movi	r5,45
 2001a6c:	01800204 	movi	r6,8
 2001a70:	2002d7c0 	call	2002d7c <SPI_Write>
 2001a74:	e0bffe15 	stw	r2,-8(fp)
        
    }
    
            
    return bSuccess;    
 2001a78:	e0bffe17 	ldw	r2,-8(fp)
        
}
 2001a7c:	e037883a 	mov	sp,fp
 2001a80:	dfc00117 	ldw	ra,4(sp)
 2001a84:	df000017 	ldw	fp,0(sp)
 2001a88:	dec00204 	addi	sp,sp,8
 2001a8c:	f800283a 	ret

02001a90 <ADXL345_SPI_WaitDataReady>:


    
bool ADXL345_SPI_WaitDataReady(alt_u32 device_base){
 2001a90:	defffa04 	addi	sp,sp,-24
 2001a94:	dfc00515 	stw	ra,20(sp)
 2001a98:	df000415 	stw	fp,16(sp)
 2001a9c:	dc000315 	stw	r16,12(sp)
 2001aa0:	df000304 	addi	fp,sp,12
 2001aa4:	e13fff15 	stw	r4,-4(fp)
 2001aa8:	00808074 	movhi	r2,513
 2001aac:	10889f04 	addi	r2,r2,8828
 2001ab0:	10800017 	ldw	r2,0(r2)
    bool bDataReady;
    alt_u32 TimeStart;
    
    TimeStart = alt_nticks();
 2001ab4:	e0bffd15 	stw	r2,-12(fp)
    do{
        bDataReady = ADXL345_SPI_IsDataReady(device_base);
 2001ab8:	e13fff17 	ldw	r4,-4(fp)
 2001abc:	2001b340 	call	2001b34 <ADXL345_SPI_IsDataReady>
 2001ac0:	e0bffe15 	stw	r2,-8(fp)
        if (!bDataReady)
 2001ac4:	e0bffe17 	ldw	r2,-8(fp)
 2001ac8:	1004c03a 	cmpne	r2,r2,zero
 2001acc:	1000021e 	bne	r2,zero,2001ad8 <ADXL345_SPI_WaitDataReady+0x48>
            usleep(500); 
 2001ad0:	01007d04 	movi	r4,500
 2001ad4:	200da6c0 	call	200da6c <usleep>
    }while (!bDataReady && ( (alt_nticks() - TimeStart) < DATA_READY_TIMEOUT) );
 2001ad8:	e0bffe17 	ldw	r2,-8(fp)
 2001adc:	1004c03a 	cmpne	r2,r2,zero
 2001ae0:	10000d1e 	bne	r2,zero,2001b18 <ADXL345_SPI_WaitDataReady+0x88>
 2001ae4:	00808074 	movhi	r2,513
 2001ae8:	10889f04 	addi	r2,r2,8828
 2001aec:	10800017 	ldw	r2,0(r2)
 2001af0:	1007883a 	mov	r3,r2
 2001af4:	e0bffd17 	ldw	r2,-12(fp)
 2001af8:	18a1c83a 	sub	r16,r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2001afc:	00808074 	movhi	r2,513
 2001b00:	10889e04 	addi	r2,r2,8824
 2001b04:	10800017 	ldw	r2,0(r2)
 2001b08:	1009883a 	mov	r4,r2
 2001b0c:	014000c4 	movi	r5,3
 2001b10:	2003b280 	call	2003b28 <__udivsi3>
 2001b14:	80bfe836 	bltu	r16,r2,2001ab8 <ADXL345_SPI_WaitDataReady+0x28>
    
    return bDataReady;
 2001b18:	e0bffe17 	ldw	r2,-8(fp)
        
}    
 2001b1c:	e037883a 	mov	sp,fp
 2001b20:	dfc00217 	ldw	ra,8(sp)
 2001b24:	df000117 	ldw	fp,4(sp)
 2001b28:	dc000017 	ldw	r16,0(sp)
 2001b2c:	dec00304 	addi	sp,sp,12
 2001b30:	f800283a 	ret

02001b34 <ADXL345_SPI_IsDataReady>:

bool ADXL345_SPI_IsDataReady(alt_u32 device_base){
 2001b34:	defffb04 	addi	sp,sp,-20
 2001b38:	dfc00415 	stw	ra,16(sp)
 2001b3c:	df000315 	stw	fp,12(sp)
 2001b40:	df000304 	addi	fp,sp,12
 2001b44:	e13fff15 	stw	r4,-4(fp)
    bool bReady = FALSE;
 2001b48:	e03ffd15 	stw	zero,-12(fp)
    alt_u8 data8;
    
    if (SPI_Read(device_base, ADXL345_REG_INT_SOURCE,&data8)){
 2001b4c:	e1bffe04 	addi	r6,fp,-8
 2001b50:	e13fff17 	ldw	r4,-4(fp)
 2001b54:	01400c04 	movi	r5,48
 2001b58:	2002f180 	call	2002f18 <SPI_Read>
 2001b5c:	1005003a 	cmpeq	r2,r2,zero
 2001b60:	1000081e 	bne	r2,zero,2001b84 <ADXL345_SPI_IsDataReady+0x50>
        if (data8 & XL345_DATAREADY)
 2001b64:	e0bffe03 	ldbu	r2,-8(fp)
 2001b68:	10803fcc 	andi	r2,r2,255
 2001b6c:	1080201c 	xori	r2,r2,128
 2001b70:	10bfe004 	addi	r2,r2,-128
 2001b74:	1004403a 	cmpge	r2,r2,zero
 2001b78:	1000021e 	bne	r2,zero,2001b84 <ADXL345_SPI_IsDataReady+0x50>
            bReady = TRUE;
 2001b7c:	00800044 	movi	r2,1
 2001b80:	e0bffd15 	stw	r2,-12(fp)
    }            
    
    return bReady;
 2001b84:	e0bffd17 	ldw	r2,-12(fp)
}
 2001b88:	e037883a 	mov	sp,fp
 2001b8c:	dfc00117 	ldw	ra,4(sp)
 2001b90:	df000017 	ldw	fp,0(sp)
 2001b94:	dec00204 	addi	sp,sp,8
 2001b98:	f800283a 	ret

02001b9c <ADXL345_SPI_XYZ_Read>:



bool ADXL345_SPI_XYZ_Read(alt_u32 device_base, alt_u16 szData16[3]){
 2001b9c:	defff904 	addi	sp,sp,-28
 2001ba0:	dfc00615 	stw	ra,24(sp)
 2001ba4:	df000515 	stw	fp,20(sp)
 2001ba8:	df000504 	addi	fp,sp,20
 2001bac:	e13ffe15 	stw	r4,-8(fp)
 2001bb0:	e17fff15 	stw	r5,-4(fp)
    bool bPass;
    alt_u8 szData8[6];
    bPass = SPI_MultipleRead(device_base, 0x32, (alt_u8 *)&szData8, sizeof(szData8));
 2001bb4:	e1bffc04 	addi	r6,fp,-16
 2001bb8:	e13ffe17 	ldw	r4,-8(fp)
 2001bbc:	01400c84 	movi	r5,50
 2001bc0:	01c00184 	movi	r7,6
 2001bc4:	2002dc00 	call	2002dc0 <SPI_MultipleRead>
 2001bc8:	e0bffb15 	stw	r2,-20(fp)
    if (bPass){
 2001bcc:	e0bffb17 	ldw	r2,-20(fp)
 2001bd0:	1005003a 	cmpeq	r2,r2,zero
 2001bd4:	10001e1e 	bne	r2,zero,2001c50 <ADXL345_SPI_XYZ_Read+0xb4>
        szData16[0] = (szData8[1] << 8) | szData8[0]; 
 2001bd8:	e0bffc43 	ldbu	r2,-15(fp)
 2001bdc:	10803fcc 	andi	r2,r2,255
 2001be0:	1004923a 	slli	r2,r2,8
 2001be4:	1007883a 	mov	r3,r2
 2001be8:	e0bffc03 	ldbu	r2,-16(fp)
 2001bec:	10803fcc 	andi	r2,r2,255
 2001bf0:	1884b03a 	or	r2,r3,r2
 2001bf4:	1007883a 	mov	r3,r2
 2001bf8:	e0bfff17 	ldw	r2,-4(fp)
 2001bfc:	10c0000d 	sth	r3,0(r2)
        szData16[1] = (szData8[3] << 8) | szData8[2];
 2001c00:	e0bfff17 	ldw	r2,-4(fp)
 2001c04:	11000084 	addi	r4,r2,2
 2001c08:	e0bffcc3 	ldbu	r2,-13(fp)
 2001c0c:	10803fcc 	andi	r2,r2,255
 2001c10:	1004923a 	slli	r2,r2,8
 2001c14:	1007883a 	mov	r3,r2
 2001c18:	e0bffc83 	ldbu	r2,-14(fp)
 2001c1c:	10803fcc 	andi	r2,r2,255
 2001c20:	1884b03a 	or	r2,r3,r2
 2001c24:	2080000d 	sth	r2,0(r4)
        szData16[2] = (szData8[5] << 8) | szData8[4];
 2001c28:	e0bfff17 	ldw	r2,-4(fp)
 2001c2c:	11000104 	addi	r4,r2,4
 2001c30:	e0bffd43 	ldbu	r2,-11(fp)
 2001c34:	10803fcc 	andi	r2,r2,255
 2001c38:	1004923a 	slli	r2,r2,8
 2001c3c:	1007883a 	mov	r3,r2
 2001c40:	e0bffd03 	ldbu	r2,-12(fp)
 2001c44:	10803fcc 	andi	r2,r2,255
 2001c48:	1884b03a 	or	r2,r3,r2
 2001c4c:	2080000d 	sth	r2,0(r4)
    }        
    
    return bPass;
 2001c50:	e0bffb17 	ldw	r2,-20(fp)
}
 2001c54:	e037883a 	mov	sp,fp
 2001c58:	dfc00117 	ldw	ra,4(sp)
 2001c5c:	df000017 	ldw	fp,0(sp)
 2001c60:	dec00204 	addi	sp,sp,8
 2001c64:	f800283a 	ret

02001c68 <ADXL345_SPI_IdRead>:

bool ADXL345_SPI_IdRead(alt_u32 device_base, alt_u8 *pId){
 2001c68:	defffb04 	addi	sp,sp,-20
 2001c6c:	dfc00415 	stw	ra,16(sp)
 2001c70:	df000315 	stw	fp,12(sp)
 2001c74:	df000304 	addi	fp,sp,12
 2001c78:	e13ffe15 	stw	r4,-8(fp)
 2001c7c:	e17fff15 	stw	r5,-4(fp)
    bool bPass;
    bPass = SPI_Read(device_base, ADXL345_REG_DEVID, pId);
 2001c80:	e13ffe17 	ldw	r4,-8(fp)
 2001c84:	000b883a 	mov	r5,zero
 2001c88:	e1bfff17 	ldw	r6,-4(fp)
 2001c8c:	2002f180 	call	2002f18 <SPI_Read>
 2001c90:	e0bffd15 	stw	r2,-12(fp)
    
    return bPass;
 2001c94:	e0bffd17 	ldw	r2,-12(fp)
}
 2001c98:	e037883a 	mov	sp,fp
 2001c9c:	dfc00117 	ldw	ra,4(sp)
 2001ca0:	df000017 	ldw	fp,0(sp)
 2001ca4:	dec00204 	addi	sp,sp,8
 2001ca8:	f800283a 	ret

02001cac <ADC_Read>:
#include "adc_spi_read.h"

#define START_FLAG  0x8000
#define DONE_FLAG   0x8000

alt_u16 ADC_Read(alt_u8 NextChannel){
 2001cac:	defff904 	addi	sp,sp,-28
 2001cb0:	dfc00615 	stw	ra,24(sp)
 2001cb4:	df000515 	stw	fp,20(sp)
 2001cb8:	df000504 	addi	fp,sp,20
 2001cbc:	e13fff05 	stb	r4,-4(fp)
    alt_u16 Data16, DigitalValue = 0;
 2001cc0:	e03ffe0d 	sth	zero,-8(fp)
    bool bDone = FALSE;
 2001cc4:	e03ffd15 	stw	zero,-12(fp)
    const int nMaxWait = 1000;
 2001cc8:	0080fa04 	movi	r2,1000
 2001ccc:	e0bffc15 	stw	r2,-16(fp)
    int nWaitCnt = 0;
 2001cd0:	e03ffb15 	stw	zero,-20(fp)
    
    // start
    Data16 = NextChannel;
 2001cd4:	e0bfff03 	ldbu	r2,-4(fp)
 2001cd8:	e0bffe8d 	sth	r2,-6(fp)
    IOWR(ADC_SPI_READ_BASE, 0, Data16);
 2001cdc:	e0fffe8b 	ldhu	r3,-6(fp)
 2001ce0:	00818034 	movhi	r2,1536
 2001ce4:	10845e04 	addi	r2,r2,4472
 2001ce8:	10c00035 	stwio	r3,0(r2)
    Data16 |= START_FLAG;
 2001cec:	e0fffe8b 	ldhu	r3,-6(fp)
 2001cf0:	00a00004 	movi	r2,-32768
 2001cf4:	1884b03a 	or	r2,r3,r2
 2001cf8:	e0bffe8d 	sth	r2,-6(fp)
    IOWR(ADC_SPI_READ_BASE, 0, Data16);
 2001cfc:	e0fffe8b 	ldhu	r3,-6(fp)
 2001d00:	00818034 	movhi	r2,1536
 2001d04:	10845e04 	addi	r2,r2,4472
 2001d08:	10c00035 	stwio	r3,0(r2)
    usleep(10000); // wait 10ms
 2001d0c:	0109c404 	movi	r4,10000
 2001d10:	200da6c0 	call	200da6c <usleep>
    
    // wait done
    while(!bDone && nWaitCnt++ <= nMaxWait){
 2001d14:	00000a06 	br	2001d40 <ADC_Read+0x94>
        Data16 = IORD(ADC_SPI_READ_BASE,0);
 2001d18:	00818034 	movhi	r2,1536
 2001d1c:	10845e04 	addi	r2,r2,4472
 2001d20:	10800037 	ldwio	r2,0(r2)
 2001d24:	e0bffe8d 	sth	r2,-6(fp)
        bDone = (Data16 & DONE_FLAG)?TRUE:FALSE;
 2001d28:	e0bffe8b 	ldhu	r2,-6(fp)
 2001d2c:	10bfffcc 	andi	r2,r2,65535
 2001d30:	10a0001c 	xori	r2,r2,32768
 2001d34:	10a00004 	addi	r2,r2,-32768
 2001d38:	1004d7fa 	srli	r2,r2,31
 2001d3c:	e0bffd15 	stw	r2,-12(fp)
    Data16 |= START_FLAG;
    IOWR(ADC_SPI_READ_BASE, 0, Data16);
    usleep(10000); // wait 10ms
    
    // wait done
    while(!bDone && nWaitCnt++ <= nMaxWait){
 2001d40:	e0bffd17 	ldw	r2,-12(fp)
 2001d44:	1004c03a 	cmpne	r2,r2,zero
 2001d48:	10000a1e 	bne	r2,zero,2001d74 <ADC_Read+0xc8>
 2001d4c:	e0fffb17 	ldw	r3,-20(fp)
 2001d50:	e0bffc17 	ldw	r2,-16(fp)
 2001d54:	10c4403a 	cmpge	r2,r2,r3
 2001d58:	1007883a 	mov	r3,r2
 2001d5c:	e0bffb17 	ldw	r2,-20(fp)
 2001d60:	10800044 	addi	r2,r2,1
 2001d64:	e0bffb15 	stw	r2,-20(fp)
 2001d68:	18803fcc 	andi	r2,r3,255
 2001d6c:	1004c03a 	cmpne	r2,r2,zero
 2001d70:	103fe91e 	bne	r2,zero,2001d18 <ADC_Read+0x6c>
        Data16 = IORD(ADC_SPI_READ_BASE,0);
        bDone = (Data16 & DONE_FLAG)?TRUE:FALSE;
    }
    
    if (bDone)
 2001d74:	e0bffd17 	ldw	r2,-12(fp)
 2001d78:	1005003a 	cmpeq	r2,r2,zero
 2001d7c:	1000031e 	bne	r2,zero,2001d8c <ADC_Read+0xe0>
        DigitalValue = Data16 & 0xFFF; // 12 bits
 2001d80:	e0bffe8b 	ldhu	r2,-6(fp)
 2001d84:	1083ffcc 	andi	r2,r2,4095
 2001d88:	e0bffe0d 	sth	r2,-8(fp)
    
    // stop
    IOWR(ADC_SPI_READ_BASE, 0, 0);
 2001d8c:	00818034 	movhi	r2,1536
 2001d90:	10845e04 	addi	r2,r2,4472
 2001d94:	10000035 	stwio	zero,0(r2)
    
    return DigitalValue;
 2001d98:	e0bffe0b 	ldhu	r2,-8(fp)
}
 2001d9c:	e037883a 	mov	sp,fp
 2001da0:	dfc00117 	ldw	ra,4(sp)
 2001da4:	df000017 	ldw	fp,0(sp)
 2001da8:	dec00204 	addi	sp,sp,8
 2001dac:	f800283a 	ret

02001db0 <Flash_InfoDump>:
    int number_of_regions_flash;
}FLASH_INFO;



bool Flash_InfoDump(char *pFlashName){
 2001db0:	defff304 	addi	sp,sp,-52
 2001db4:	dfc00c15 	stw	ra,48(sp)
 2001db8:	df000b15 	stw	fp,44(sp)
 2001dbc:	df000b04 	addi	fp,sp,44
 2001dc0:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
 2001dc4:	e03ffc15 	stw	zero,-16(fp)
    alt_flash_fd* fd;
    int number_of_regions;
    int ret_code;
    /* Set write_data to all 0xa */
    FLASH_DEBUG(("Flash_InfoDump\r\n"));
    fd = alt_flash_open_dev(pFlashName);
 2001dc8:	e13fff17 	ldw	r4,-4(fp)
 2001dcc:	200cff80 	call	200cff8 <alt_flash_open_dev>
 2001dd0:	e0bffa15 	stw	r2,-24(fp)
    if (fd){
 2001dd4:	e0bffa17 	ldw	r2,-24(fp)
 2001dd8:	1005003a 	cmpeq	r2,r2,zero
 2001ddc:	1000211e 	bne	r2,zero,2001e64 <Flash_InfoDump+0xb4>
 2001de0:	e0bffa17 	ldw	r2,-24(fp)
 2001de4:	e0bff515 	stw	r2,-44(fp)
 2001de8:	e0bffd04 	addi	r2,fp,-12
 2001dec:	e0bff615 	stw	r2,-40(fp)
 2001df0:	e0bffe04 	addi	r2,fp,-8
 2001df4:	e0bff715 	stw	r2,-36(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
 2001df8:	e0bff517 	ldw	r2,-44(fp)
 2001dfc:	10800717 	ldw	r2,28(r2)
 2001e00:	e13ff517 	ldw	r4,-44(fp)
 2001e04:	e17ff617 	ldw	r5,-40(fp)
 2001e08:	e1bff717 	ldw	r6,-36(fp)
 2001e0c:	103ee83a 	callr	r2
        ret_code = alt_get_flash_info(fd,&regions,&number_of_regions);
 2001e10:	e0bff915 	stw	r2,-28(fp)
        if (ret_code == 0){
 2001e14:	e0bff917 	ldw	r2,-28(fp)
 2001e18:	1004c03a 	cmpne	r2,r2,zero
 2001e1c:	10000f1e 	bne	r2,zero,2001e5c <Flash_InfoDump+0xac>
            int i;
            bSuccess = TRUE;
 2001e20:	00800044 	movi	r2,1
 2001e24:	e0bffc15 	stw	r2,-16(fp)
            nextreg = regions;
 2001e28:	e0bffd17 	ldw	r2,-12(fp)
 2001e2c:	e0bffb15 	stw	r2,-20(fp)
            FLASH_DEBUG(("number_of_regsion:%d\r\n", number_of_regions));
            for(i=0;i<number_of_regions;i++){
 2001e30:	e03ff815 	stw	zero,-32(fp)
 2001e34:	00000606 	br	2001e50 <Flash_InfoDump+0xa0>
                FLASH_DEBUG(("regsion[%d]\r\n", i));
                FLASH_DEBUG(("  offset:%d\r\n", nextreg->offset));
                FLASH_DEBUG(("  region_size:%d\r\n", nextreg->region_size));
                FLASH_DEBUG(("  number_of_blocks:%d\r\n", nextreg->number_of_blocks));
                FLASH_DEBUG(("  block_size;:%d\r\n", nextreg->block_size));
                nextreg++;
 2001e38:	e0bffb17 	ldw	r2,-20(fp)
 2001e3c:	10800404 	addi	r2,r2,16
 2001e40:	e0bffb15 	stw	r2,-20(fp)
        if (ret_code == 0){
            int i;
            bSuccess = TRUE;
            nextreg = regions;
            FLASH_DEBUG(("number_of_regsion:%d\r\n", number_of_regions));
            for(i=0;i<number_of_regions;i++){
 2001e44:	e0bff817 	ldw	r2,-32(fp)
 2001e48:	10800044 	addi	r2,r2,1
 2001e4c:	e0bff815 	stw	r2,-32(fp)
 2001e50:	e0fffe17 	ldw	r3,-8(fp)
 2001e54:	e0bff817 	ldw	r2,-32(fp)
 2001e58:	10fff716 	blt	r2,r3,2001e38 <Flash_InfoDump+0x88>
                nextreg++;
            }                
        }else{
            FLASH_DEBUG(("alt_get_flash_info error, ret_code:%d fail\r\n", ret_code));
        }
        alt_flash_close_dev(fd);
 2001e5c:	e13ffa17 	ldw	r4,-24(fp)
 2001e60:	200d0740 	call	200d074 <alt_flash_close_dev>
    }
    
    if (!bSuccess)        
        FLASH_DEBUG(("Flash_InfoDump fail\r\n"));

    return bSuccess;
 2001e64:	e0bffc17 	ldw	r2,-16(fp)
    
}
 2001e68:	e037883a 	mov	sp,fp
 2001e6c:	dfc00117 	ldw	ra,4(sp)
 2001e70:	df000017 	ldw	fp,0(sp)
 2001e74:	dec00204 	addi	sp,sp,8
 2001e78:	f800283a 	ret

02001e7c <Flash_Open>:



FLASH_HANDLE Flash_Open(char *pFlashName){
 2001e7c:	defff704 	addi	sp,sp,-36
 2001e80:	dfc00815 	stw	ra,32(sp)
 2001e84:	df000715 	stw	fp,28(sp)
 2001e88:	df000704 	addi	fp,sp,28
 2001e8c:	e13fff15 	stw	r4,-4(fp)
    int error_code;
    bool bSuccess = FALSE;
 2001e90:	e03ffd15 	stw	zero,-12(fp)
    FLASH_INFO *pFlash=NULL;
 2001e94:	e03ffc15 	stw	zero,-16(fp)
    
    pFlash = (FLASH_INFO *)malloc(sizeof(FLASH_INFO));
 2001e98:	01000304 	movi	r4,12
 2001e9c:	20043c80 	call	20043c8 <malloc>
 2001ea0:	e0bffc15 	stw	r2,-16(fp)
    pFlash->fd_flash = alt_flash_open_dev(pFlashName);
 2001ea4:	e13fff17 	ldw	r4,-4(fp)
 2001ea8:	200cff80 	call	200cff8 <alt_flash_open_dev>
 2001eac:	1007883a 	mov	r3,r2
 2001eb0:	e0bffc17 	ldw	r2,-16(fp)
 2001eb4:	10c00015 	stw	r3,0(r2)
    if (pFlash->fd_flash){
 2001eb8:	e0bffc17 	ldw	r2,-16(fp)
 2001ebc:	10800017 	ldw	r2,0(r2)
 2001ec0:	1005003a 	cmpeq	r2,r2,zero
 2001ec4:	1000151e 	bne	r2,zero,2001f1c <Flash_Open+0xa0>
        error_code = alt_get_flash_info(pFlash->fd_flash,&pFlash->regions_flash,&pFlash->number_of_regions_flash);
 2001ec8:	e0bffc17 	ldw	r2,-16(fp)
 2001ecc:	10c00017 	ldw	r3,0(r2)
 2001ed0:	e0bffc17 	ldw	r2,-16(fp)
 2001ed4:	11000104 	addi	r4,r2,4
 2001ed8:	e0bffc17 	ldw	r2,-16(fp)
 2001edc:	10800204 	addi	r2,r2,8
 2001ee0:	e0fff915 	stw	r3,-28(fp)
 2001ee4:	e13ffa15 	stw	r4,-24(fp)
 2001ee8:	e0bffb15 	stw	r2,-20(fp)
 2001eec:	e0bff917 	ldw	r2,-28(fp)
 2001ef0:	10800717 	ldw	r2,28(r2)
 2001ef4:	e13ff917 	ldw	r4,-28(fp)
 2001ef8:	e17ffa17 	ldw	r5,-24(fp)
 2001efc:	e1bffb17 	ldw	r6,-20(fp)
 2001f00:	103ee83a 	callr	r2
 2001f04:	e0bffe15 	stw	r2,-8(fp)
        if (error_code == 0){
 2001f08:	e0bffe17 	ldw	r2,-8(fp)
 2001f0c:	1004c03a 	cmpne	r2,r2,zero
 2001f10:	1000021e 	bne	r2,zero,2001f1c <Flash_Open+0xa0>
            bSuccess = TRUE;
 2001f14:	00800044 	movi	r2,1
 2001f18:	e0bffd15 	stw	r2,-12(fp)
        }            
    }
    
    if (!bSuccess){
 2001f1c:	e0bffd17 	ldw	r2,-12(fp)
 2001f20:	1004c03a 	cmpne	r2,r2,zero
 2001f24:	1000031e 	bne	r2,zero,2001f34 <Flash_Open+0xb8>
        free(pFlash);
 2001f28:	e13ffc17 	ldw	r4,-16(fp)
 2001f2c:	20043b40 	call	20043b4 <free>
        pFlash= NULL;
 2001f30:	e03ffc15 	stw	zero,-16(fp)
    }        
    return pFlash;
 2001f34:	e0bffc17 	ldw	r2,-16(fp)
            
}
 2001f38:	e037883a 	mov	sp,fp
 2001f3c:	dfc00117 	ldw	ra,4(sp)
 2001f40:	df000017 	ldw	fp,0(sp)
 2001f44:	dec00204 	addi	sp,sp,8
 2001f48:	f800283a 	ret

02001f4c <Flash_Close>:

bool Flash_Close(FLASH_HANDLE Handle){
 2001f4c:	defffc04 	addi	sp,sp,-16
 2001f50:	dfc00315 	stw	ra,12(sp)
 2001f54:	df000215 	stw	fp,8(sp)
 2001f58:	df000204 	addi	fp,sp,8
 2001f5c:	e13fff15 	stw	r4,-4(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 2001f60:	e0bfff17 	ldw	r2,-4(fp)
 2001f64:	e0bffe15 	stw	r2,-8(fp)
    if (pFlash->fd_flash){
 2001f68:	e0bffe17 	ldw	r2,-8(fp)
 2001f6c:	10800017 	ldw	r2,0(r2)
 2001f70:	1005003a 	cmpeq	r2,r2,zero
 2001f74:	1000031e 	bne	r2,zero,2001f84 <Flash_Close+0x38>
        alt_flash_close_dev(pFlash->fd_flash);
 2001f78:	e0bffe17 	ldw	r2,-8(fp)
 2001f7c:	11000017 	ldw	r4,0(r2)
 2001f80:	200d0740 	call	200d074 <alt_flash_close_dev>
    }
    free(Handle);
 2001f84:	e13fff17 	ldw	r4,-4(fp)
 2001f88:	20043b40 	call	20043b4 <free>
    return TRUE;
 2001f8c:	00800044 	movi	r2,1
}
 2001f90:	e037883a 	mov	sp,fp
 2001f94:	dfc00117 	ldw	ra,4(sp)
 2001f98:	df000017 	ldw	fp,0(sp)
 2001f9c:	dec00204 	addi	sp,sp,8
 2001fa0:	f800283a 	ret

02001fa4 <Flash_GetBlockInfo>:

bool Flash_GetBlockInfo(FLASH_HANDLE Handle, alt_u16 block_index, alt_32 *poffset, alt_32 *psize){
 2001fa4:	defff204 	addi	sp,sp,-56
 2001fa8:	df000d15 	stw	fp,52(sp)
 2001fac:	df000d04 	addi	fp,sp,52
 2001fb0:	e13ffb15 	stw	r4,-20(fp)
 2001fb4:	e1bffd15 	stw	r6,-12(fp)
 2001fb8:	e1fffe15 	stw	r7,-8(fp)
 2001fbc:	e17ffc0d 	sth	r5,-16(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 2001fc0:	e0bffb17 	ldw	r2,-20(fp)
 2001fc4:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 offset=0, length;        
 2001fc8:	e03ff915 	stw	zero,-28(fp)
    int r, i, block_count=0;
 2001fcc:	e03ff515 	stw	zero,-44(fp)
    flash_region *nextreg = pFlash->regions_flash;
 2001fd0:	e0bffa17 	ldw	r2,-24(fp)
 2001fd4:	10800117 	ldw	r2,4(r2)
 2001fd8:	e0bff415 	stw	r2,-48(fp)
    bool bFind = FALSE;
 2001fdc:	e03ff315 	stw	zero,-52(fp)
    
    if (!pFlash->fd_flash)
 2001fe0:	e0bffa17 	ldw	r2,-24(fp)
 2001fe4:	10800017 	ldw	r2,0(r2)
 2001fe8:	1004c03a 	cmpne	r2,r2,zero
 2001fec:	1000021e 	bne	r2,zero,2001ff8 <Flash_GetBlockInfo+0x54>
        return FALSE;
 2001ff0:	e03fff15 	stw	zero,-4(fp)
 2001ff4:	00003506 	br	20020cc <Flash_GetBlockInfo+0x128>
    
    
    for(r=0;r<pFlash->number_of_regions_flash && !bFind;r++){
 2001ff8:	e03ff715 	stw	zero,-36(fp)
 2001ffc:	00002106 	br	2002084 <Flash_GetBlockInfo+0xe0>
        for(i=0;i<nextreg->number_of_blocks;i++){
 2002000:	e03ff615 	stw	zero,-40(fp)
 2002004:	00001506 	br	200205c <Flash_GetBlockInfo+0xb8>
            if (block_count == block_index){
 2002008:	e0fffc0b 	ldhu	r3,-16(fp)
 200200c:	e0bff517 	ldw	r2,-44(fp)
 2002010:	1880061e 	bne	r3,r2,200202c <Flash_GetBlockInfo+0x88>
                bFind = TRUE;
 2002014:	00800044 	movi	r2,1
 2002018:	e0bff315 	stw	r2,-52(fp)
                length = nextreg->block_size;
 200201c:	e0bff417 	ldw	r2,-48(fp)
 2002020:	10800317 	ldw	r2,12(r2)
 2002024:	e0bff815 	stw	r2,-32(fp)
 2002028:	00000906 	br	2002050 <Flash_GetBlockInfo+0xac>
            }else{
                offset += nextreg->block_size;
 200202c:	e0bff417 	ldw	r2,-48(fp)
 2002030:	10800317 	ldw	r2,12(r2)
 2002034:	1007883a 	mov	r3,r2
 2002038:	e0bff917 	ldw	r2,-28(fp)
 200203c:	10c5883a 	add	r2,r2,r3
 2002040:	e0bff915 	stw	r2,-28(fp)
                block_count++;
 2002044:	e0bff517 	ldw	r2,-44(fp)
 2002048:	10800044 	addi	r2,r2,1
 200204c:	e0bff515 	stw	r2,-44(fp)
    if (!pFlash->fd_flash)
        return FALSE;
    
    
    for(r=0;r<pFlash->number_of_regions_flash && !bFind;r++){
        for(i=0;i<nextreg->number_of_blocks;i++){
 2002050:	e0bff617 	ldw	r2,-40(fp)
 2002054:	10800044 	addi	r2,r2,1
 2002058:	e0bff615 	stw	r2,-40(fp)
 200205c:	e0bff417 	ldw	r2,-48(fp)
 2002060:	10c00217 	ldw	r3,8(r2)
 2002064:	e0bff617 	ldw	r2,-40(fp)
 2002068:	10ffe716 	blt	r2,r3,2002008 <Flash_GetBlockInfo+0x64>
            }else{
                offset += nextreg->block_size;
                block_count++;
            }
        }
        nextreg++;
 200206c:	e0bff417 	ldw	r2,-48(fp)
 2002070:	10800404 	addi	r2,r2,16
 2002074:	e0bff415 	stw	r2,-48(fp)
    
    if (!pFlash->fd_flash)
        return FALSE;
    
    
    for(r=0;r<pFlash->number_of_regions_flash && !bFind;r++){
 2002078:	e0bff717 	ldw	r2,-36(fp)
 200207c:	10800044 	addi	r2,r2,1
 2002080:	e0bff715 	stw	r2,-36(fp)
 2002084:	e0bffa17 	ldw	r2,-24(fp)
 2002088:	10c00217 	ldw	r3,8(r2)
 200208c:	e0bff717 	ldw	r2,-36(fp)
 2002090:	10c0030e 	bge	r2,r3,20020a0 <Flash_GetBlockInfo+0xfc>
 2002094:	e0bff317 	ldw	r2,-52(fp)
 2002098:	1005003a 	cmpeq	r2,r2,zero
 200209c:	103fd81e 	bne	r2,zero,2002000 <Flash_GetBlockInfo+0x5c>
                block_count++;
            }
        }
        nextreg++;
    }    
    if (bFind){
 20020a0:	e0bff317 	ldw	r2,-52(fp)
 20020a4:	1005003a 	cmpeq	r2,r2,zero
 20020a8:	1000061e 	bne	r2,zero,20020c4 <Flash_GetBlockInfo+0x120>
        *poffset = offset;
 20020ac:	e0fff917 	ldw	r3,-28(fp)
 20020b0:	e0bffd17 	ldw	r2,-12(fp)
 20020b4:	10c00015 	stw	r3,0(r2)
        *psize = length;
 20020b8:	e0fff817 	ldw	r3,-32(fp)
 20020bc:	e0bffe17 	ldw	r2,-8(fp)
 20020c0:	10c00015 	stw	r3,0(r2)
    }
    
    return bFind;
 20020c4:	e0bff317 	ldw	r2,-52(fp)
 20020c8:	e0bfff15 	stw	r2,-4(fp)
 20020cc:	e0bfff17 	ldw	r2,-4(fp)
    
}
 20020d0:	e037883a 	mov	sp,fp
 20020d4:	df000017 	ldw	fp,0(sp)
 20020d8:	dec00104 	addi	sp,sp,4
 20020dc:	f800283a 	ret

020020e0 <Flash_Read>:

bool Flash_Read(FLASH_HANDLE Handle, alt_u32 offset, alt_u8 *szBuf, alt_u32 size){
 20020e0:	defff304 	addi	sp,sp,-52
 20020e4:	dfc00c15 	stw	ra,48(sp)
 20020e8:	df000b15 	stw	fp,44(sp)
 20020ec:	df000b04 	addi	fp,sp,44
 20020f0:	e13ffb15 	stw	r4,-20(fp)
 20020f4:	e17ffc15 	stw	r5,-16(fp)
 20020f8:	e1bffd15 	stw	r6,-12(fp)
 20020fc:	e1fffe15 	stw	r7,-8(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 2002100:	e0bffb17 	ldw	r2,-20(fp)
 2002104:	e0bffa15 	stw	r2,-24(fp)
    int error_code;
    if (!pFlash->fd_flash)
 2002108:	e0bffa17 	ldw	r2,-24(fp)
 200210c:	10800017 	ldw	r2,0(r2)
 2002110:	1004c03a 	cmpne	r2,r2,zero
 2002114:	1000021e 	bne	r2,zero,2002120 <Flash_Read+0x40>
        return FALSE;
 2002118:	e03fff15 	stw	zero,-4(fp)
 200211c:	00001806 	br	2002180 <Flash_Read+0xa0>
    error_code = alt_read_flash(pFlash->fd_flash, offset, szBuf, size);
 2002120:	e0bffa17 	ldw	r2,-24(fp)
 2002124:	10800017 	ldw	r2,0(r2)
 2002128:	e0fffc17 	ldw	r3,-16(fp)
 200212c:	e13ffe17 	ldw	r4,-8(fp)
 2002130:	e0bff515 	stw	r2,-44(fp)
 2002134:	e0fff615 	stw	r3,-40(fp)
 2002138:	e0bffd17 	ldw	r2,-12(fp)
 200213c:	e0bff715 	stw	r2,-36(fp)
 2002140:	e13ff815 	stw	r4,-32(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
 2002144:	e0bff517 	ldw	r2,-44(fp)
 2002148:	10800617 	ldw	r2,24(r2)
 200214c:	e13ff517 	ldw	r4,-44(fp)
 2002150:	e17ff617 	ldw	r5,-40(fp)
 2002154:	e1bff717 	ldw	r6,-36(fp)
 2002158:	e1fff817 	ldw	r7,-32(fp)
 200215c:	103ee83a 	callr	r2
 2002160:	e0bff915 	stw	r2,-28(fp)
    if (error_code == 0)
 2002164:	e0bff917 	ldw	r2,-28(fp)
 2002168:	1004c03a 	cmpne	r2,r2,zero
 200216c:	1000031e 	bne	r2,zero,200217c <Flash_Read+0x9c>
        return TRUE;
 2002170:	00800044 	movi	r2,1
 2002174:	e0bfff15 	stw	r2,-4(fp)
 2002178:	00000106 	br	2002180 <Flash_Read+0xa0>
    return FALSE;                    
 200217c:	e03fff15 	stw	zero,-4(fp)
 2002180:	e0bfff17 	ldw	r2,-4(fp)
    
}
 2002184:	e037883a 	mov	sp,fp
 2002188:	dfc00117 	ldw	ra,4(sp)
 200218c:	df000017 	ldw	fp,0(sp)
 2002190:	dec00204 	addi	sp,sp,8
 2002194:	f800283a 	ret

02002198 <Flash_Write>:

bool Flash_Write(FLASH_HANDLE Handle, alt_u32 offset, alt_u8 *szData, alt_u32 size){
 2002198:	deffe804 	addi	sp,sp,-96
 200219c:	dfc01715 	stw	ra,92(sp)
 20021a0:	df001615 	stw	fp,88(sp)
 20021a4:	df001604 	addi	fp,sp,88
 20021a8:	e13ffb15 	stw	r4,-20(fp)
 20021ac:	e17ffc15 	stw	r5,-16(fp)
 20021b0:	e1bffd15 	stw	r6,-12(fp)
 20021b4:	e1fffe15 	stw	r7,-8(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 20021b8:	e0bffb17 	ldw	r2,-20(fp)
 20021bc:	e0bffa15 	stw	r2,-24(fp)
    bool bSuccess = TRUE;
 20021c0:	00800044 	movi	r2,1
 20021c4:	e0bff915 	stw	r2,-28(fp)
    int error_code;
    
    if (!pFlash->fd_flash)
 20021c8:	e0bffa17 	ldw	r2,-24(fp)
 20021cc:	10800017 	ldw	r2,0(r2)
 20021d0:	1004c03a 	cmpne	r2,r2,zero
 20021d4:	1000021e 	bne	r2,zero,20021e0 <Flash_Write+0x48>
        return FALSE;
 20021d8:	e03fff15 	stw	zero,-4(fp)
 20021dc:	00007c06 	br	20023d0 <Flash_Write+0x238>
    }else{
        FLASH_DEBUG(("alt_write_flash fail, error_code=%d\r\n", error_code));
    }    
#else
    int block_offset, block_size, write_count, this_write_size, r, i;//, first_offset;        
    flash_region *nextreg = pFlash->regions_flash;
 20021e0:	e0bffa17 	ldw	r2,-24(fp)
 20021e4:	10800117 	ldw	r2,4(r2)
 20021e8:	e0bff115 	stw	r2,-60(fp)

    
    block_offset = 0;
 20021ec:	e03ff715 	stw	zero,-36(fp)
    write_count = 0;
 20021f0:	e03ff515 	stw	zero,-44(fp)
    for(r=0;r<pFlash->number_of_regions_flash && bSuccess;r++){
 20021f4:	e03ff315 	stw	zero,-52(fp)
 20021f8:	00006c06 	br	20023ac <Flash_Write+0x214>
        for(i=0;i<nextreg->number_of_blocks && bSuccess;i++){
 20021fc:	e03ff215 	stw	zero,-56(fp)
 2002200:	00005d06 	br	2002378 <Flash_Write+0x1e0>
            block_size = nextreg->block_size;
 2002204:	e0bff117 	ldw	r2,-60(fp)
 2002208:	10800317 	ldw	r2,12(r2)
 200220c:	e0bff615 	stw	r2,-40(fp)
//            FLASH_DEBUG(("block_offset=%d, block_size=%d\r\n", block_offset, block_size));
//            if ((offset >= block_offset) && ((offset+size) <= (block_offset + block_size))){
            if (((offset+write_count) >= block_offset) && (write_count < size)){
 2002210:	e0fff517 	ldw	r3,-44(fp)
 2002214:	e0bffc17 	ldw	r2,-16(fp)
 2002218:	1887883a 	add	r3,r3,r2
 200221c:	e0bff717 	ldw	r2,-36(fp)
 2002220:	18804e36 	bltu	r3,r2,200235c <Flash_Write+0x1c4>
 2002224:	e0fff517 	ldw	r3,-44(fp)
 2002228:	e0bffe17 	ldw	r2,-8(fp)
 200222c:	18804b2e 	bgeu	r3,r2,200235c <Flash_Write+0x1c4>
                // write
                this_write_size = size - write_count;
 2002230:	e0fff517 	ldw	r3,-44(fp)
 2002234:	e0bffe17 	ldw	r2,-8(fp)
 2002238:	10c5c83a 	sub	r2,r2,r3
 200223c:	e0bff415 	stw	r2,-48(fp)
                if (write_count == 0){
 2002240:	e0bff517 	ldw	r2,-44(fp)
 2002244:	1004c03a 	cmpne	r2,r2,zero
 2002248:	1000101e 	bne	r2,zero,200228c <Flash_Write+0xf4>
                    // first block
                    if (this_write_size > (block_offset + block_size - offset))
 200224c:	e13ff417 	ldw	r4,-48(fp)
 2002250:	e0fff717 	ldw	r3,-36(fp)
 2002254:	e0bff617 	ldw	r2,-40(fp)
 2002258:	1885883a 	add	r2,r3,r2
 200225c:	1007883a 	mov	r3,r2
 2002260:	e0bffc17 	ldw	r2,-16(fp)
 2002264:	1885c83a 	sub	r2,r3,r2
 2002268:	11000d2e 	bgeu	r2,r4,20022a0 <Flash_Write+0x108>
                        this_write_size = block_offset + block_size - offset;
 200226c:	e0fff717 	ldw	r3,-36(fp)
 2002270:	e0bff617 	ldw	r2,-40(fp)
 2002274:	1885883a 	add	r2,r3,r2
 2002278:	1007883a 	mov	r3,r2
 200227c:	e0bffc17 	ldw	r2,-16(fp)
 2002280:	1885c83a 	sub	r2,r3,r2
 2002284:	e0bff415 	stw	r2,-48(fp)
 2002288:	00000506 	br	20022a0 <Flash_Write+0x108>
                }else{
                    // block aligement
                    if (this_write_size > block_size)
 200228c:	e0fff417 	ldw	r3,-48(fp)
 2002290:	e0bff617 	ldw	r2,-40(fp)
 2002294:	10c0020e 	bge	r2,r3,20022a0 <Flash_Write+0x108>
                        this_write_size = block_size;
 2002298:	e0bff617 	ldw	r2,-40(fp)
 200229c:	e0bff415 	stw	r2,-48(fp)
                }        
                error_code = alt_write_flash_block(pFlash->fd_flash, block_offset, offset+write_count, szData+write_count, this_write_size);
 20022a0:	e0bffa17 	ldw	r2,-24(fp)
 20022a4:	11000017 	ldw	r4,0(r2)
 20022a8:	e0fff517 	ldw	r3,-44(fp)
 20022ac:	e0bffc17 	ldw	r2,-16(fp)
 20022b0:	1885883a 	add	r2,r3,r2
 20022b4:	100b883a 	mov	r5,r2
 20022b8:	e0bff517 	ldw	r2,-44(fp)
 20022bc:	1007883a 	mov	r3,r2
 20022c0:	e0bffd17 	ldw	r2,-12(fp)
 20022c4:	1887883a 	add	r3,r3,r2
 20022c8:	e13feb15 	stw	r4,-84(fp)
 20022cc:	e0bff717 	ldw	r2,-36(fp)
 20022d0:	e0bfec15 	stw	r2,-80(fp)
 20022d4:	e17fed15 	stw	r5,-76(fp)
 20022d8:	e0ffee15 	stw	r3,-72(fp)
 20022dc:	e0bff417 	ldw	r2,-48(fp)
 20022e0:	e0bfef15 	stw	r2,-68(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
 20022e4:	e0bfeb17 	ldw	r2,-84(fp)
 20022e8:	10c00917 	ldw	r3,36(r2)
 20022ec:	e0bfef17 	ldw	r2,-68(fp)
 20022f0:	d8800015 	stw	r2,0(sp)
 20022f4:	e13feb17 	ldw	r4,-84(fp)
 20022f8:	e17fec17 	ldw	r5,-80(fp)
 20022fc:	e1bfed17 	ldw	r6,-76(fp)
 2002300:	e1ffee17 	ldw	r7,-72(fp)
 2002304:	183ee83a 	callr	r3
 2002308:	e0bff015 	stw	r2,-64(fp)

  if(!ret_code)
 200230c:	e0bff017 	ldw	r2,-64(fp)
 2002310:	1004c03a 	cmpne	r2,r2,zero
 2002314:	1000071e 	bne	r2,zero,2002334 <Flash_Write+0x19c>
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
 2002318:	e0bfeb17 	ldw	r2,-84(fp)
 200231c:	10800a17 	ldw	r2,40(r2)
 2002320:	1007883a 	mov	r3,r2
 2002324:	e0bfed17 	ldw	r2,-76(fp)
 2002328:	1889883a 	add	r4,r3,r2
 200232c:	e17fef17 	ldw	r5,-68(fp)
 2002330:	200cf8c0 	call	200cf8c <alt_dcache_flush>

  return ret_code;
 2002334:	e0bff017 	ldw	r2,-64(fp)
 2002338:	e0bff815 	stw	r2,-32(fp)
                //FLASH_DEBUG(("alt_write_flash_block, block_offset:%d, offset:%d, len:%d, this block_size:%d\r\n", block_offset, offset+write_count, this_write_size, block_size));
                if (error_code != 0){
 200233c:	e0bff817 	ldw	r2,-32(fp)
 2002340:	1005003a 	cmpeq	r2,r2,zero
 2002344:	1000011e 	bne	r2,zero,200234c <Flash_Write+0x1b4>
                    bSuccess = FALSE;
 2002348:	e03ff915 	stw	zero,-28(fp)
                    FLASH_DEBUG(("alt_write_flash_block fail, error_code=%d\r\n", error_code));
                }    
                write_count += this_write_size;
 200234c:	e0bff517 	ldw	r2,-44(fp)
 2002350:	e0fff417 	ldw	r3,-48(fp)
 2002354:	10c5883a 	add	r2,r2,r3
 2002358:	e0bff515 	stw	r2,-44(fp)
            }
            block_offset += block_size;
 200235c:	e0fff717 	ldw	r3,-36(fp)
 2002360:	e0bff617 	ldw	r2,-40(fp)
 2002364:	1885883a 	add	r2,r3,r2
 2002368:	e0bff715 	stw	r2,-36(fp)

    
    block_offset = 0;
    write_count = 0;
    for(r=0;r<pFlash->number_of_regions_flash && bSuccess;r++){
        for(i=0;i<nextreg->number_of_blocks && bSuccess;i++){
 200236c:	e0bff217 	ldw	r2,-56(fp)
 2002370:	10800044 	addi	r2,r2,1
 2002374:	e0bff215 	stw	r2,-56(fp)
 2002378:	e0bff117 	ldw	r2,-60(fp)
 200237c:	10c00217 	ldw	r3,8(r2)
 2002380:	e0bff217 	ldw	r2,-56(fp)
 2002384:	10c0030e 	bge	r2,r3,2002394 <Flash_Write+0x1fc>
 2002388:	e0bff917 	ldw	r2,-28(fp)
 200238c:	1004c03a 	cmpne	r2,r2,zero
 2002390:	103f9c1e 	bne	r2,zero,2002204 <Flash_Write+0x6c>
                }    
                write_count += this_write_size;
            }
            block_offset += block_size;
        }
        nextreg++;
 2002394:	e0bff117 	ldw	r2,-60(fp)
 2002398:	10800404 	addi	r2,r2,16
 200239c:	e0bff115 	stw	r2,-60(fp)
    flash_region *nextreg = pFlash->regions_flash;

    
    block_offset = 0;
    write_count = 0;
    for(r=0;r<pFlash->number_of_regions_flash && bSuccess;r++){
 20023a0:	e0bff317 	ldw	r2,-52(fp)
 20023a4:	10800044 	addi	r2,r2,1
 20023a8:	e0bff315 	stw	r2,-52(fp)
 20023ac:	e0bffa17 	ldw	r2,-24(fp)
 20023b0:	10c00217 	ldw	r3,8(r2)
 20023b4:	e0bff317 	ldw	r2,-52(fp)
 20023b8:	10c0030e 	bge	r2,r3,20023c8 <Flash_Write+0x230>
 20023bc:	e0bff917 	ldw	r2,-28(fp)
 20023c0:	1004c03a 	cmpne	r2,r2,zero
 20023c4:	103f8d1e 	bne	r2,zero,20021fc <Flash_Write+0x64>
    error_code = alt_write_flash(fd_flash, offset, szData, size); // it will erase flash block content before write data
//    error_code = alt_write_flash_block(fd_flash, offset, offset+size, szData, size); // it will preserve flash content
    if (error_code == 0)
        return TRUE;
*/        
    return bSuccess;                    
 20023c8:	e0bff917 	ldw	r2,-28(fp)
 20023cc:	e0bfff15 	stw	r2,-4(fp)
 20023d0:	e0bfff17 	ldw	r2,-4(fp)
}
 20023d4:	e037883a 	mov	sp,fp
 20023d8:	dfc00117 	ldw	ra,4(sp)
 20023dc:	df000017 	ldw	fp,0(sp)
 20023e0:	dec00204 	addi	sp,sp,8
 20023e4:	f800283a 	ret

020023e8 <Flash_Erase>:

bool Flash_Erase(FLASH_HANDLE Handle, alt_u16 block_index){
 20023e8:	defff204 	addi	sp,sp,-56
 20023ec:	dfc00d15 	stw	ra,52(sp)
 20023f0:	df000c15 	stw	fp,48(sp)
 20023f4:	df000c04 	addi	fp,sp,48
 20023f8:	e13ffd15 	stw	r4,-12(fp)
 20023fc:	e17ffe0d 	sth	r5,-8(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 2002400:	e0bffd17 	ldw	r2,-12(fp)
 2002404:	e0bffa15 	stw	r2,-24(fp)
    if (!pFlash->fd_flash)
 2002408:	e0bffa17 	ldw	r2,-24(fp)
 200240c:	10800017 	ldw	r2,0(r2)
 2002410:	1004c03a 	cmpne	r2,r2,zero
 2002414:	1000021e 	bne	r2,zero,2002420 <Flash_Erase+0x38>
        return FALSE;
 2002418:	e03fff15 	stw	zero,-4(fp)
 200241c:	00002906 	br	20024c4 <Flash_Erase+0xdc>
    alt_u32 offset;
    alt_u32 length;        
    int error_code;
    bool bSuccess = FALSE;
 2002420:	e03ff815 	stw	zero,-32(fp)

    
    if (Flash_GetBlockInfo(Handle, block_index, &offset, &length)){
 2002424:	e17ffe0b 	ldhu	r5,-8(fp)
 2002428:	e1bffb04 	addi	r6,fp,-20
 200242c:	e1fffc04 	addi	r7,fp,-16
 2002430:	e13ffd17 	ldw	r4,-12(fp)
 2002434:	2001fa40 	call	2001fa4 <Flash_GetBlockInfo>
 2002438:	1005003a 	cmpeq	r2,r2,zero
 200243c:	10001f1e 	bne	r2,zero,20024bc <Flash_Erase+0xd4>
        error_code = alt_erase_flash_block(pFlash->fd_flash, offset, length);
 2002440:	e0bffa17 	ldw	r2,-24(fp)
 2002444:	10c00017 	ldw	r3,0(r2)
 2002448:	e0bffb17 	ldw	r2,-20(fp)
 200244c:	1009883a 	mov	r4,r2
 2002450:	e0bffc17 	ldw	r2,-16(fp)
 2002454:	e0fff415 	stw	r3,-48(fp)
 2002458:	e13ff515 	stw	r4,-44(fp)
 200245c:	e0bff615 	stw	r2,-40(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
 2002460:	e0bff417 	ldw	r2,-48(fp)
 2002464:	10800817 	ldw	r2,32(r2)
 2002468:	e13ff417 	ldw	r4,-48(fp)
 200246c:	e17ff517 	ldw	r5,-44(fp)
 2002470:	103ee83a 	callr	r2
 2002474:	e0bff715 	stw	r2,-36(fp)
  
  if(!ret_code)
 2002478:	e0bff717 	ldw	r2,-36(fp)
 200247c:	1004c03a 	cmpne	r2,r2,zero
 2002480:	1000071e 	bne	r2,zero,20024a0 <Flash_Erase+0xb8>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
 2002484:	e0bff417 	ldw	r2,-48(fp)
 2002488:	10800a17 	ldw	r2,40(r2)
 200248c:	1007883a 	mov	r3,r2
 2002490:	e0bff517 	ldw	r2,-44(fp)
 2002494:	1889883a 	add	r4,r3,r2
 2002498:	e17ff617 	ldw	r5,-40(fp)
 200249c:	200cf8c0 	call	200cf8c <alt_dcache_flush>

  return ret_code;
 20024a0:	e0bff717 	ldw	r2,-36(fp)
 20024a4:	e0bff915 	stw	r2,-28(fp)
        //DEBUG_FLASH("Erase block[%d], offset=%Xh, lenght=%Xh", block_no, offset, length);
        if (error_code == 0)
 20024a8:	e0bff917 	ldw	r2,-28(fp)
 20024ac:	1004c03a 	cmpne	r2,r2,zero
 20024b0:	1000021e 	bne	r2,zero,20024bc <Flash_Erase+0xd4>
            bSuccess = TRUE;
 20024b4:	00800044 	movi	r2,1
 20024b8:	e0bff815 	stw	r2,-32(fp)
    }        
    
    return bSuccess;    
 20024bc:	e0bff817 	ldw	r2,-32(fp)
 20024c0:	e0bfff15 	stw	r2,-4(fp)
 20024c4:	e0bfff17 	ldw	r2,-4(fp)
}
 20024c8:	e037883a 	mov	sp,fp
 20024cc:	dfc00117 	ldw	ra,4(sp)
 20024d0:	df000017 	ldw	fp,0(sp)
 20024d4:	dec00204 	addi	sp,sp,8
 20024d8:	f800283a 	ret

020024dc <Flash_GetBlockCount>:

alt_u16 Flash_GetBlockCount(FLASH_HANDLE Handle){
 20024dc:	defffa04 	addi	sp,sp,-24
 20024e0:	df000515 	stw	fp,20(sp)
 20024e4:	df000504 	addi	fp,sp,20
 20024e8:	e13fff15 	stw	r4,-4(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;    
 20024ec:	e0bfff17 	ldw	r2,-4(fp)
 20024f0:	e0bffe15 	stw	r2,-8(fp)
    alt_u16 no=0;
 20024f4:	e03ffd0d 	sth	zero,-12(fp)
    flash_region *nextreg = pFlash->regions_flash;
 20024f8:	e0bffe17 	ldw	r2,-8(fp)
 20024fc:	10800117 	ldw	r2,4(r2)
 2002500:	e0bffc15 	stw	r2,-16(fp)
    int r;
    for(r=0;r<pFlash->number_of_regions_flash;r++){
 2002504:	e03ffb15 	stw	zero,-20(fp)
 2002508:	00000c06 	br	200253c <Flash_GetBlockCount+0x60>
        no += nextreg->number_of_blocks;
 200250c:	e0bffc17 	ldw	r2,-16(fp)
 2002510:	10800217 	ldw	r2,8(r2)
 2002514:	1007883a 	mov	r3,r2
 2002518:	e0bffd0b 	ldhu	r2,-12(fp)
 200251c:	10c5883a 	add	r2,r2,r3
 2002520:	e0bffd0d 	sth	r2,-12(fp)
        nextreg++;
 2002524:	e0bffc17 	ldw	r2,-16(fp)
 2002528:	10800404 	addi	r2,r2,16
 200252c:	e0bffc15 	stw	r2,-16(fp)
alt_u16 Flash_GetBlockCount(FLASH_HANDLE Handle){
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;    
    alt_u16 no=0;
    flash_region *nextreg = pFlash->regions_flash;
    int r;
    for(r=0;r<pFlash->number_of_regions_flash;r++){
 2002530:	e0bffb17 	ldw	r2,-20(fp)
 2002534:	10800044 	addi	r2,r2,1
 2002538:	e0bffb15 	stw	r2,-20(fp)
 200253c:	e0bffe17 	ldw	r2,-8(fp)
 2002540:	10c00217 	ldw	r3,8(r2)
 2002544:	e0bffb17 	ldw	r2,-20(fp)
 2002548:	10fff016 	blt	r2,r3,200250c <Flash_GetBlockCount+0x30>
        no += nextreg->number_of_blocks;
        nextreg++;
    }
    return no;
 200254c:	e0bffd0b 	ldhu	r2,-12(fp)
}
 2002550:	e037883a 	mov	sp,fp
 2002554:	df000017 	ldw	fp,0(sp)
 2002558:	dec00104 	addi	sp,sp,4
 200255c:	f800283a 	ret

02002560 <Flash_Size>:


alt_u32 Flash_Size(char *pFlashName){
 2002560:	defff304 	addi	sp,sp,-52
 2002564:	dfc00c15 	stw	ra,48(sp)
 2002568:	df000b15 	stw	fp,44(sp)
 200256c:	df000b04 	addi	fp,sp,44
 2002570:	e13fff15 	stw	r4,-4(fp)
    alt_u32 FlashSize = 0;
 2002574:	e03ffc15 	stw	zero,-16(fp)
    flash_region *regions, *nextreg;
    alt_flash_fd* fd;
    int number_of_regions;
    int ret_code, i;
    /* Set write_data to all 0xa */
    fd = alt_flash_open_dev(pFlashName);
 2002578:	e13fff17 	ldw	r4,-4(fp)
 200257c:	200cff80 	call	200cff8 <alt_flash_open_dev>
 2002580:	e0bffa15 	stw	r2,-24(fp)
    if (fd){
 2002584:	e0bffa17 	ldw	r2,-24(fp)
 2002588:	1005003a 	cmpeq	r2,r2,zero
 200258c:	1000281e 	bne	r2,zero,2002630 <Flash_Size+0xd0>
 2002590:	e0bffa17 	ldw	r2,-24(fp)
 2002594:	e0bff515 	stw	r2,-44(fp)
 2002598:	e0bffd04 	addi	r2,fp,-12
 200259c:	e0bff615 	stw	r2,-40(fp)
 20025a0:	e0bffe04 	addi	r2,fp,-8
 20025a4:	e0bff715 	stw	r2,-36(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
 20025a8:	e0bff517 	ldw	r2,-44(fp)
 20025ac:	10800717 	ldw	r2,28(r2)
 20025b0:	e13ff517 	ldw	r4,-44(fp)
 20025b4:	e17ff617 	ldw	r5,-40(fp)
 20025b8:	e1bff717 	ldw	r6,-36(fp)
 20025bc:	103ee83a 	callr	r2
        ret_code = alt_get_flash_info(fd,&regions,&number_of_regions);
 20025c0:	e0bff915 	stw	r2,-28(fp)
        if (ret_code == 0 && number_of_regions >= 1){
 20025c4:	e0bff917 	ldw	r2,-28(fp)
 20025c8:	1004c03a 	cmpne	r2,r2,zero
 20025cc:	1000161e 	bne	r2,zero,2002628 <Flash_Size+0xc8>
 20025d0:	e0bffe17 	ldw	r2,-8(fp)
 20025d4:	10800050 	cmplti	r2,r2,1
 20025d8:	1000131e 	bne	r2,zero,2002628 <Flash_Size+0xc8>
            nextreg = regions;
 20025dc:	e0bffd17 	ldw	r2,-12(fp)
 20025e0:	e0bffb15 	stw	r2,-20(fp)
            for(i=0;i<number_of_regions;i++){
 20025e4:	e03ff815 	stw	zero,-32(fp)
 20025e8:	00000c06 	br	200261c <Flash_Size+0xbc>
                FlashSize += nextreg->region_size;
 20025ec:	e0bffb17 	ldw	r2,-20(fp)
 20025f0:	10800117 	ldw	r2,4(r2)
 20025f4:	1007883a 	mov	r3,r2
 20025f8:	e0bffc17 	ldw	r2,-16(fp)
 20025fc:	10c5883a 	add	r2,r2,r3
 2002600:	e0bffc15 	stw	r2,-16(fp)
                nextreg++;
 2002604:	e0bffb17 	ldw	r2,-20(fp)
 2002608:	10800404 	addi	r2,r2,16
 200260c:	e0bffb15 	stw	r2,-20(fp)
    fd = alt_flash_open_dev(pFlashName);
    if (fd){
        ret_code = alt_get_flash_info(fd,&regions,&number_of_regions);
        if (ret_code == 0 && number_of_regions >= 1){
            nextreg = regions;
            for(i=0;i<number_of_regions;i++){
 2002610:	e0bff817 	ldw	r2,-32(fp)
 2002614:	10800044 	addi	r2,r2,1
 2002618:	e0bff815 	stw	r2,-32(fp)
 200261c:	e0fffe17 	ldw	r3,-8(fp)
 2002620:	e0bff817 	ldw	r2,-32(fp)
 2002624:	10fff116 	blt	r2,r3,20025ec <Flash_Size+0x8c>
                FlashSize += nextreg->region_size;
                nextreg++;
            }
        }
        alt_flash_close_dev(fd);
 2002628:	e13ffa17 	ldw	r4,-24(fp)
 200262c:	200d0740 	call	200d074 <alt_flash_close_dev>
    }
    return FlashSize;
 2002630:	e0bffc17 	ldw	r2,-16(fp)
}    
 2002634:	e037883a 	mov	sp,fp
 2002638:	dfc00117 	ldw	ra,4(sp)
 200263c:	df000017 	ldw	fp,0(sp)
 2002640:	dec00204 	addi	sp,sp,8
 2002644:	f800283a 	ret

02002648 <FLASH_Verify>:



// bQuick=TRUE: just check first and last block 
bool FLASH_Verify(char *pFlashName, alt_u8 InitValue, bool bShowMessage, bool bQuickVerify){
 2002648:	deffea04 	addi	sp,sp,-88
 200264c:	dfc01515 	stw	ra,84(sp)
 2002650:	df001415 	stw	fp,80(sp)
 2002654:	df001404 	addi	fp,sp,80
 2002658:	e13ffb15 	stw	r4,-20(fp)
 200265c:	e1bffd15 	stw	r6,-12(fp)
 2002660:	e1fffe15 	stw	r7,-8(fp)
 2002664:	e17ffc05 	stb	r5,-16(fp)
    bool bPass = TRUE;
 2002668:	00800044 	movi	r2,1
 200266c:	e0bff815 	stw	r2,-32(fp)
    int i, k, BlockNum;
    FLASH_HANDLE hFlash;
    alt_u32 Offset, Size;
    alt_u8 *pBuf, Cnt;
    const int nBufSize = 8*1024; // 16K
 2002670:	00880004 	movi	r2,8192
 2002674:	e0bff115 	stw	r2,-60(fp)
    int nWriteSizeSum, nWriteSize;
    int nReadSizeSum, nReadSize;
    
    hFlash = Flash_Open(pFlashName);
 2002678:	e13ffb17 	ldw	r4,-20(fp)
 200267c:	2001e7c0 	call	2001e7c <Flash_Open>
 2002680:	e0bff415 	stw	r2,-48(fp)
    if (!hFlash){
 2002684:	e0bff417 	ldw	r2,-48(fp)
 2002688:	1004c03a 	cmpne	r2,r2,zero
 200268c:	1000081e 	bne	r2,zero,20026b0 <FLASH_Verify+0x68>
        if (bShowMessage)
 2002690:	e0bffd17 	ldw	r2,-12(fp)
 2002694:	1005003a 	cmpeq	r2,r2,zero
 2002698:	1000031e 	bne	r2,zero,20026a8 <FLASH_Verify+0x60>
            printf("Failed to open flash.\r\n");
 200269c:	01008074 	movhi	r4,513
 20026a0:	2101bb04 	addi	r4,r4,1772
 20026a4:	2004c340 	call	2004c34 <puts>
        return FALSE;
 20026a8:	e03fff15 	stw	zero,-4(fp)
 20026ac:	00014c06 	br	2002be0 <FLASH_Verify+0x598>
    }        
        
        
    BlockNum = Flash_GetBlockCount(hFlash);
 20026b0:	e13ff417 	ldw	r4,-48(fp)
 20026b4:	20024dc0 	call	20024dc <Flash_GetBlockCount>
 20026b8:	10bfffcc 	andi	r2,r2,65535
 20026bc:	e0bff515 	stw	r2,-44(fp)
    
    //===== alloc buffer
    pBuf = (alt_u8 *)malloc(nBufSize);
 20026c0:	e13ff117 	ldw	r4,-60(fp)
 20026c4:	20043c80 	call	20043c8 <malloc>
 20026c8:	e0bff315 	stw	r2,-52(fp)
    if (!pBuf){
 20026cc:	e0bff317 	ldw	r2,-52(fp)
 20026d0:	1004c03a 	cmpne	r2,r2,zero
 20026d4:	1000081e 	bne	r2,zero,20026f8 <FLASH_Verify+0xb0>
        if (bShowMessage)
 20026d8:	e0bffd17 	ldw	r2,-12(fp)
 20026dc:	1005003a 	cmpeq	r2,r2,zero
 20026e0:	1000031e 	bne	r2,zero,20026f0 <FLASH_Verify+0xa8>
            printf("[Error] Failed to alloc memory.\r\n");
 20026e4:	01008074 	movhi	r4,513
 20026e8:	2101c104 	addi	r4,r4,1796
 20026ec:	2004c340 	call	2004c34 <puts>
        return FALSE;
 20026f0:	e03fff15 	stw	zero,-4(fp)
 20026f4:	00013a06 	br	2002be0 <FLASH_Verify+0x598>
    }        
    
    
    //===== erase
    for(i=0;i<BlockNum && bPass;i++){
 20026f8:	e03ff715 	stw	zero,-36(fp)
 20026fc:	00002306 	br	200278c <FLASH_Verify+0x144>
        if (bQuickVerify && (i !=0 )&& (i != (BlockNum-1)))
 2002700:	e0bffe17 	ldw	r2,-8(fp)
 2002704:	1005003a 	cmpeq	r2,r2,zero
 2002708:	1000071e 	bne	r2,zero,2002728 <FLASH_Verify+0xe0>
 200270c:	e0bff717 	ldw	r2,-36(fp)
 2002710:	1005003a 	cmpeq	r2,r2,zero
 2002714:	1000041e 	bne	r2,zero,2002728 <FLASH_Verify+0xe0>
 2002718:	e0bff517 	ldw	r2,-44(fp)
 200271c:	10ffffc4 	addi	r3,r2,-1
 2002720:	e0bff717 	ldw	r2,-36(fp)
 2002724:	1880161e 	bne	r3,r2,2002780 <FLASH_Verify+0x138>
            continue;
        bPass = Flash_Erase(hFlash, i);
 2002728:	e0bff717 	ldw	r2,-36(fp)
 200272c:	117fffcc 	andi	r5,r2,65535
 2002730:	e13ff417 	ldw	r4,-48(fp)
 2002734:	20023e80 	call	20023e8 <Flash_Erase>
 2002738:	e0bff815 	stw	r2,-32(fp)
        if (bShowMessage){
 200273c:	e0bffd17 	ldw	r2,-12(fp)
 2002740:	1005003a 	cmpeq	r2,r2,zero
 2002744:	10000e1e 	bne	r2,zero,2002780 <FLASH_Verify+0x138>
            if (!bPass)
 2002748:	e0bff817 	ldw	r2,-32(fp)
 200274c:	1004c03a 	cmpne	r2,r2,zero
 2002750:	1000061e 	bne	r2,zero,200276c <FLASH_Verify+0x124>
                printf("[Error] Failed to erase flash block %d/%d\r\n.\r\n", i, BlockNum);
 2002754:	01008074 	movhi	r4,513
 2002758:	2101ca04 	addi	r4,r4,1832
 200275c:	e17ff717 	ldw	r5,-36(fp)
 2002760:	e1bff517 	ldw	r6,-44(fp)
 2002764:	2004b1c0 	call	2004b1c <printf>
 2002768:	00000506 	br	2002780 <FLASH_Verify+0x138>
            else
                printf("Erase Block %d/%d\r\n", i, BlockNum);
 200276c:	01008074 	movhi	r4,513
 2002770:	2101d604 	addi	r4,r4,1880
 2002774:	e17ff717 	ldw	r5,-36(fp)
 2002778:	e1bff517 	ldw	r6,-44(fp)
 200277c:	2004b1c0 	call	2004b1c <printf>
        return FALSE;
    }        
    
    
    //===== erase
    for(i=0;i<BlockNum && bPass;i++){
 2002780:	e0bff717 	ldw	r2,-36(fp)
 2002784:	10800044 	addi	r2,r2,1
 2002788:	e0bff715 	stw	r2,-36(fp)
 200278c:	e0fff717 	ldw	r3,-36(fp)
 2002790:	e0bff517 	ldw	r2,-44(fp)
 2002794:	1880030e 	bge	r3,r2,20027a4 <FLASH_Verify+0x15c>
 2002798:	e0bff817 	ldw	r2,-32(fp)
 200279c:	1004c03a 	cmpne	r2,r2,zero
 20027a0:	103fd71e 	bne	r2,zero,2002700 <FLASH_Verify+0xb8>
                printf("Erase Block %d/%d\r\n", i, BlockNum);
        }            
    }        
    
    //===== write
    if (bPass){
 20027a4:	e0bff817 	ldw	r2,-32(fp)
 20027a8:	1005003a 	cmpeq	r2,r2,zero
 20027ac:	1000681e 	bne	r2,zero,2002950 <FLASH_Verify+0x308>
        Cnt = InitValue;
 20027b0:	e0bffc03 	ldbu	r2,-16(fp)
 20027b4:	e0bff205 	stb	r2,-56(fp)
        for(i=0;i<BlockNum && bPass;i++){
 20027b8:	e03ff715 	stw	zero,-36(fp)
 20027bc:	00005e06 	br	2002938 <FLASH_Verify+0x2f0>
            if (bQuickVerify && (i !=0 )&& (i != (BlockNum-1)))
 20027c0:	e0bffe17 	ldw	r2,-8(fp)
 20027c4:	1005003a 	cmpeq	r2,r2,zero
 20027c8:	1000071e 	bne	r2,zero,20027e8 <FLASH_Verify+0x1a0>
 20027cc:	e0bff717 	ldw	r2,-36(fp)
 20027d0:	1005003a 	cmpeq	r2,r2,zero
 20027d4:	1000041e 	bne	r2,zero,20027e8 <FLASH_Verify+0x1a0>
 20027d8:	e0bff517 	ldw	r2,-44(fp)
 20027dc:	10ffffc4 	addi	r3,r2,-1
 20027e0:	e0bff717 	ldw	r2,-36(fp)
 20027e4:	1880511e 	bne	r3,r2,200292c <FLASH_Verify+0x2e4>
                continue;
            
            bPass = Flash_GetBlockInfo(hFlash, i, &Offset, &Size);
 20027e8:	e0bff717 	ldw	r2,-36(fp)
 20027ec:	117fffcc 	andi	r5,r2,65535
 20027f0:	e1bff904 	addi	r6,fp,-28
 20027f4:	e1fffa04 	addi	r7,fp,-24
 20027f8:	e13ff417 	ldw	r4,-48(fp)
 20027fc:	2001fa40 	call	2001fa4 <Flash_GetBlockInfo>
 2002800:	e0bff815 	stw	r2,-32(fp)
            if (!bPass)
 2002804:	e0bff817 	ldw	r2,-32(fp)
 2002808:	1005003a 	cmpeq	r2,r2,zero
 200280c:	1000471e 	bne	r2,zero,200292c <FLASH_Verify+0x2e4>
                continue;
                
            if (bShowMessage)            
 2002810:	e0bffd17 	ldw	r2,-12(fp)
 2002814:	1005003a 	cmpeq	r2,r2,zero
 2002818:	1000071e 	bne	r2,zero,2002838 <FLASH_Verify+0x1f0>
                printf("Write Block[%d/%d], size=%d\r\n", i, BlockNum, (int)Size);
 200281c:	e0bffa17 	ldw	r2,-24(fp)
 2002820:	100f883a 	mov	r7,r2
 2002824:	01008074 	movhi	r4,513
 2002828:	2101db04 	addi	r4,r4,1900
 200282c:	e17ff717 	ldw	r5,-36(fp)
 2002830:	e1bff517 	ldw	r6,-44(fp)
 2002834:	2004b1c0 	call	2004b1c <printf>
            nWriteSizeSum = 0;
 2002838:	e03ff015 	stw	zero,-64(fp)
            while(nWriteSizeSum < Size && bPass){
 200283c:	00003506 	br	2002914 <FLASH_Verify+0x2cc>
                // cal write size
                nWriteSize = nBufSize;
 2002840:	e0bff117 	ldw	r2,-60(fp)
 2002844:	e0bfef15 	stw	r2,-68(fp)
                if (nWriteSize > (Size - nWriteSizeSum))
 2002848:	e13fef17 	ldw	r4,-68(fp)
 200284c:	e0fffa17 	ldw	r3,-24(fp)
 2002850:	e0bff017 	ldw	r2,-64(fp)
 2002854:	1885c83a 	sub	r2,r3,r2
 2002858:	1100042e 	bgeu	r2,r4,200286c <FLASH_Verify+0x224>
                    nWriteSize = Size - nWriteSizeSum;
 200285c:	e0bffa17 	ldw	r2,-24(fp)
 2002860:	e0fff017 	ldw	r3,-64(fp)
 2002864:	10c5c83a 	sub	r2,r2,r3
 2002868:	e0bfef15 	stw	r2,-68(fp)
                // fill data
                for(k=0;k<nWriteSize;k++){
 200286c:	e03ff615 	stw	zero,-40(fp)
 2002870:	00000c06 	br	20028a4 <FLASH_Verify+0x25c>
                    *(pBuf+k) = Cnt++;
 2002874:	e0bff617 	ldw	r2,-40(fp)
 2002878:	1007883a 	mov	r3,r2
 200287c:	e0bff317 	ldw	r2,-52(fp)
 2002880:	1887883a 	add	r3,r3,r2
 2002884:	e0bff203 	ldbu	r2,-56(fp)
 2002888:	18800005 	stb	r2,0(r3)
 200288c:	e0bff203 	ldbu	r2,-56(fp)
 2002890:	10800044 	addi	r2,r2,1
 2002894:	e0bff205 	stb	r2,-56(fp)
                // cal write size
                nWriteSize = nBufSize;
                if (nWriteSize > (Size - nWriteSizeSum))
                    nWriteSize = Size - nWriteSizeSum;
                // fill data
                for(k=0;k<nWriteSize;k++){
 2002898:	e0bff617 	ldw	r2,-40(fp)
 200289c:	10800044 	addi	r2,r2,1
 20028a0:	e0bff615 	stw	r2,-40(fp)
 20028a4:	e0fff617 	ldw	r3,-40(fp)
 20028a8:	e0bfef17 	ldw	r2,-68(fp)
 20028ac:	18bff116 	blt	r3,r2,2002874 <FLASH_Verify+0x22c>
                    *(pBuf+k) = Cnt++;
                }                     
                // write data block
                bPass = Flash_Write(hFlash, Offset+nWriteSizeSum, pBuf, nWriteSize);
 20028b0:	e0fff917 	ldw	r3,-28(fp)
 20028b4:	e0bff017 	ldw	r2,-64(fp)
 20028b8:	188b883a 	add	r5,r3,r2
 20028bc:	e1ffef17 	ldw	r7,-68(fp)
 20028c0:	e13ff417 	ldw	r4,-48(fp)
 20028c4:	e1bff317 	ldw	r6,-52(fp)
 20028c8:	20021980 	call	2002198 <Flash_Write>
 20028cc:	e0bff815 	stw	r2,-32(fp)
                if (bShowMessage && !bPass)            
 20028d0:	e0bffd17 	ldw	r2,-12(fp)
 20028d4:	1005003a 	cmpeq	r2,r2,zero
 20028d8:	1000081e 	bne	r2,zero,20028fc <FLASH_Verify+0x2b4>
 20028dc:	e0bff817 	ldw	r2,-32(fp)
 20028e0:	1004c03a 	cmpne	r2,r2,zero
 20028e4:	1000051e 	bne	r2,zero,20028fc <FLASH_Verify+0x2b4>
                    printf("[Error] Write Block[%d/%d] NG\r\n", i, BlockNum);
 20028e8:	01008074 	movhi	r4,513
 20028ec:	2101e304 	addi	r4,r4,1932
 20028f0:	e17ff717 	ldw	r5,-36(fp)
 20028f4:	e1bff517 	ldw	r6,-44(fp)
 20028f8:	2004b1c0 	call	2004b1c <printf>
                //
                usleep(20*1000);
 20028fc:	01138804 	movi	r4,20000
 2002900:	200da6c0 	call	200da6c <usleep>
                //
                nWriteSizeSum += nWriteSize;
 2002904:	e0bff017 	ldw	r2,-64(fp)
 2002908:	e0ffef17 	ldw	r3,-68(fp)
 200290c:	10c5883a 	add	r2,r2,r3
 2002910:	e0bff015 	stw	r2,-64(fp)
                continue;
                
            if (bShowMessage)            
                printf("Write Block[%d/%d], size=%d\r\n", i, BlockNum, (int)Size);
            nWriteSizeSum = 0;
            while(nWriteSizeSum < Size && bPass){
 2002914:	e0fff017 	ldw	r3,-64(fp)
 2002918:	e0bffa17 	ldw	r2,-24(fp)
 200291c:	1880032e 	bgeu	r3,r2,200292c <FLASH_Verify+0x2e4>
 2002920:	e0bff817 	ldw	r2,-32(fp)
 2002924:	1004c03a 	cmpne	r2,r2,zero
 2002928:	103fc51e 	bne	r2,zero,2002840 <FLASH_Verify+0x1f8>
    }        
    
    //===== write
    if (bPass){
        Cnt = InitValue;
        for(i=0;i<BlockNum && bPass;i++){
 200292c:	e0bff717 	ldw	r2,-36(fp)
 2002930:	10800044 	addi	r2,r2,1
 2002934:	e0bff715 	stw	r2,-36(fp)
 2002938:	e0fff717 	ldw	r3,-36(fp)
 200293c:	e0bff517 	ldw	r2,-44(fp)
 2002940:	1880030e 	bge	r3,r2,2002950 <FLASH_Verify+0x308>
 2002944:	e0bff817 	ldw	r2,-32(fp)
 2002948:	1004c03a 	cmpne	r2,r2,zero
 200294c:	103f9c1e 	bne	r2,zero,20027c0 <FLASH_Verify+0x178>
                nWriteSizeSum += nWriteSize;
            }
        }
    }
  
    if (bPass){
 2002950:	e0bff817 	ldw	r2,-32(fp)
 2002954:	1005003a 	cmpeq	r2,r2,zero
 2002958:	1000071e 	bne	r2,zero,2002978 <FLASH_Verify+0x330>
        if (bShowMessage)      
 200295c:	e0bffd17 	ldw	r2,-12(fp)
 2002960:	1005003a 	cmpeq	r2,r2,zero
 2002964:	1000031e 	bne	r2,zero,2002974 <FLASH_Verify+0x32c>
            printf("alt_dcache_flush_all\r\n");
 2002968:	01008074 	movhi	r4,513
 200296c:	2101eb04 	addi	r4,r4,1964
 2002970:	2004c340 	call	2004c34 <puts>
        alt_dcache_flush_all();
 2002974:	200cfb00 	call	200cfb0 <alt_dcache_flush_all>
    }        
      
    //===== read & verify
    if (bPass){
 2002978:	e0bff817 	ldw	r2,-32(fp)
 200297c:	1005003a 	cmpeq	r2,r2,zero
 2002980:	10008b1e 	bne	r2,zero,2002bb0 <FLASH_Verify+0x568>
        Cnt = InitValue;
 2002984:	e0bffc03 	ldbu	r2,-16(fp)
 2002988:	e0bff205 	stb	r2,-56(fp)
        for(i=0;i<BlockNum && bPass;i++){
 200298c:	e03ff715 	stw	zero,-36(fp)
 2002990:	00008106 	br	2002b98 <FLASH_Verify+0x550>
            if (bQuickVerify && (i !=0 )&& (i != (BlockNum-1)))
 2002994:	e0bffe17 	ldw	r2,-8(fp)
 2002998:	1005003a 	cmpeq	r2,r2,zero
 200299c:	1000071e 	bne	r2,zero,20029bc <FLASH_Verify+0x374>
 20029a0:	e0bff717 	ldw	r2,-36(fp)
 20029a4:	1005003a 	cmpeq	r2,r2,zero
 20029a8:	1000041e 	bne	r2,zero,20029bc <FLASH_Verify+0x374>
 20029ac:	e0bff517 	ldw	r2,-44(fp)
 20029b0:	10ffffc4 	addi	r3,r2,-1
 20029b4:	e0bff717 	ldw	r2,-36(fp)
 20029b8:	1880741e 	bne	r3,r2,2002b8c <FLASH_Verify+0x544>
                continue;
            
            bPass = Flash_GetBlockInfo(hFlash, i, &Offset, &Size);
 20029bc:	e0bff717 	ldw	r2,-36(fp)
 20029c0:	117fffcc 	andi	r5,r2,65535
 20029c4:	e1bff904 	addi	r6,fp,-28
 20029c8:	e1fffa04 	addi	r7,fp,-24
 20029cc:	e13ff417 	ldw	r4,-48(fp)
 20029d0:	2001fa40 	call	2001fa4 <Flash_GetBlockInfo>
 20029d4:	e0bff815 	stw	r2,-32(fp)
            if (!bPass){
 20029d8:	e0bff817 	ldw	r2,-32(fp)
 20029dc:	1004c03a 	cmpne	r2,r2,zero
 20029e0:	1000081e 	bne	r2,zero,2002a04 <FLASH_Verify+0x3bc>
                if (bShowMessage)      
 20029e4:	e0bffd17 	ldw	r2,-12(fp)
 20029e8:	1005003a 	cmpeq	r2,r2,zero
 20029ec:	1000671e 	bne	r2,zero,2002b8c <FLASH_Verify+0x544>
                    printf("[Error] Flash_GetBlockInfo at block %d\r\n", i);
 20029f0:	01008074 	movhi	r4,513
 20029f4:	2101f104 	addi	r4,r4,1988
 20029f8:	e17ff717 	ldw	r5,-36(fp)
 20029fc:	2004b1c0 	call	2004b1c <printf>
                continue;
 2002a00:	00006206 	br	2002b8c <FLASH_Verify+0x544>
            }    
            if (bShowMessage)            
 2002a04:	e0bffd17 	ldw	r2,-12(fp)
 2002a08:	1005003a 	cmpeq	r2,r2,zero
 2002a0c:	1000071e 	bne	r2,zero,2002a2c <FLASH_Verify+0x3e4>
                printf("Read Block[%d/%d], size=%d\r\n", i, BlockNum, (int)Size);
 2002a10:	e0bffa17 	ldw	r2,-24(fp)
 2002a14:	100f883a 	mov	r7,r2
 2002a18:	01008074 	movhi	r4,513
 2002a1c:	2101fc04 	addi	r4,r4,2032
 2002a20:	e17ff717 	ldw	r5,-36(fp)
 2002a24:	e1bff517 	ldw	r6,-44(fp)
 2002a28:	2004b1c0 	call	2004b1c <printf>
            nReadSizeSum = 0;
 2002a2c:	e03fee15 	stw	zero,-72(fp)
            while(nReadSizeSum < Size && bPass){
 2002a30:	00005006 	br	2002b74 <FLASH_Verify+0x52c>
                // cal write size
                nReadSize = nBufSize;
 2002a34:	e0bff117 	ldw	r2,-60(fp)
 2002a38:	e0bfed15 	stw	r2,-76(fp)
                if (nReadSize > (Size - nReadSizeSum))
 2002a3c:	e13fed17 	ldw	r4,-76(fp)
 2002a40:	e0fffa17 	ldw	r3,-24(fp)
 2002a44:	e0bfee17 	ldw	r2,-72(fp)
 2002a48:	1885c83a 	sub	r2,r3,r2
 2002a4c:	1100042e 	bgeu	r2,r4,2002a60 <FLASH_Verify+0x418>
                    nReadSize = Size - nReadSizeSum;
 2002a50:	e0bffa17 	ldw	r2,-24(fp)
 2002a54:	e0ffee17 	ldw	r3,-72(fp)
 2002a58:	10c5c83a 	sub	r2,r2,r3
 2002a5c:	e0bfed15 	stw	r2,-76(fp)
                    
                // read data block
                bPass = Flash_Read(hFlash, Offset+nReadSizeSum, pBuf, nReadSize);
 2002a60:	e0fff917 	ldw	r3,-28(fp)
 2002a64:	e0bfee17 	ldw	r2,-72(fp)
 2002a68:	188b883a 	add	r5,r3,r2
 2002a6c:	e1ffed17 	ldw	r7,-76(fp)
 2002a70:	e13ff417 	ldw	r4,-48(fp)
 2002a74:	e1bff317 	ldw	r6,-52(fp)
 2002a78:	20020e00 	call	20020e0 <Flash_Read>
 2002a7c:	e0bff815 	stw	r2,-32(fp)
                if (!bPass){
 2002a80:	e0bff817 	ldw	r2,-32(fp)
 2002a84:	1004c03a 	cmpne	r2,r2,zero
 2002a88:	10000c1e 	bne	r2,zero,2002abc <FLASH_Verify+0x474>
                    if (bShowMessage)      
 2002a8c:	e0bffd17 	ldw	r2,-12(fp)
 2002a90:	1005003a 	cmpeq	r2,r2,zero
 2002a94:	1000331e 	bne	r2,zero,2002b64 <FLASH_Verify+0x51c>
                        printf("[Error] Flash_Read fail at block-offset %d-%d\r\n", i, (int)Offset+nReadSizeSum);
 2002a98:	e0bff917 	ldw	r2,-28(fp)
 2002a9c:	1007883a 	mov	r3,r2
 2002aa0:	e0bfee17 	ldw	r2,-72(fp)
 2002aa4:	188d883a 	add	r6,r3,r2
 2002aa8:	01008074 	movhi	r4,513
 2002aac:	21020404 	addi	r4,r4,2064
 2002ab0:	e17ff717 	ldw	r5,-36(fp)
 2002ab4:	2004b1c0 	call	2004b1c <printf>
 2002ab8:	00002a06 	br	2002b64 <FLASH_Verify+0x51c>
                }else{
                    // verify
                    // verify data
                    for(k=0;k<nReadSize && bPass;k++){
 2002abc:	e03ff615 	stw	zero,-40(fp)
 2002ac0:	00002206 	br	2002b4c <FLASH_Verify+0x504>
                        if (*(pBuf+k) != Cnt){
 2002ac4:	e0bff617 	ldw	r2,-40(fp)
 2002ac8:	1007883a 	mov	r3,r2
 2002acc:	e0bff317 	ldw	r2,-52(fp)
 2002ad0:	1885883a 	add	r2,r3,r2
 2002ad4:	10800003 	ldbu	r2,0(r2)
 2002ad8:	10c03fcc 	andi	r3,r2,255
 2002adc:	e0bff203 	ldbu	r2,-56(fp)
 2002ae0:	18801426 	beq	r3,r2,2002b34 <FLASH_Verify+0x4ec>
                            if (bShowMessage)      
 2002ae4:	e0bffd17 	ldw	r2,-12(fp)
 2002ae8:	1005003a 	cmpeq	r2,r2,zero
 2002aec:	10000f1e 	bne	r2,zero,2002b2c <FLASH_Verify+0x4e4>
                                printf("[Error] Verify fail, block:%d, index:%d, read=%Xh, expected=%Xh\r\n", i, nReadSizeSum+k, *(pBuf+k), Cnt);
 2002af0:	e0ffee17 	ldw	r3,-72(fp)
 2002af4:	e0bff617 	ldw	r2,-40(fp)
 2002af8:	188d883a 	add	r6,r3,r2
 2002afc:	e0bff617 	ldw	r2,-40(fp)
 2002b00:	1007883a 	mov	r3,r2
 2002b04:	e0bff317 	ldw	r2,-52(fp)
 2002b08:	1885883a 	add	r2,r3,r2
 2002b0c:	10800003 	ldbu	r2,0(r2)
 2002b10:	11c03fcc 	andi	r7,r2,255
 2002b14:	e0bff203 	ldbu	r2,-56(fp)
 2002b18:	d8800015 	stw	r2,0(sp)
 2002b1c:	01008074 	movhi	r4,513
 2002b20:	21021004 	addi	r4,r4,2112
 2002b24:	e17ff717 	ldw	r5,-36(fp)
 2002b28:	2004b1c0 	call	2004b1c <printf>
                            bPass = FALSE;
 2002b2c:	e03ff815 	stw	zero,-32(fp)
 2002b30:	00000306 	br	2002b40 <FLASH_Verify+0x4f8>
                        }else{    
                            Cnt++;
 2002b34:	e0bff203 	ldbu	r2,-56(fp)
 2002b38:	10800044 	addi	r2,r2,1
 2002b3c:	e0bff205 	stb	r2,-56(fp)
                    if (bShowMessage)      
                        printf("[Error] Flash_Read fail at block-offset %d-%d\r\n", i, (int)Offset+nReadSizeSum);
                }else{
                    // verify
                    // verify data
                    for(k=0;k<nReadSize && bPass;k++){
 2002b40:	e0bff617 	ldw	r2,-40(fp)
 2002b44:	10800044 	addi	r2,r2,1
 2002b48:	e0bff615 	stw	r2,-40(fp)
 2002b4c:	e0fff617 	ldw	r3,-40(fp)
 2002b50:	e0bfed17 	ldw	r2,-76(fp)
 2002b54:	1880030e 	bge	r3,r2,2002b64 <FLASH_Verify+0x51c>
 2002b58:	e0bff817 	ldw	r2,-32(fp)
 2002b5c:	1004c03a 	cmpne	r2,r2,zero
 2002b60:	103fd81e 	bne	r2,zero,2002ac4 <FLASH_Verify+0x47c>
                            Cnt++;
                        }
                    }                     
                }                        
                //
                nReadSizeSum += nReadSize;
 2002b64:	e0bfee17 	ldw	r2,-72(fp)
 2002b68:	e0ffed17 	ldw	r3,-76(fp)
 2002b6c:	10c5883a 	add	r2,r2,r3
 2002b70:	e0bfee15 	stw	r2,-72(fp)
                continue;
            }    
            if (bShowMessage)            
                printf("Read Block[%d/%d], size=%d\r\n", i, BlockNum, (int)Size);
            nReadSizeSum = 0;
            while(nReadSizeSum < Size && bPass){
 2002b74:	e0ffee17 	ldw	r3,-72(fp)
 2002b78:	e0bffa17 	ldw	r2,-24(fp)
 2002b7c:	1880032e 	bgeu	r3,r2,2002b8c <FLASH_Verify+0x544>
 2002b80:	e0bff817 	ldw	r2,-32(fp)
 2002b84:	1004c03a 	cmpne	r2,r2,zero
 2002b88:	103faa1e 	bne	r2,zero,2002a34 <FLASH_Verify+0x3ec>
    }        
      
    //===== read & verify
    if (bPass){
        Cnt = InitValue;
        for(i=0;i<BlockNum && bPass;i++){
 2002b8c:	e0bff717 	ldw	r2,-36(fp)
 2002b90:	10800044 	addi	r2,r2,1
 2002b94:	e0bff715 	stw	r2,-36(fp)
 2002b98:	e0fff717 	ldw	r3,-36(fp)
 2002b9c:	e0bff517 	ldw	r2,-44(fp)
 2002ba0:	1880030e 	bge	r3,r2,2002bb0 <FLASH_Verify+0x568>
 2002ba4:	e0bff817 	ldw	r2,-32(fp)
 2002ba8:	1004c03a 	cmpne	r2,r2,zero
 2002bac:	103f791e 	bne	r2,zero,2002994 <FLASH_Verify+0x34c>
                nReadSizeSum += nReadSize;
            }
        }  
    }
    
    if (pBuf)
 2002bb0:	e0bff317 	ldw	r2,-52(fp)
 2002bb4:	1005003a 	cmpeq	r2,r2,zero
 2002bb8:	1000021e 	bne	r2,zero,2002bc4 <FLASH_Verify+0x57c>
        free(pBuf);
 2002bbc:	e13ff317 	ldw	r4,-52(fp)
 2002bc0:	20043b40 	call	20043b4 <free>
    
    if (hFlash)
 2002bc4:	e0bff417 	ldw	r2,-48(fp)
 2002bc8:	1005003a 	cmpeq	r2,r2,zero
 2002bcc:	1000021e 	bne	r2,zero,2002bd8 <FLASH_Verify+0x590>
        Flash_Close(hFlash);
 2002bd0:	e13ff417 	ldw	r4,-48(fp)
 2002bd4:	2001f4c0 	call	2001f4c <Flash_Close>
    
    //
    return bPass;
 2002bd8:	e0bff817 	ldw	r2,-32(fp)
 2002bdc:	e0bfff15 	stw	r2,-4(fp)
 2002be0:	e0bfff17 	ldw	r2,-4(fp)
}
 2002be4:	e037883a 	mov	sp,fp
 2002be8:	dfc00117 	ldw	ra,4(sp)
 2002bec:	df000017 	ldw	fp,0(sp)
 2002bf0:	dec00204 	addi	sp,sp,8
 2002bf4:	f800283a 	ret

02002bf8 <SPI_Init>:

typedef enum{
        SPI_STATUS_FLAG_DONE = 0x01
}SPI_STATUS_FLAG;

void SPI_Init(alt_u32 spi_base){
 2002bf8:	defffe04 	addi	sp,sp,-8
 2002bfc:	df000115 	stw	fp,4(sp)
 2002c00:	df000104 	addi	fp,sp,4
 2002c04:	e13fff15 	stw	r4,-4(fp)
    // clear fifo
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);
 2002c08:	e0bfff17 	ldw	r2,-4(fp)
 2002c0c:	10800104 	addi	r2,r2,4
 2002c10:	10000035 	stwio	zero,0(r2)
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLAG_CLEAR_FIFO);
 2002c14:	e0bfff17 	ldw	r2,-4(fp)
 2002c18:	10800104 	addi	r2,r2,4
 2002c1c:	1007883a 	mov	r3,r2
 2002c20:	00800104 	movi	r2,4
 2002c24:	18800035 	stwio	r2,0(r3)
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);
 2002c28:	e0bfff17 	ldw	r2,-4(fp)
 2002c2c:	10800104 	addi	r2,r2,4
 2002c30:	10000035 	stwio	zero,0(r2)
   
}
 2002c34:	e037883a 	mov	sp,fp
 2002c38:	df000017 	ldw	fp,0(sp)
 2002c3c:	dec00104 	addi	sp,sp,4
 2002c40:	f800283a 	ret

02002c44 <SPI_MultipleWrite>:


bool SPI_MultipleWrite(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 szData[], alt_u8 nByteNum){
 2002c44:	defff504 	addi	sp,sp,-44
 2002c48:	dfc00a15 	stw	ra,40(sp)
 2002c4c:	df000915 	stw	fp,36(sp)
 2002c50:	df000904 	addi	fp,sp,36
 2002c54:	e13ffb15 	stw	r4,-20(fp)
 2002c58:	e1bffd15 	stw	r6,-12(fp)
 2002c5c:	e17ffc05 	stb	r5,-16(fp)
 2002c60:	e1fffe05 	stb	r7,-8(fp)
    alt_u8 Status;
    const int nMaxTry = 100;
 2002c64:	00801904 	movi	r2,100
 2002c68:	e0bff915 	stw	r2,-28(fp)
    int nTryCnt = 0;
 2002c6c:	e03ff815 	stw	zero,-32(fp)
    int i;
    
    // make sure processs is stoped, and set write flag
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);
 2002c70:	e0bffb17 	ldw	r2,-20(fp)
 2002c74:	10800104 	addi	r2,r2,4
 2002c78:	10000035 	stwio	zero,0(r2)
    
    // set register index
    IOWR(spi_base, SPI_REG_INDEX, RegIndex);
 2002c7c:	e0bffb17 	ldw	r2,-20(fp)
 2002c80:	10800204 	addi	r2,r2,8
 2002c84:	e0fffc03 	ldbu	r3,-16(fp)
 2002c88:	10c00035 	stwio	r3,0(r2)
    
    // write data to fifo
    for(i=0;i<nByteNum;i++)
 2002c8c:	e03ff715 	stw	zero,-36(fp)
 2002c90:	00000c06 	br	2002cc4 <SPI_MultipleWrite+0x80>
        IOWR(spi_base, SPI_REG_DATA, szData[i]);
 2002c94:	e13ffb17 	ldw	r4,-20(fp)
 2002c98:	e0bff717 	ldw	r2,-36(fp)
 2002c9c:	1007883a 	mov	r3,r2
 2002ca0:	e0bffd17 	ldw	r2,-12(fp)
 2002ca4:	1885883a 	add	r2,r3,r2
 2002ca8:	10800003 	ldbu	r2,0(r2)
 2002cac:	10c03fcc 	andi	r3,r2,255
 2002cb0:	2005883a 	mov	r2,r4
 2002cb4:	10c00035 	stwio	r3,0(r2)
    
    // set register index
    IOWR(spi_base, SPI_REG_INDEX, RegIndex);
    
    // write data to fifo
    for(i=0;i<nByteNum;i++)
 2002cb8:	e0bff717 	ldw	r2,-36(fp)
 2002cbc:	10800044 	addi	r2,r2,1
 2002cc0:	e0bff715 	stw	r2,-36(fp)
 2002cc4:	e0fffe03 	ldbu	r3,-8(fp)
 2002cc8:	e0bff717 	ldw	r2,-36(fp)
 2002ccc:	10fff116 	blt	r2,r3,2002c94 <SPI_MultipleWrite+0x50>
        IOWR(spi_base, SPI_REG_DATA, szData[i]);
    
    // start
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLAG_STATR);
 2002cd0:	e0bffb17 	ldw	r2,-20(fp)
 2002cd4:	10800104 	addi	r2,r2,4
 2002cd8:	1007883a 	mov	r3,r2
 2002cdc:	00800044 	movi	r2,1
 2002ce0:	18800035 	stwio	r2,0(r3)
    
    // check status
    usleep(10);
 2002ce4:	01000284 	movi	r4,10
 2002ce8:	200da6c0 	call	200da6c <usleep>
    do{    
        Status = IORD(spi_base, SPI_REG_CTRL_STATUS);
 2002cec:	e0bffb17 	ldw	r2,-20(fp)
 2002cf0:	10800104 	addi	r2,r2,4
 2002cf4:	10800037 	ldwio	r2,0(r2)
 2002cf8:	e0bffa05 	stb	r2,-24(fp)
    }while (!(Status & SPI_STATUS_FLAG_DONE) && (nTryCnt++ < nMaxTry));
 2002cfc:	e0bffa03 	ldbu	r2,-24(fp)
 2002d00:	1080004c 	andi	r2,r2,1
 2002d04:	1004c03a 	cmpne	r2,r2,zero
 2002d08:	10000a1e 	bne	r2,zero,2002d34 <SPI_MultipleWrite+0xf0>
 2002d0c:	e0fff817 	ldw	r3,-32(fp)
 2002d10:	e0bff917 	ldw	r2,-28(fp)
 2002d14:	1884803a 	cmplt	r2,r3,r2
 2002d18:	1007883a 	mov	r3,r2
 2002d1c:	e0bff817 	ldw	r2,-32(fp)
 2002d20:	10800044 	addi	r2,r2,1
 2002d24:	e0bff815 	stw	r2,-32(fp)
 2002d28:	18803fcc 	andi	r2,r3,255
 2002d2c:	1004c03a 	cmpne	r2,r2,zero
 2002d30:	103fee1e 	bne	r2,zero,2002cec <SPI_MultipleWrite+0xa8>
    
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);  //stop
 2002d34:	e0bffb17 	ldw	r2,-20(fp)
 2002d38:	10800104 	addi	r2,r2,4
 2002d3c:	10000035 	stwio	zero,0(r2)
    
    if (Status & SPI_STATUS_FLAG_DONE)
 2002d40:	e0bffa03 	ldbu	r2,-24(fp)
 2002d44:	1080004c 	andi	r2,r2,1
 2002d48:	10803fcc 	andi	r2,r2,255
 2002d4c:	1005003a 	cmpeq	r2,r2,zero
 2002d50:	1000031e 	bne	r2,zero,2002d60 <SPI_MultipleWrite+0x11c>
        return TRUE;
 2002d54:	00800044 	movi	r2,1
 2002d58:	e0bfff15 	stw	r2,-4(fp)
 2002d5c:	00000106 	br	2002d64 <SPI_MultipleWrite+0x120>
    
    return FALSE;
 2002d60:	e03fff15 	stw	zero,-4(fp)
 2002d64:	e0bfff17 	ldw	r2,-4(fp)
}
 2002d68:	e037883a 	mov	sp,fp
 2002d6c:	dfc00117 	ldw	ra,4(sp)
 2002d70:	df000017 	ldw	fp,0(sp)
 2002d74:	dec00204 	addi	sp,sp,8
 2002d78:	f800283a 	ret

02002d7c <SPI_Write>:

bool SPI_Write(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 Value){
 2002d7c:	defffb04 	addi	sp,sp,-20
 2002d80:	dfc00415 	stw	ra,16(sp)
 2002d84:	df000315 	stw	fp,12(sp)
 2002d88:	df000304 	addi	fp,sp,12
 2002d8c:	e13ffd15 	stw	r4,-12(fp)
 2002d90:	e17ffe05 	stb	r5,-8(fp)
 2002d94:	e1bfff05 	stb	r6,-4(fp)
    return SPI_MultipleWrite(spi_base, RegIndex, &Value, 1);
 2002d98:	e17ffe03 	ldbu	r5,-8(fp)
 2002d9c:	e1bfff04 	addi	r6,fp,-4
 2002da0:	e13ffd17 	ldw	r4,-12(fp)
 2002da4:	01c00044 	movi	r7,1
 2002da8:	2002c440 	call	2002c44 <SPI_MultipleWrite>
}    
 2002dac:	e037883a 	mov	sp,fp
 2002db0:	dfc00117 	ldw	ra,4(sp)
 2002db4:	df000017 	ldw	fp,0(sp)
 2002db8:	dec00204 	addi	sp,sp,8
 2002dbc:	f800283a 	ret

02002dc0 <SPI_MultipleRead>:

bool SPI_MultipleRead(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 szBuf[], alt_u8 nByteNum){
 2002dc0:	defff504 	addi	sp,sp,-44
 2002dc4:	dfc00a15 	stw	ra,40(sp)
 2002dc8:	df000915 	stw	fp,36(sp)
 2002dcc:	df000904 	addi	fp,sp,36
 2002dd0:	e13ffb15 	stw	r4,-20(fp)
 2002dd4:	e1bffd15 	stw	r6,-12(fp)
 2002dd8:	e17ffc05 	stb	r5,-16(fp)
 2002ddc:	e1fffe05 	stb	r7,-8(fp)
    alt_u8 Status, Value8;
    const int nMaxTry = 100;
 2002de0:	00801904 	movi	r2,100
 2002de4:	e0bff915 	stw	r2,-28(fp)
    int nTryCnt = 0;
 2002de8:	e03ff815 	stw	zero,-32(fp)
    int i;
    
    // make sure processs is stoped, and set read flag
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLGA_REG_READ);
 2002dec:	e0bffb17 	ldw	r2,-20(fp)
 2002df0:	10800104 	addi	r2,r2,4
 2002df4:	1007883a 	mov	r3,r2
 2002df8:	00800084 	movi	r2,2
 2002dfc:	18800035 	stwio	r2,0(r3)
    

    // set register index
    IOWR(spi_base, SPI_REG_INDEX, RegIndex);
 2002e00:	e0bffb17 	ldw	r2,-20(fp)
 2002e04:	10800204 	addi	r2,r2,8
 2002e08:	e0fffc03 	ldbu	r3,-16(fp)
 2002e0c:	10c00035 	stwio	r3,0(r2)

    // set read byte count
    IOWR(spi_base, SPI_REG_READ_NUM, nByteNum-1);
 2002e10:	e0bffb17 	ldw	r2,-20(fp)
 2002e14:	11000304 	addi	r4,r2,12
 2002e18:	e0bffe03 	ldbu	r2,-8(fp)
 2002e1c:	10ffffc4 	addi	r3,r2,-1
 2002e20:	2005883a 	mov	r2,r4
 2002e24:	10c00035 	stwio	r3,0(r2)
    
    // start
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLAG_STATR | SPI_FLGA_REG_READ);
 2002e28:	e0bffb17 	ldw	r2,-20(fp)
 2002e2c:	10800104 	addi	r2,r2,4
 2002e30:	1007883a 	mov	r3,r2
 2002e34:	008000c4 	movi	r2,3
 2002e38:	18800035 	stwio	r2,0(r3)
    
    // check status
    usleep(10);
 2002e3c:	01000284 	movi	r4,10
 2002e40:	200da6c0 	call	200da6c <usleep>
    do{    
        Status = IORD(spi_base, SPI_REG_CTRL_STATUS);
 2002e44:	e0bffb17 	ldw	r2,-20(fp)
 2002e48:	10800104 	addi	r2,r2,4
 2002e4c:	10800037 	ldwio	r2,0(r2)
 2002e50:	e0bffa45 	stb	r2,-23(fp)
    }while (!(Status & SPI_STATUS_FLAG_DONE) && (nTryCnt++ < nMaxTry));
 2002e54:	e0bffa43 	ldbu	r2,-23(fp)
 2002e58:	1080004c 	andi	r2,r2,1
 2002e5c:	1004c03a 	cmpne	r2,r2,zero
 2002e60:	10000a1e 	bne	r2,zero,2002e8c <SPI_MultipleRead+0xcc>
 2002e64:	e0fff817 	ldw	r3,-32(fp)
 2002e68:	e0bff917 	ldw	r2,-28(fp)
 2002e6c:	1884803a 	cmplt	r2,r3,r2
 2002e70:	1007883a 	mov	r3,r2
 2002e74:	e0bff817 	ldw	r2,-32(fp)
 2002e78:	10800044 	addi	r2,r2,1
 2002e7c:	e0bff815 	stw	r2,-32(fp)
 2002e80:	18803fcc 	andi	r2,r3,255
 2002e84:	1004c03a 	cmpne	r2,r2,zero
 2002e88:	103fee1e 	bne	r2,zero,2002e44 <SPI_MultipleRead+0x84>
    
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);  //stop
 2002e8c:	e0bffb17 	ldw	r2,-20(fp)
 2002e90:	10800104 	addi	r2,r2,4
 2002e94:	10000035 	stwio	zero,0(r2)
    
    if (Status & SPI_STATUS_FLAG_DONE){
 2002e98:	e0bffa43 	ldbu	r2,-23(fp)
 2002e9c:	1080004c 	andi	r2,r2,1
 2002ea0:	10803fcc 	andi	r2,r2,255
 2002ea4:	1005003a 	cmpeq	r2,r2,zero
 2002ea8:	1000141e 	bne	r2,zero,2002efc <SPI_MultipleRead+0x13c>
        for(i=0;i<nByteNum;i++){
 2002eac:	e03ff715 	stw	zero,-36(fp)
 2002eb0:	00000c06 	br	2002ee4 <SPI_MultipleRead+0x124>
            Value8 = IORD(spi_base, SPI_REG_DATA);
 2002eb4:	e0bffb17 	ldw	r2,-20(fp)
 2002eb8:	10800037 	ldwio	r2,0(r2)
 2002ebc:	e0bffa05 	stb	r2,-24(fp)
            szBuf[i] = Value8;
 2002ec0:	e0bff717 	ldw	r2,-36(fp)
 2002ec4:	1007883a 	mov	r3,r2
 2002ec8:	e0bffd17 	ldw	r2,-12(fp)
 2002ecc:	1887883a 	add	r3,r3,r2
 2002ed0:	e0bffa03 	ldbu	r2,-24(fp)
 2002ed4:	18800005 	stb	r2,0(r3)
    }while (!(Status & SPI_STATUS_FLAG_DONE) && (nTryCnt++ < nMaxTry));
    
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);  //stop
    
    if (Status & SPI_STATUS_FLAG_DONE){
        for(i=0;i<nByteNum;i++){
 2002ed8:	e0bff717 	ldw	r2,-36(fp)
 2002edc:	10800044 	addi	r2,r2,1
 2002ee0:	e0bff715 	stw	r2,-36(fp)
 2002ee4:	e0fffe03 	ldbu	r3,-8(fp)
 2002ee8:	e0bff717 	ldw	r2,-36(fp)
 2002eec:	10fff116 	blt	r2,r3,2002eb4 <SPI_MultipleRead+0xf4>
            Value8 = IORD(spi_base, SPI_REG_DATA);
            szBuf[i] = Value8;
        }
        return TRUE;
 2002ef0:	00800044 	movi	r2,1
 2002ef4:	e0bfff15 	stw	r2,-4(fp)
 2002ef8:	00000106 	br	2002f00 <SPI_MultipleRead+0x140>
    }        
    return FALSE;
 2002efc:	e03fff15 	stw	zero,-4(fp)
 2002f00:	e0bfff17 	ldw	r2,-4(fp)
}
 2002f04:	e037883a 	mov	sp,fp
 2002f08:	dfc00117 	ldw	ra,4(sp)
 2002f0c:	df000017 	ldw	fp,0(sp)
 2002f10:	dec00204 	addi	sp,sp,8
 2002f14:	f800283a 	ret

02002f18 <SPI_Read>:

bool SPI_Read(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 *pBuf){
 2002f18:	defffb04 	addi	sp,sp,-20
 2002f1c:	dfc00415 	stw	ra,16(sp)
 2002f20:	df000315 	stw	fp,12(sp)
 2002f24:	df000304 	addi	fp,sp,12
 2002f28:	e13ffd15 	stw	r4,-12(fp)
 2002f2c:	e1bfff15 	stw	r6,-4(fp)
 2002f30:	e17ffe05 	stb	r5,-8(fp)
    return SPI_MultipleRead(spi_base, RegIndex, pBuf, 1);
 2002f34:	e17ffe03 	ldbu	r5,-8(fp)
 2002f38:	e13ffd17 	ldw	r4,-12(fp)
 2002f3c:	e1bfff17 	ldw	r6,-4(fp)
 2002f40:	01c00044 	movi	r7,1
 2002f44:	2002dc00 	call	2002dc0 <SPI_MultipleRead>
}
 2002f48:	e037883a 	mov	sp,fp
 2002f4c:	dfc00117 	ldw	ra,4(sp)
 2002f50:	df000017 	ldw	fp,0(sp)
 2002f54:	dec00204 	addi	sp,sp,8
 2002f58:	f800283a 	ret

02002f5c <__divsf3>:
 2002f5c:	defff304 	addi	sp,sp,-52
 2002f60:	dc400b15 	stw	r17,44(sp)
 2002f64:	dc400204 	addi	r17,sp,8
 2002f68:	dc000a15 	stw	r16,40(sp)
 2002f6c:	d9000015 	stw	r4,0(sp)
 2002f70:	d9400115 	stw	r5,4(sp)
 2002f74:	d809883a 	mov	r4,sp
 2002f78:	880b883a 	mov	r5,r17
 2002f7c:	dc000604 	addi	r16,sp,24
 2002f80:	dfc00c15 	stw	ra,48(sp)
 2002f84:	2003e740 	call	2003e74 <__unpack_f>
 2002f88:	d9000104 	addi	r4,sp,4
 2002f8c:	800b883a 	mov	r5,r16
 2002f90:	2003e740 	call	2003e74 <__unpack_f>
 2002f94:	d9000217 	ldw	r4,8(sp)
 2002f98:	00800044 	movi	r2,1
 2002f9c:	01800104 	movi	r6,4
 2002fa0:	11000a2e 	bgeu	r2,r4,2002fcc <__divsf3+0x70>
 2002fa4:	d9400617 	ldw	r5,24(sp)
 2002fa8:	1140432e 	bgeu	r2,r5,20030b8 <__divsf3+0x15c>
 2002fac:	d8800317 	ldw	r2,12(sp)
 2002fb0:	d8c00717 	ldw	r3,28(sp)
 2002fb4:	10c4f03a 	xor	r2,r2,r3
 2002fb8:	d8800315 	stw	r2,12(sp)
 2002fbc:	21800226 	beq	r4,r6,2002fc8 <__divsf3+0x6c>
 2002fc0:	00800084 	movi	r2,2
 2002fc4:	2080101e 	bne	r4,r2,2003008 <__divsf3+0xac>
 2002fc8:	29000726 	beq	r5,r4,2002fe8 <__divsf3+0x8c>
 2002fcc:	8809883a 	mov	r4,r17
 2002fd0:	2003d140 	call	2003d14 <__pack_f>
 2002fd4:	dfc00c17 	ldw	ra,48(sp)
 2002fd8:	dc400b17 	ldw	r17,44(sp)
 2002fdc:	dc000a17 	ldw	r16,40(sp)
 2002fe0:	dec00d04 	addi	sp,sp,52
 2002fe4:	f800283a 	ret
 2002fe8:	01008074 	movhi	r4,513
 2002fec:	21022104 	addi	r4,r4,2180
 2002ff0:	2003d140 	call	2003d14 <__pack_f>
 2002ff4:	dfc00c17 	ldw	ra,48(sp)
 2002ff8:	dc400b17 	ldw	r17,44(sp)
 2002ffc:	dc000a17 	ldw	r16,40(sp)
 2003000:	dec00d04 	addi	sp,sp,52
 2003004:	f800283a 	ret
 2003008:	29802d26 	beq	r5,r6,20030c0 <__divsf3+0x164>
 200300c:	28801a26 	beq	r5,r2,2003078 <__divsf3+0x11c>
 2003010:	d8c00417 	ldw	r3,16(sp)
 2003014:	d8800817 	ldw	r2,32(sp)
 2003018:	d9000517 	ldw	r4,20(sp)
 200301c:	d9800917 	ldw	r6,36(sp)
 2003020:	1885c83a 	sub	r2,r3,r2
 2003024:	d8800415 	stw	r2,16(sp)
 2003028:	2180032e 	bgeu	r4,r6,2003038 <__divsf3+0xdc>
 200302c:	10bfffc4 	addi	r2,r2,-1
 2003030:	d8800415 	stw	r2,16(sp)
 2003034:	2109883a 	add	r4,r4,r4
 2003038:	01500034 	movhi	r5,16384
 200303c:	0007883a 	mov	r3,zero
 2003040:	0005883a 	mov	r2,zero
 2003044:	01c007c4 	movi	r7,31
 2003048:	10800044 	addi	r2,r2,1
 200304c:	21800236 	bltu	r4,r6,2003058 <__divsf3+0xfc>
 2003050:	1946b03a 	or	r3,r3,r5
 2003054:	2189c83a 	sub	r4,r4,r6
 2003058:	280ad07a 	srli	r5,r5,1
 200305c:	2109883a 	add	r4,r4,r4
 2003060:	11fff91e 	bne	r2,r7,2003048 <__divsf3+0xec>
 2003064:	19401fcc 	andi	r5,r3,127
 2003068:	00801004 	movi	r2,64
 200306c:	28800a26 	beq	r5,r2,2003098 <__divsf3+0x13c>
 2003070:	d8c00515 	stw	r3,20(sp)
 2003074:	003fd506 	br	2002fcc <__divsf3+0x70>
 2003078:	8809883a 	mov	r4,r17
 200307c:	d9800215 	stw	r6,8(sp)
 2003080:	2003d140 	call	2003d14 <__pack_f>
 2003084:	dfc00c17 	ldw	ra,48(sp)
 2003088:	dc400b17 	ldw	r17,44(sp)
 200308c:	dc000a17 	ldw	r16,40(sp)
 2003090:	dec00d04 	addi	sp,sp,52
 2003094:	f800283a 	ret
 2003098:	1880200c 	andi	r2,r3,128
 200309c:	103ff41e 	bne	r2,zero,2003070 <__divsf3+0x114>
 20030a0:	203ff326 	beq	r4,zero,2003070 <__divsf3+0x114>
 20030a4:	1947883a 	add	r3,r3,r5
 20030a8:	00bfe004 	movi	r2,-128
 20030ac:	1886703a 	and	r3,r3,r2
 20030b0:	d8c00515 	stw	r3,20(sp)
 20030b4:	003fc506 	br	2002fcc <__divsf3+0x70>
 20030b8:	8009883a 	mov	r4,r16
 20030bc:	003fc406 	br	2002fd0 <__divsf3+0x74>
 20030c0:	8809883a 	mov	r4,r17
 20030c4:	d8000515 	stw	zero,20(sp)
 20030c8:	d8000415 	stw	zero,16(sp)
 20030cc:	003fc006 	br	2002fd0 <__divsf3+0x74>

020030d0 <__muldf3>:
 20030d0:	deffe004 	addi	sp,sp,-128
 20030d4:	dc401815 	stw	r17,96(sp)
 20030d8:	dc400404 	addi	r17,sp,16
 20030dc:	2011883a 	mov	r8,r4
 20030e0:	2813883a 	mov	r9,r5
 20030e4:	dc001715 	stw	r16,92(sp)
 20030e8:	d809883a 	mov	r4,sp
 20030ec:	880b883a 	mov	r5,r17
 20030f0:	dc000904 	addi	r16,sp,36
 20030f4:	dfc01f15 	stw	ra,124(sp)
 20030f8:	da400115 	stw	r9,4(sp)
 20030fc:	d9c00315 	stw	r7,12(sp)
 2003100:	da000015 	stw	r8,0(sp)
 2003104:	d9800215 	stw	r6,8(sp)
 2003108:	ddc01e15 	stw	r23,120(sp)
 200310c:	dd801d15 	stw	r22,116(sp)
 2003110:	dd401c15 	stw	r21,112(sp)
 2003114:	dd001b15 	stw	r20,108(sp)
 2003118:	dcc01a15 	stw	r19,104(sp)
 200311c:	dc801915 	stw	r18,100(sp)
 2003120:	200427c0 	call	200427c <__unpack_d>
 2003124:	d9000204 	addi	r4,sp,8
 2003128:	800b883a 	mov	r5,r16
 200312c:	200427c0 	call	200427c <__unpack_d>
 2003130:	d9000417 	ldw	r4,16(sp)
 2003134:	00800044 	movi	r2,1
 2003138:	1100102e 	bgeu	r2,r4,200317c <__muldf3+0xac>
 200313c:	d8c00917 	ldw	r3,36(sp)
 2003140:	10c0062e 	bgeu	r2,r3,200315c <__muldf3+0x8c>
 2003144:	00800104 	movi	r2,4
 2003148:	20800a26 	beq	r4,r2,2003174 <__muldf3+0xa4>
 200314c:	1880cc26 	beq	r3,r2,2003480 <__muldf3+0x3b0>
 2003150:	00800084 	movi	r2,2
 2003154:	20800926 	beq	r4,r2,200317c <__muldf3+0xac>
 2003158:	1880191e 	bne	r3,r2,20031c0 <__muldf3+0xf0>
 200315c:	d8c00a17 	ldw	r3,40(sp)
 2003160:	d8800517 	ldw	r2,20(sp)
 2003164:	8009883a 	mov	r4,r16
 2003168:	10c4c03a 	cmpne	r2,r2,r3
 200316c:	d8800a15 	stw	r2,40(sp)
 2003170:	00000706 	br	2003190 <__muldf3+0xc0>
 2003174:	00800084 	movi	r2,2
 2003178:	1880c326 	beq	r3,r2,2003488 <__muldf3+0x3b8>
 200317c:	d8800517 	ldw	r2,20(sp)
 2003180:	d8c00a17 	ldw	r3,40(sp)
 2003184:	8809883a 	mov	r4,r17
 2003188:	10c4c03a 	cmpne	r2,r2,r3
 200318c:	d8800515 	stw	r2,20(sp)
 2003190:	2003f680 	call	2003f68 <__pack_d>
 2003194:	dfc01f17 	ldw	ra,124(sp)
 2003198:	ddc01e17 	ldw	r23,120(sp)
 200319c:	dd801d17 	ldw	r22,116(sp)
 20031a0:	dd401c17 	ldw	r21,112(sp)
 20031a4:	dd001b17 	ldw	r20,108(sp)
 20031a8:	dcc01a17 	ldw	r19,104(sp)
 20031ac:	dc801917 	ldw	r18,100(sp)
 20031b0:	dc401817 	ldw	r17,96(sp)
 20031b4:	dc001717 	ldw	r16,92(sp)
 20031b8:	dec02004 	addi	sp,sp,128
 20031bc:	f800283a 	ret
 20031c0:	dd800717 	ldw	r22,28(sp)
 20031c4:	dc800c17 	ldw	r18,48(sp)
 20031c8:	002b883a 	mov	r21,zero
 20031cc:	0023883a 	mov	r17,zero
 20031d0:	a80b883a 	mov	r5,r21
 20031d4:	b00d883a 	mov	r6,r22
 20031d8:	880f883a 	mov	r7,r17
 20031dc:	ddc00817 	ldw	r23,32(sp)
 20031e0:	dcc00d17 	ldw	r19,52(sp)
 20031e4:	9009883a 	mov	r4,r18
 20031e8:	2003b700 	call	2003b70 <__muldi3>
 20031ec:	001b883a 	mov	r13,zero
 20031f0:	680f883a 	mov	r7,r13
 20031f4:	b009883a 	mov	r4,r22
 20031f8:	000b883a 	mov	r5,zero
 20031fc:	980d883a 	mov	r6,r19
 2003200:	b82d883a 	mov	r22,r23
 2003204:	002f883a 	mov	r23,zero
 2003208:	db401615 	stw	r13,88(sp)
 200320c:	d8801315 	stw	r2,76(sp)
 2003210:	d8c01415 	stw	r3,80(sp)
 2003214:	dcc01515 	stw	r19,84(sp)
 2003218:	2003b700 	call	2003b70 <__muldi3>
 200321c:	b00d883a 	mov	r6,r22
 2003220:	000b883a 	mov	r5,zero
 2003224:	9009883a 	mov	r4,r18
 2003228:	b80f883a 	mov	r7,r23
 200322c:	1021883a 	mov	r16,r2
 2003230:	1823883a 	mov	r17,r3
 2003234:	2003b700 	call	2003b70 <__muldi3>
 2003238:	8085883a 	add	r2,r16,r2
 200323c:	140d803a 	cmpltu	r6,r2,r16
 2003240:	88c7883a 	add	r3,r17,r3
 2003244:	30cd883a 	add	r6,r6,r3
 2003248:	1029883a 	mov	r20,r2
 200324c:	302b883a 	mov	r21,r6
 2003250:	da801317 	ldw	r10,76(sp)
 2003254:	dac01417 	ldw	r11,80(sp)
 2003258:	db001517 	ldw	r12,84(sp)
 200325c:	db401617 	ldw	r13,88(sp)
 2003260:	3440612e 	bgeu	r6,r17,20033e8 <__muldf3+0x318>
 2003264:	0009883a 	mov	r4,zero
 2003268:	5105883a 	add	r2,r10,r4
 200326c:	128d803a 	cmpltu	r6,r2,r10
 2003270:	5d07883a 	add	r3,r11,r20
 2003274:	30cd883a 	add	r6,r6,r3
 2003278:	0021883a 	mov	r16,zero
 200327c:	04400044 	movi	r17,1
 2003280:	1025883a 	mov	r18,r2
 2003284:	3027883a 	mov	r19,r6
 2003288:	32c06236 	bltu	r6,r11,2003414 <__muldf3+0x344>
 200328c:	59807a26 	beq	r11,r6,2003478 <__muldf3+0x3a8>
 2003290:	680b883a 	mov	r5,r13
 2003294:	b80f883a 	mov	r7,r23
 2003298:	6009883a 	mov	r4,r12
 200329c:	b00d883a 	mov	r6,r22
 20032a0:	2003b700 	call	2003b70 <__muldi3>
 20032a4:	1009883a 	mov	r4,r2
 20032a8:	000f883a 	mov	r7,zero
 20032ac:	1545883a 	add	r2,r2,r21
 20032b0:	1111803a 	cmpltu	r8,r2,r4
 20032b4:	19c7883a 	add	r3,r3,r7
 20032b8:	40c7883a 	add	r3,r8,r3
 20032bc:	88cb883a 	add	r5,r17,r3
 20032c0:	d8c00617 	ldw	r3,24(sp)
 20032c4:	8089883a 	add	r4,r16,r2
 20032c8:	d8800b17 	ldw	r2,44(sp)
 20032cc:	18c00104 	addi	r3,r3,4
 20032d0:	240d803a 	cmpltu	r6,r4,r16
 20032d4:	10c7883a 	add	r3,r2,r3
 20032d8:	2013883a 	mov	r9,r4
 20032dc:	d8800a17 	ldw	r2,40(sp)
 20032e0:	d9000517 	ldw	r4,20(sp)
 20032e4:	314d883a 	add	r6,r6,r5
 20032e8:	3015883a 	mov	r10,r6
 20032ec:	2088c03a 	cmpne	r4,r4,r2
 20032f0:	00880034 	movhi	r2,8192
 20032f4:	10bfffc4 	addi	r2,r2,-1
 20032f8:	d9000f15 	stw	r4,60(sp)
 20032fc:	d8c01015 	stw	r3,64(sp)
 2003300:	1180162e 	bgeu	r2,r6,200335c <__muldf3+0x28c>
 2003304:	1811883a 	mov	r8,r3
 2003308:	101f883a 	mov	r15,r2
 200330c:	980497fa 	slli	r2,r19,31
 2003310:	9016d07a 	srli	r11,r18,1
 2003314:	500697fa 	slli	r3,r10,31
 2003318:	480cd07a 	srli	r6,r9,1
 200331c:	500ed07a 	srli	r7,r10,1
 2003320:	12d6b03a 	or	r11,r2,r11
 2003324:	00800044 	movi	r2,1
 2003328:	198cb03a 	or	r6,r3,r6
 200332c:	4888703a 	and	r4,r9,r2
 2003330:	9818d07a 	srli	r12,r19,1
 2003334:	001b883a 	mov	r13,zero
 2003338:	03a00034 	movhi	r14,32768
 200333c:	3013883a 	mov	r9,r6
 2003340:	3815883a 	mov	r10,r7
 2003344:	4091883a 	add	r8,r8,r2
 2003348:	20000226 	beq	r4,zero,2003354 <__muldf3+0x284>
 200334c:	5b64b03a 	or	r18,r11,r13
 2003350:	63a6b03a 	or	r19,r12,r14
 2003354:	7abfed36 	bltu	r15,r10,200330c <__muldf3+0x23c>
 2003358:	da001015 	stw	r8,64(sp)
 200335c:	00840034 	movhi	r2,4096
 2003360:	10bfffc4 	addi	r2,r2,-1
 2003364:	12801436 	bltu	r2,r10,20033b8 <__muldf3+0x2e8>
 2003368:	da001017 	ldw	r8,64(sp)
 200336c:	101f883a 	mov	r15,r2
 2003370:	4a45883a 	add	r2,r9,r9
 2003374:	124d803a 	cmpltu	r6,r2,r9
 2003378:	5287883a 	add	r3,r10,r10
 200337c:	9497883a 	add	r11,r18,r18
 2003380:	5c8f803a 	cmpltu	r7,r11,r18
 2003384:	9cd9883a 	add	r12,r19,r19
 2003388:	01000044 	movi	r4,1
 200338c:	30cd883a 	add	r6,r6,r3
 2003390:	3b0f883a 	add	r7,r7,r12
 2003394:	423fffc4 	addi	r8,r8,-1
 2003398:	1013883a 	mov	r9,r2
 200339c:	3015883a 	mov	r10,r6
 20033a0:	111ab03a 	or	r13,r2,r4
 20033a4:	98003016 	blt	r19,zero,2003468 <__muldf3+0x398>
 20033a8:	5825883a 	mov	r18,r11
 20033ac:	3827883a 	mov	r19,r7
 20033b0:	7abfef2e 	bgeu	r15,r10,2003370 <__muldf3+0x2a0>
 20033b4:	da001015 	stw	r8,64(sp)
 20033b8:	00803fc4 	movi	r2,255
 20033bc:	488e703a 	and	r7,r9,r2
 20033c0:	00802004 	movi	r2,128
 20033c4:	0007883a 	mov	r3,zero
 20033c8:	0011883a 	mov	r8,zero
 20033cc:	38801826 	beq	r7,r2,2003430 <__muldf3+0x360>
 20033d0:	008000c4 	movi	r2,3
 20033d4:	d9000e04 	addi	r4,sp,56
 20033d8:	da801215 	stw	r10,72(sp)
 20033dc:	d8800e15 	stw	r2,56(sp)
 20033e0:	da401115 	stw	r9,68(sp)
 20033e4:	003f6a06 	br	2003190 <__muldf3+0xc0>
 20033e8:	89802126 	beq	r17,r6,2003470 <__muldf3+0x3a0>
 20033ec:	0009883a 	mov	r4,zero
 20033f0:	5105883a 	add	r2,r10,r4
 20033f4:	128d803a 	cmpltu	r6,r2,r10
 20033f8:	5d07883a 	add	r3,r11,r20
 20033fc:	30cd883a 	add	r6,r6,r3
 2003400:	0021883a 	mov	r16,zero
 2003404:	0023883a 	mov	r17,zero
 2003408:	1025883a 	mov	r18,r2
 200340c:	3027883a 	mov	r19,r6
 2003410:	32ff9e2e 	bgeu	r6,r11,200328c <__muldf3+0x1bc>
 2003414:	00800044 	movi	r2,1
 2003418:	8089883a 	add	r4,r16,r2
 200341c:	240d803a 	cmpltu	r6,r4,r16
 2003420:	344d883a 	add	r6,r6,r17
 2003424:	2021883a 	mov	r16,r4
 2003428:	3023883a 	mov	r17,r6
 200342c:	003f9806 	br	2003290 <__muldf3+0x1c0>
 2003430:	403fe71e 	bne	r8,zero,20033d0 <__muldf3+0x300>
 2003434:	01004004 	movi	r4,256
 2003438:	4904703a 	and	r2,r9,r4
 200343c:	10c4b03a 	or	r2,r2,r3
 2003440:	103fe31e 	bne	r2,zero,20033d0 <__muldf3+0x300>
 2003444:	94c4b03a 	or	r2,r18,r19
 2003448:	103fe126 	beq	r2,zero,20033d0 <__muldf3+0x300>
 200344c:	49c5883a 	add	r2,r9,r7
 2003450:	1251803a 	cmpltu	r8,r2,r9
 2003454:	4291883a 	add	r8,r8,r10
 2003458:	013fc004 	movi	r4,-256
 200345c:	1112703a 	and	r9,r2,r4
 2003460:	4015883a 	mov	r10,r8
 2003464:	003fda06 	br	20033d0 <__muldf3+0x300>
 2003468:	6813883a 	mov	r9,r13
 200346c:	003fce06 	br	20033a8 <__muldf3+0x2d8>
 2003470:	143f7c36 	bltu	r2,r16,2003264 <__muldf3+0x194>
 2003474:	003fdd06 	br	20033ec <__muldf3+0x31c>
 2003478:	12bf852e 	bgeu	r2,r10,2003290 <__muldf3+0x1c0>
 200347c:	003fe506 	br	2003414 <__muldf3+0x344>
 2003480:	00800084 	movi	r2,2
 2003484:	20bf351e 	bne	r4,r2,200315c <__muldf3+0x8c>
 2003488:	01008074 	movhi	r4,513
 200348c:	21022504 	addi	r4,r4,2196
 2003490:	003f3f06 	br	2003190 <__muldf3+0xc0>

02003494 <__divdf3>:
 2003494:	deffed04 	addi	sp,sp,-76
 2003498:	dcc01115 	stw	r19,68(sp)
 200349c:	dcc00404 	addi	r19,sp,16
 20034a0:	2011883a 	mov	r8,r4
 20034a4:	2813883a 	mov	r9,r5
 20034a8:	dc000e15 	stw	r16,56(sp)
 20034ac:	d809883a 	mov	r4,sp
 20034b0:	980b883a 	mov	r5,r19
 20034b4:	dc000904 	addi	r16,sp,36
 20034b8:	dfc01215 	stw	ra,72(sp)
 20034bc:	da400115 	stw	r9,4(sp)
 20034c0:	d9c00315 	stw	r7,12(sp)
 20034c4:	da000015 	stw	r8,0(sp)
 20034c8:	d9800215 	stw	r6,8(sp)
 20034cc:	dc801015 	stw	r18,64(sp)
 20034d0:	dc400f15 	stw	r17,60(sp)
 20034d4:	200427c0 	call	200427c <__unpack_d>
 20034d8:	d9000204 	addi	r4,sp,8
 20034dc:	800b883a 	mov	r5,r16
 20034e0:	200427c0 	call	200427c <__unpack_d>
 20034e4:	d9000417 	ldw	r4,16(sp)
 20034e8:	00800044 	movi	r2,1
 20034ec:	11000b2e 	bgeu	r2,r4,200351c <__divdf3+0x88>
 20034f0:	d9400917 	ldw	r5,36(sp)
 20034f4:	1140762e 	bgeu	r2,r5,20036d0 <__divdf3+0x23c>
 20034f8:	d8800517 	ldw	r2,20(sp)
 20034fc:	d8c00a17 	ldw	r3,40(sp)
 2003500:	01800104 	movi	r6,4
 2003504:	10c4f03a 	xor	r2,r2,r3
 2003508:	d8800515 	stw	r2,20(sp)
 200350c:	21800226 	beq	r4,r6,2003518 <__divdf3+0x84>
 2003510:	00800084 	movi	r2,2
 2003514:	2080141e 	bne	r4,r2,2003568 <__divdf3+0xd4>
 2003518:	29000926 	beq	r5,r4,2003540 <__divdf3+0xac>
 200351c:	9809883a 	mov	r4,r19
 2003520:	2003f680 	call	2003f68 <__pack_d>
 2003524:	dfc01217 	ldw	ra,72(sp)
 2003528:	dcc01117 	ldw	r19,68(sp)
 200352c:	dc801017 	ldw	r18,64(sp)
 2003530:	dc400f17 	ldw	r17,60(sp)
 2003534:	dc000e17 	ldw	r16,56(sp)
 2003538:	dec01304 	addi	sp,sp,76
 200353c:	f800283a 	ret
 2003540:	01008074 	movhi	r4,513
 2003544:	21022504 	addi	r4,r4,2196
 2003548:	2003f680 	call	2003f68 <__pack_d>
 200354c:	dfc01217 	ldw	ra,72(sp)
 2003550:	dcc01117 	ldw	r19,68(sp)
 2003554:	dc801017 	ldw	r18,64(sp)
 2003558:	dc400f17 	ldw	r17,60(sp)
 200355c:	dc000e17 	ldw	r16,56(sp)
 2003560:	dec01304 	addi	sp,sp,76
 2003564:	f800283a 	ret
 2003568:	29805b26 	beq	r5,r6,20036d8 <__divdf3+0x244>
 200356c:	28802d26 	beq	r5,r2,2003624 <__divdf3+0x190>
 2003570:	d8c00617 	ldw	r3,24(sp)
 2003574:	d8800b17 	ldw	r2,44(sp)
 2003578:	d9c00817 	ldw	r7,32(sp)
 200357c:	dc400d17 	ldw	r17,52(sp)
 2003580:	188bc83a 	sub	r5,r3,r2
 2003584:	d9800717 	ldw	r6,28(sp)
 2003588:	dc000c17 	ldw	r16,48(sp)
 200358c:	d9400615 	stw	r5,24(sp)
 2003590:	3c403836 	bltu	r7,r17,2003674 <__divdf3+0x1e0>
 2003594:	89c03626 	beq	r17,r7,2003670 <__divdf3+0x1dc>
 2003598:	0015883a 	mov	r10,zero
 200359c:	001d883a 	mov	r14,zero
 20035a0:	02c40034 	movhi	r11,4096
 20035a4:	001f883a 	mov	r15,zero
 20035a8:	003f883a 	mov	ra,zero
 20035ac:	04800f44 	movi	r18,61
 20035b0:	00000f06 	br	20035f0 <__divdf3+0x15c>
 20035b4:	601d883a 	mov	r14,r12
 20035b8:	681f883a 	mov	r15,r13
 20035bc:	400d883a 	mov	r6,r8
 20035c0:	100f883a 	mov	r7,r2
 20035c4:	3191883a 	add	r8,r6,r6
 20035c8:	5808d07a 	srli	r4,r11,1
 20035cc:	4185803a 	cmpltu	r2,r8,r6
 20035d0:	39d3883a 	add	r9,r7,r7
 20035d4:	28c6b03a 	or	r3,r5,r3
 20035d8:	1245883a 	add	r2,r2,r9
 20035dc:	1815883a 	mov	r10,r3
 20035e0:	2017883a 	mov	r11,r4
 20035e4:	400d883a 	mov	r6,r8
 20035e8:	100f883a 	mov	r7,r2
 20035ec:	fc801726 	beq	ra,r18,200364c <__divdf3+0x1b8>
 20035f0:	580a97fa 	slli	r5,r11,31
 20035f4:	5006d07a 	srli	r3,r10,1
 20035f8:	ffc00044 	addi	ra,ra,1
 20035fc:	3c7ff136 	bltu	r7,r17,20035c4 <__divdf3+0x130>
 2003600:	3411c83a 	sub	r8,r6,r16
 2003604:	3205803a 	cmpltu	r2,r6,r8
 2003608:	3c53c83a 	sub	r9,r7,r17
 200360c:	7298b03a 	or	r12,r14,r10
 2003610:	7adab03a 	or	r13,r15,r11
 2003614:	4885c83a 	sub	r2,r9,r2
 2003618:	89ffe61e 	bne	r17,r7,20035b4 <__divdf3+0x120>
 200361c:	343fe936 	bltu	r6,r16,20035c4 <__divdf3+0x130>
 2003620:	003fe406 	br	20035b4 <__divdf3+0x120>
 2003624:	9809883a 	mov	r4,r19
 2003628:	d9800415 	stw	r6,16(sp)
 200362c:	2003f680 	call	2003f68 <__pack_d>
 2003630:	dfc01217 	ldw	ra,72(sp)
 2003634:	dcc01117 	ldw	r19,68(sp)
 2003638:	dc801017 	ldw	r18,64(sp)
 200363c:	dc400f17 	ldw	r17,60(sp)
 2003640:	dc000e17 	ldw	r16,56(sp)
 2003644:	dec01304 	addi	sp,sp,76
 2003648:	f800283a 	ret
 200364c:	00803fc4 	movi	r2,255
 2003650:	7090703a 	and	r8,r14,r2
 2003654:	00802004 	movi	r2,128
 2003658:	0007883a 	mov	r3,zero
 200365c:	0013883a 	mov	r9,zero
 2003660:	40800d26 	beq	r8,r2,2003698 <__divdf3+0x204>
 2003664:	dbc00815 	stw	r15,32(sp)
 2003668:	db800715 	stw	r14,28(sp)
 200366c:	003fab06 	br	200351c <__divdf3+0x88>
 2003670:	343fc92e 	bgeu	r6,r16,2003598 <__divdf3+0x104>
 2003674:	3185883a 	add	r2,r6,r6
 2003678:	1189803a 	cmpltu	r4,r2,r6
 200367c:	39c7883a 	add	r3,r7,r7
 2003680:	20c9883a 	add	r4,r4,r3
 2003684:	297fffc4 	addi	r5,r5,-1
 2003688:	100d883a 	mov	r6,r2
 200368c:	200f883a 	mov	r7,r4
 2003690:	d9400615 	stw	r5,24(sp)
 2003694:	003fc006 	br	2003598 <__divdf3+0x104>
 2003698:	483ff21e 	bne	r9,zero,2003664 <__divdf3+0x1d0>
 200369c:	01004004 	movi	r4,256
 20036a0:	7104703a 	and	r2,r14,r4
 20036a4:	10c4b03a 	or	r2,r2,r3
 20036a8:	103fee1e 	bne	r2,zero,2003664 <__divdf3+0x1d0>
 20036ac:	31c4b03a 	or	r2,r6,r7
 20036b0:	103fec26 	beq	r2,zero,2003664 <__divdf3+0x1d0>
 20036b4:	7205883a 	add	r2,r14,r8
 20036b8:	1391803a 	cmpltu	r8,r2,r14
 20036bc:	43d1883a 	add	r8,r8,r15
 20036c0:	013fc004 	movi	r4,-256
 20036c4:	111c703a 	and	r14,r2,r4
 20036c8:	401f883a 	mov	r15,r8
 20036cc:	003fe506 	br	2003664 <__divdf3+0x1d0>
 20036d0:	8009883a 	mov	r4,r16
 20036d4:	003f9206 	br	2003520 <__divdf3+0x8c>
 20036d8:	9809883a 	mov	r4,r19
 20036dc:	d8000715 	stw	zero,28(sp)
 20036e0:	d8000815 	stw	zero,32(sp)
 20036e4:	d8000615 	stw	zero,24(sp)
 20036e8:	003f8d06 	br	2003520 <__divdf3+0x8c>

020036ec <__floatsidf>:
 20036ec:	2006d7fa 	srli	r3,r4,31
 20036f0:	defff604 	addi	sp,sp,-40
 20036f4:	008000c4 	movi	r2,3
 20036f8:	dfc00915 	stw	ra,36(sp)
 20036fc:	dcc00815 	stw	r19,32(sp)
 2003700:	dc800715 	stw	r18,28(sp)
 2003704:	dc400615 	stw	r17,24(sp)
 2003708:	dc000515 	stw	r16,20(sp)
 200370c:	d8800015 	stw	r2,0(sp)
 2003710:	d8c00115 	stw	r3,4(sp)
 2003714:	20000f1e 	bne	r4,zero,2003754 <__floatsidf+0x68>
 2003718:	00800084 	movi	r2,2
 200371c:	d8800015 	stw	r2,0(sp)
 2003720:	d809883a 	mov	r4,sp
 2003724:	2003f680 	call	2003f68 <__pack_d>
 2003728:	1009883a 	mov	r4,r2
 200372c:	180b883a 	mov	r5,r3
 2003730:	2005883a 	mov	r2,r4
 2003734:	2807883a 	mov	r3,r5
 2003738:	dfc00917 	ldw	ra,36(sp)
 200373c:	dcc00817 	ldw	r19,32(sp)
 2003740:	dc800717 	ldw	r18,28(sp)
 2003744:	dc400617 	ldw	r17,24(sp)
 2003748:	dc000517 	ldw	r16,20(sp)
 200374c:	dec00a04 	addi	sp,sp,40
 2003750:	f800283a 	ret
 2003754:	00800f04 	movi	r2,60
 2003758:	1807003a 	cmpeq	r3,r3,zero
 200375c:	d8800215 	stw	r2,8(sp)
 2003760:	18001126 	beq	r3,zero,20037a8 <__floatsidf+0xbc>
 2003764:	0027883a 	mov	r19,zero
 2003768:	2025883a 	mov	r18,r4
 200376c:	d9000315 	stw	r4,12(sp)
 2003770:	dcc00415 	stw	r19,16(sp)
 2003774:	2003c940 	call	2003c94 <__clzsi2>
 2003778:	11000744 	addi	r4,r2,29
 200377c:	013fe80e 	bge	zero,r4,2003720 <__floatsidf+0x34>
 2003780:	10bfff44 	addi	r2,r2,-3
 2003784:	10000c16 	blt	r2,zero,20037b8 <__floatsidf+0xcc>
 2003788:	90a2983a 	sll	r17,r18,r2
 200378c:	0021883a 	mov	r16,zero
 2003790:	d8800217 	ldw	r2,8(sp)
 2003794:	dc400415 	stw	r17,16(sp)
 2003798:	dc000315 	stw	r16,12(sp)
 200379c:	1105c83a 	sub	r2,r2,r4
 20037a0:	d8800215 	stw	r2,8(sp)
 20037a4:	003fde06 	br	2003720 <__floatsidf+0x34>
 20037a8:	00a00034 	movhi	r2,32768
 20037ac:	20800a26 	beq	r4,r2,20037d8 <__floatsidf+0xec>
 20037b0:	0109c83a 	sub	r4,zero,r4
 20037b4:	003feb06 	br	2003764 <__floatsidf+0x78>
 20037b8:	9006d07a 	srli	r3,r18,1
 20037bc:	008007c4 	movi	r2,31
 20037c0:	1105c83a 	sub	r2,r2,r4
 20037c4:	1886d83a 	srl	r3,r3,r2
 20037c8:	9922983a 	sll	r17,r19,r4
 20037cc:	9120983a 	sll	r16,r18,r4
 20037d0:	1c62b03a 	or	r17,r3,r17
 20037d4:	003fee06 	br	2003790 <__floatsidf+0xa4>
 20037d8:	0009883a 	mov	r4,zero
 20037dc:	01707834 	movhi	r5,49632
 20037e0:	003fd306 	br	2003730 <__floatsidf+0x44>

020037e4 <__truncdfsf2>:
 20037e4:	defff804 	addi	sp,sp,-32
 20037e8:	2005883a 	mov	r2,r4
 20037ec:	2807883a 	mov	r3,r5
 20037f0:	d809883a 	mov	r4,sp
 20037f4:	d9400204 	addi	r5,sp,8
 20037f8:	d8c00115 	stw	r3,4(sp)
 20037fc:	d8800015 	stw	r2,0(sp)
 2003800:	dfc00715 	stw	ra,28(sp)
 2003804:	200427c0 	call	200427c <__unpack_d>
 2003808:	d9c00517 	ldw	r7,20(sp)
 200380c:	da000617 	ldw	r8,24(sp)
 2003810:	02d00034 	movhi	r11,16384
 2003814:	5affffc4 	addi	r11,r11,-1
 2003818:	3812d7ba 	srli	r9,r7,30
 200381c:	401a90ba 	slli	r13,r8,2
 2003820:	3ac4703a 	and	r2,r7,r11
 2003824:	0007883a 	mov	r3,zero
 2003828:	6a52b03a 	or	r9,r13,r9
 200382c:	10c4b03a 	or	r2,r2,r3
 2003830:	d9000217 	ldw	r4,8(sp)
 2003834:	d9400317 	ldw	r5,12(sp)
 2003838:	d9800417 	ldw	r6,16(sp)
 200383c:	480f883a 	mov	r7,r9
 2003840:	10000126 	beq	r2,zero,2003848 <__truncdfsf2+0x64>
 2003844:	49c00054 	ori	r7,r9,1
 2003848:	2003f3c0 	call	2003f3c <__make_fp>
 200384c:	dfc00717 	ldw	ra,28(sp)
 2003850:	dec00804 	addi	sp,sp,32
 2003854:	f800283a 	ret

02003858 <__floatunsidf>:
 2003858:	defff204 	addi	sp,sp,-56
 200385c:	dfc00d15 	stw	ra,52(sp)
 2003860:	ddc00c15 	stw	r23,48(sp)
 2003864:	dd800b15 	stw	r22,44(sp)
 2003868:	dd400a15 	stw	r21,40(sp)
 200386c:	dd000915 	stw	r20,36(sp)
 2003870:	dcc00815 	stw	r19,32(sp)
 2003874:	dc800715 	stw	r18,28(sp)
 2003878:	dc400615 	stw	r17,24(sp)
 200387c:	dc000515 	stw	r16,20(sp)
 2003880:	d8000115 	stw	zero,4(sp)
 2003884:	20000f1e 	bne	r4,zero,20038c4 <__floatunsidf+0x6c>
 2003888:	00800084 	movi	r2,2
 200388c:	d8800015 	stw	r2,0(sp)
 2003890:	d809883a 	mov	r4,sp
 2003894:	2003f680 	call	2003f68 <__pack_d>
 2003898:	dfc00d17 	ldw	ra,52(sp)
 200389c:	ddc00c17 	ldw	r23,48(sp)
 20038a0:	dd800b17 	ldw	r22,44(sp)
 20038a4:	dd400a17 	ldw	r21,40(sp)
 20038a8:	dd000917 	ldw	r20,36(sp)
 20038ac:	dcc00817 	ldw	r19,32(sp)
 20038b0:	dc800717 	ldw	r18,28(sp)
 20038b4:	dc400617 	ldw	r17,24(sp)
 20038b8:	dc000517 	ldw	r16,20(sp)
 20038bc:	dec00e04 	addi	sp,sp,56
 20038c0:	f800283a 	ret
 20038c4:	008000c4 	movi	r2,3
 20038c8:	00c00f04 	movi	r3,60
 20038cc:	002f883a 	mov	r23,zero
 20038d0:	202d883a 	mov	r22,r4
 20038d4:	d8800015 	stw	r2,0(sp)
 20038d8:	d8c00215 	stw	r3,8(sp)
 20038dc:	d9000315 	stw	r4,12(sp)
 20038e0:	ddc00415 	stw	r23,16(sp)
 20038e4:	2003c940 	call	2003c94 <__clzsi2>
 20038e8:	12400744 	addi	r9,r2,29
 20038ec:	48000b16 	blt	r9,zero,200391c <__floatunsidf+0xc4>
 20038f0:	483fe726 	beq	r9,zero,2003890 <__floatunsidf+0x38>
 20038f4:	10bfff44 	addi	r2,r2,-3
 20038f8:	10002e16 	blt	r2,zero,20039b4 <__floatunsidf+0x15c>
 20038fc:	b0a2983a 	sll	r17,r22,r2
 2003900:	0021883a 	mov	r16,zero
 2003904:	d8800217 	ldw	r2,8(sp)
 2003908:	dc400415 	stw	r17,16(sp)
 200390c:	dc000315 	stw	r16,12(sp)
 2003910:	1245c83a 	sub	r2,r2,r9
 2003914:	d8800215 	stw	r2,8(sp)
 2003918:	003fdd06 	br	2003890 <__floatunsidf+0x38>
 200391c:	0255c83a 	sub	r10,zero,r9
 2003920:	51bff804 	addi	r6,r10,-32
 2003924:	30001b16 	blt	r6,zero,2003994 <__floatunsidf+0x13c>
 2003928:	b9a8d83a 	srl	r20,r23,r6
 200392c:	002b883a 	mov	r21,zero
 2003930:	000f883a 	mov	r7,zero
 2003934:	01000044 	movi	r4,1
 2003938:	0011883a 	mov	r8,zero
 200393c:	30002516 	blt	r6,zero,20039d4 <__floatunsidf+0x17c>
 2003940:	21a6983a 	sll	r19,r4,r6
 2003944:	0025883a 	mov	r18,zero
 2003948:	00bfffc4 	movi	r2,-1
 200394c:	9089883a 	add	r4,r18,r2
 2003950:	988b883a 	add	r5,r19,r2
 2003954:	248d803a 	cmpltu	r6,r4,r18
 2003958:	314b883a 	add	r5,r6,r5
 200395c:	b104703a 	and	r2,r22,r4
 2003960:	b946703a 	and	r3,r23,r5
 2003964:	10c4b03a 	or	r2,r2,r3
 2003968:	10000226 	beq	r2,zero,2003974 <__floatunsidf+0x11c>
 200396c:	01c00044 	movi	r7,1
 2003970:	0011883a 	mov	r8,zero
 2003974:	d9000217 	ldw	r4,8(sp)
 2003978:	a1c4b03a 	or	r2,r20,r7
 200397c:	aa06b03a 	or	r3,r21,r8
 2003980:	2249c83a 	sub	r4,r4,r9
 2003984:	d8c00415 	stw	r3,16(sp)
 2003988:	d9000215 	stw	r4,8(sp)
 200398c:	d8800315 	stw	r2,12(sp)
 2003990:	003fbf06 	br	2003890 <__floatunsidf+0x38>
 2003994:	bdc7883a 	add	r3,r23,r23
 2003998:	008007c4 	movi	r2,31
 200399c:	1285c83a 	sub	r2,r2,r10
 20039a0:	1886983a 	sll	r3,r3,r2
 20039a4:	b2a8d83a 	srl	r20,r22,r10
 20039a8:	baaad83a 	srl	r21,r23,r10
 20039ac:	1d28b03a 	or	r20,r3,r20
 20039b0:	003fdf06 	br	2003930 <__floatunsidf+0xd8>
 20039b4:	b006d07a 	srli	r3,r22,1
 20039b8:	008007c4 	movi	r2,31
 20039bc:	1245c83a 	sub	r2,r2,r9
 20039c0:	1886d83a 	srl	r3,r3,r2
 20039c4:	ba62983a 	sll	r17,r23,r9
 20039c8:	b260983a 	sll	r16,r22,r9
 20039cc:	1c62b03a 	or	r17,r3,r17
 20039d0:	003fcc06 	br	2003904 <__floatunsidf+0xac>
 20039d4:	2006d07a 	srli	r3,r4,1
 20039d8:	008007c4 	movi	r2,31
 20039dc:	1285c83a 	sub	r2,r2,r10
 20039e0:	18a6d83a 	srl	r19,r3,r2
 20039e4:	22a4983a 	sll	r18,r4,r10
 20039e8:	003fd706 	br	2003948 <__floatunsidf+0xf0>

020039ec <udivmodsi4>:
 20039ec:	29001b2e 	bgeu	r5,r4,2003a5c <udivmodsi4+0x70>
 20039f0:	28001a16 	blt	r5,zero,2003a5c <udivmodsi4+0x70>
 20039f4:	00800044 	movi	r2,1
 20039f8:	0007883a 	mov	r3,zero
 20039fc:	01c007c4 	movi	r7,31
 2003a00:	00000306 	br	2003a10 <udivmodsi4+0x24>
 2003a04:	19c01326 	beq	r3,r7,2003a54 <udivmodsi4+0x68>
 2003a08:	18c00044 	addi	r3,r3,1
 2003a0c:	28000416 	blt	r5,zero,2003a20 <udivmodsi4+0x34>
 2003a10:	294b883a 	add	r5,r5,r5
 2003a14:	1085883a 	add	r2,r2,r2
 2003a18:	293ffa36 	bltu	r5,r4,2003a04 <udivmodsi4+0x18>
 2003a1c:	10000d26 	beq	r2,zero,2003a54 <udivmodsi4+0x68>
 2003a20:	0007883a 	mov	r3,zero
 2003a24:	21400236 	bltu	r4,r5,2003a30 <udivmodsi4+0x44>
 2003a28:	2149c83a 	sub	r4,r4,r5
 2003a2c:	1886b03a 	or	r3,r3,r2
 2003a30:	1004d07a 	srli	r2,r2,1
 2003a34:	280ad07a 	srli	r5,r5,1
 2003a38:	103ffa1e 	bne	r2,zero,2003a24 <udivmodsi4+0x38>
 2003a3c:	30000226 	beq	r6,zero,2003a48 <udivmodsi4+0x5c>
 2003a40:	2005883a 	mov	r2,r4
 2003a44:	f800283a 	ret
 2003a48:	1809883a 	mov	r4,r3
 2003a4c:	2005883a 	mov	r2,r4
 2003a50:	f800283a 	ret
 2003a54:	0007883a 	mov	r3,zero
 2003a58:	003ff806 	br	2003a3c <udivmodsi4+0x50>
 2003a5c:	00800044 	movi	r2,1
 2003a60:	0007883a 	mov	r3,zero
 2003a64:	003fef06 	br	2003a24 <udivmodsi4+0x38>

02003a68 <__divsi3>:
 2003a68:	defffe04 	addi	sp,sp,-8
 2003a6c:	dc000015 	stw	r16,0(sp)
 2003a70:	dfc00115 	stw	ra,4(sp)
 2003a74:	0021883a 	mov	r16,zero
 2003a78:	20000c16 	blt	r4,zero,2003aac <__divsi3+0x44>
 2003a7c:	000d883a 	mov	r6,zero
 2003a80:	28000e16 	blt	r5,zero,2003abc <__divsi3+0x54>
 2003a84:	20039ec0 	call	20039ec <udivmodsi4>
 2003a88:	1007883a 	mov	r3,r2
 2003a8c:	8005003a 	cmpeq	r2,r16,zero
 2003a90:	1000011e 	bne	r2,zero,2003a98 <__divsi3+0x30>
 2003a94:	00c7c83a 	sub	r3,zero,r3
 2003a98:	1805883a 	mov	r2,r3
 2003a9c:	dfc00117 	ldw	ra,4(sp)
 2003aa0:	dc000017 	ldw	r16,0(sp)
 2003aa4:	dec00204 	addi	sp,sp,8
 2003aa8:	f800283a 	ret
 2003aac:	0109c83a 	sub	r4,zero,r4
 2003ab0:	04000044 	movi	r16,1
 2003ab4:	000d883a 	mov	r6,zero
 2003ab8:	283ff20e 	bge	r5,zero,2003a84 <__divsi3+0x1c>
 2003abc:	014bc83a 	sub	r5,zero,r5
 2003ac0:	8021003a 	cmpeq	r16,r16,zero
 2003ac4:	003fef06 	br	2003a84 <__divsi3+0x1c>

02003ac8 <__modsi3>:
 2003ac8:	deffff04 	addi	sp,sp,-4
 2003acc:	dfc00015 	stw	ra,0(sp)
 2003ad0:	01800044 	movi	r6,1
 2003ad4:	2807883a 	mov	r3,r5
 2003ad8:	20000416 	blt	r4,zero,2003aec <__modsi3+0x24>
 2003adc:	28000c16 	blt	r5,zero,2003b10 <__modsi3+0x48>
 2003ae0:	dfc00017 	ldw	ra,0(sp)
 2003ae4:	dec00104 	addi	sp,sp,4
 2003ae8:	20039ec1 	jmpi	20039ec <udivmodsi4>
 2003aec:	0109c83a 	sub	r4,zero,r4
 2003af0:	28000b16 	blt	r5,zero,2003b20 <__modsi3+0x58>
 2003af4:	180b883a 	mov	r5,r3
 2003af8:	01800044 	movi	r6,1
 2003afc:	20039ec0 	call	20039ec <udivmodsi4>
 2003b00:	0085c83a 	sub	r2,zero,r2
 2003b04:	dfc00017 	ldw	ra,0(sp)
 2003b08:	dec00104 	addi	sp,sp,4
 2003b0c:	f800283a 	ret
 2003b10:	014bc83a 	sub	r5,zero,r5
 2003b14:	dfc00017 	ldw	ra,0(sp)
 2003b18:	dec00104 	addi	sp,sp,4
 2003b1c:	20039ec1 	jmpi	20039ec <udivmodsi4>
 2003b20:	0147c83a 	sub	r3,zero,r5
 2003b24:	003ff306 	br	2003af4 <__modsi3+0x2c>

02003b28 <__udivsi3>:
 2003b28:	000d883a 	mov	r6,zero
 2003b2c:	20039ec1 	jmpi	20039ec <udivmodsi4>

02003b30 <__umodsi3>:
 2003b30:	01800044 	movi	r6,1
 2003b34:	20039ec1 	jmpi	20039ec <udivmodsi4>

02003b38 <__mulsi3>:
 2003b38:	20000a26 	beq	r4,zero,2003b64 <__mulsi3+0x2c>
 2003b3c:	0007883a 	mov	r3,zero
 2003b40:	2080004c 	andi	r2,r4,1
 2003b44:	1005003a 	cmpeq	r2,r2,zero
 2003b48:	2008d07a 	srli	r4,r4,1
 2003b4c:	1000011e 	bne	r2,zero,2003b54 <__mulsi3+0x1c>
 2003b50:	1947883a 	add	r3,r3,r5
 2003b54:	294b883a 	add	r5,r5,r5
 2003b58:	203ff91e 	bne	r4,zero,2003b40 <__mulsi3+0x8>
 2003b5c:	1805883a 	mov	r2,r3
 2003b60:	f800283a 	ret
 2003b64:	0007883a 	mov	r3,zero
 2003b68:	1805883a 	mov	r2,r3
 2003b6c:	f800283a 	ret

02003b70 <__muldi3>:
 2003b70:	defff204 	addi	sp,sp,-56
 2003b74:	df000c15 	stw	fp,48(sp)
 2003b78:	3038d43a 	srli	fp,r6,16
 2003b7c:	dd000815 	stw	r20,32(sp)
 2003b80:	dc400515 	stw	r17,20(sp)
 2003b84:	2028d43a 	srli	r20,r4,16
 2003b88:	247fffcc 	andi	r17,r4,65535
 2003b8c:	dc000415 	stw	r16,16(sp)
 2003b90:	343fffcc 	andi	r16,r6,65535
 2003b94:	dcc00715 	stw	r19,28(sp)
 2003b98:	d9000015 	stw	r4,0(sp)
 2003b9c:	2827883a 	mov	r19,r5
 2003ba0:	8809883a 	mov	r4,r17
 2003ba4:	d9400115 	stw	r5,4(sp)
 2003ba8:	800b883a 	mov	r5,r16
 2003bac:	d9800215 	stw	r6,8(sp)
 2003bb0:	dfc00d15 	stw	ra,52(sp)
 2003bb4:	d9c00315 	stw	r7,12(sp)
 2003bb8:	dd800a15 	stw	r22,40(sp)
 2003bbc:	dd400915 	stw	r21,36(sp)
 2003bc0:	302d883a 	mov	r22,r6
 2003bc4:	ddc00b15 	stw	r23,44(sp)
 2003bc8:	dc800615 	stw	r18,24(sp)
 2003bcc:	2003b380 	call	2003b38 <__mulsi3>
 2003bd0:	8809883a 	mov	r4,r17
 2003bd4:	e00b883a 	mov	r5,fp
 2003bd8:	102b883a 	mov	r21,r2
 2003bdc:	2003b380 	call	2003b38 <__mulsi3>
 2003be0:	800b883a 	mov	r5,r16
 2003be4:	a009883a 	mov	r4,r20
 2003be8:	1023883a 	mov	r17,r2
 2003bec:	2003b380 	call	2003b38 <__mulsi3>
 2003bf0:	a009883a 	mov	r4,r20
 2003bf4:	e00b883a 	mov	r5,fp
 2003bf8:	1021883a 	mov	r16,r2
 2003bfc:	2003b380 	call	2003b38 <__mulsi3>
 2003c00:	a8ffffcc 	andi	r3,r21,65535
 2003c04:	a82ad43a 	srli	r21,r21,16
 2003c08:	8c23883a 	add	r17,r17,r16
 2003c0c:	1011883a 	mov	r8,r2
 2003c10:	ac6b883a 	add	r21,r21,r17
 2003c14:	a804943a 	slli	r2,r21,16
 2003c18:	b009883a 	mov	r4,r22
 2003c1c:	980b883a 	mov	r5,r19
 2003c20:	10c7883a 	add	r3,r2,r3
 2003c24:	a812d43a 	srli	r9,r21,16
 2003c28:	180d883a 	mov	r6,r3
 2003c2c:	ac00022e 	bgeu	r21,r16,2003c38 <__muldi3+0xc8>
 2003c30:	00800074 	movhi	r2,1
 2003c34:	4091883a 	add	r8,r8,r2
 2003c38:	4267883a 	add	r19,r8,r9
 2003c3c:	302d883a 	mov	r22,r6
 2003c40:	2003b380 	call	2003b38 <__mulsi3>
 2003c44:	d9400317 	ldw	r5,12(sp)
 2003c48:	d9000017 	ldw	r4,0(sp)
 2003c4c:	1023883a 	mov	r17,r2
 2003c50:	2003b380 	call	2003b38 <__mulsi3>
 2003c54:	14cb883a 	add	r5,r2,r19
 2003c58:	894b883a 	add	r5,r17,r5
 2003c5c:	b005883a 	mov	r2,r22
 2003c60:	2807883a 	mov	r3,r5
 2003c64:	dfc00d17 	ldw	ra,52(sp)
 2003c68:	df000c17 	ldw	fp,48(sp)
 2003c6c:	ddc00b17 	ldw	r23,44(sp)
 2003c70:	dd800a17 	ldw	r22,40(sp)
 2003c74:	dd400917 	ldw	r21,36(sp)
 2003c78:	dd000817 	ldw	r20,32(sp)
 2003c7c:	dcc00717 	ldw	r19,28(sp)
 2003c80:	dc800617 	ldw	r18,24(sp)
 2003c84:	dc400517 	ldw	r17,20(sp)
 2003c88:	dc000417 	ldw	r16,16(sp)
 2003c8c:	dec00e04 	addi	sp,sp,56
 2003c90:	f800283a 	ret

02003c94 <__clzsi2>:
 2003c94:	00bfffd4 	movui	r2,65535
 2003c98:	11000e36 	bltu	r2,r4,2003cd4 <__clzsi2+0x40>
 2003c9c:	00803fc4 	movi	r2,255
 2003ca0:	01400204 	movi	r5,8
 2003ca4:	0007883a 	mov	r3,zero
 2003ca8:	11001036 	bltu	r2,r4,2003cec <__clzsi2+0x58>
 2003cac:	000b883a 	mov	r5,zero
 2003cb0:	20c6d83a 	srl	r3,r4,r3
 2003cb4:	00808074 	movhi	r2,513
 2003cb8:	10822a04 	addi	r2,r2,2216
 2003cbc:	1887883a 	add	r3,r3,r2
 2003cc0:	18800003 	ldbu	r2,0(r3)
 2003cc4:	00c00804 	movi	r3,32
 2003cc8:	2885883a 	add	r2,r5,r2
 2003ccc:	1885c83a 	sub	r2,r3,r2
 2003cd0:	f800283a 	ret
 2003cd4:	01400404 	movi	r5,16
 2003cd8:	00804034 	movhi	r2,256
 2003cdc:	10bfffc4 	addi	r2,r2,-1
 2003ce0:	2807883a 	mov	r3,r5
 2003ce4:	113ff22e 	bgeu	r2,r4,2003cb0 <__clzsi2+0x1c>
 2003ce8:	01400604 	movi	r5,24
 2003cec:	2807883a 	mov	r3,r5
 2003cf0:	20c6d83a 	srl	r3,r4,r3
 2003cf4:	00808074 	movhi	r2,513
 2003cf8:	10822a04 	addi	r2,r2,2216
 2003cfc:	1887883a 	add	r3,r3,r2
 2003d00:	18800003 	ldbu	r2,0(r3)
 2003d04:	00c00804 	movi	r3,32
 2003d08:	2885883a 	add	r2,r5,r2
 2003d0c:	1885c83a 	sub	r2,r3,r2
 2003d10:	f800283a 	ret

02003d14 <__pack_f>:
 2003d14:	20c00017 	ldw	r3,0(r4)
 2003d18:	01c00044 	movi	r7,1
 2003d1c:	21800317 	ldw	r6,12(r4)
 2003d20:	21400117 	ldw	r5,4(r4)
 2003d24:	38c02d2e 	bgeu	r7,r3,2003ddc <__pack_f+0xc8>
 2003d28:	00800104 	movi	r2,4
 2003d2c:	18802826 	beq	r3,r2,2003dd0 <__pack_f+0xbc>
 2003d30:	00800084 	movi	r2,2
 2003d34:	18800126 	beq	r3,r2,2003d3c <__pack_f+0x28>
 2003d38:	3000101e 	bne	r6,zero,2003d7c <__pack_f+0x68>
 2003d3c:	000d883a 	mov	r6,zero
 2003d40:	0007883a 	mov	r3,zero
 2003d44:	19003fcc 	andi	r4,r3,255
 2003d48:	200895fa 	slli	r4,r4,23
 2003d4c:	00c02034 	movhi	r3,128
 2003d50:	18ffffc4 	addi	r3,r3,-1
 2003d54:	30c6703a 	and	r3,r6,r3
 2003d58:	10a0002c 	andhi	r2,r2,32768
 2003d5c:	10c4b03a 	or	r2,r2,r3
 2003d60:	280a97fa 	slli	r5,r5,31
 2003d64:	1104b03a 	or	r2,r2,r4
 2003d68:	00e00034 	movhi	r3,32768
 2003d6c:	18ffffc4 	addi	r3,r3,-1
 2003d70:	10c4703a 	and	r2,r2,r3
 2003d74:	1144b03a 	or	r2,r2,r5
 2003d78:	f800283a 	ret
 2003d7c:	21000217 	ldw	r4,8(r4)
 2003d80:	00bfe084 	movi	r2,-126
 2003d84:	20801b16 	blt	r4,r2,2003df4 <__pack_f+0xe0>
 2003d88:	00801fc4 	movi	r2,127
 2003d8c:	11001016 	blt	r2,r4,2003dd0 <__pack_f+0xbc>
 2003d90:	308e703a 	and	r7,r6,r2
 2003d94:	2087883a 	add	r3,r4,r2
 2003d98:	00801004 	movi	r2,64
 2003d9c:	38800526 	beq	r7,r2,2003db4 <__pack_f+0xa0>
 2003da0:	31800fc4 	addi	r6,r6,63
 2003da4:	30000716 	blt	r6,zero,2003dc4 <__pack_f+0xb0>
 2003da8:	300490ba 	slli	r2,r6,2
 2003dac:	100cd27a 	srli	r6,r2,9
 2003db0:	003fe406 	br	2003d44 <__pack_f+0x30>
 2003db4:	3080200c 	andi	r2,r6,128
 2003db8:	103ffa26 	beq	r2,zero,2003da4 <__pack_f+0x90>
 2003dbc:	31cd883a 	add	r6,r6,r7
 2003dc0:	003ff806 	br	2003da4 <__pack_f+0x90>
 2003dc4:	300cd07a 	srli	r6,r6,1
 2003dc8:	18c00044 	addi	r3,r3,1
 2003dcc:	003ff606 	br	2003da8 <__pack_f+0x94>
 2003dd0:	000d883a 	mov	r6,zero
 2003dd4:	00ffffc4 	movi	r3,-1
 2003dd8:	003fda06 	br	2003d44 <__pack_f+0x30>
 2003ddc:	31800434 	orhi	r6,r6,16
 2003de0:	00802034 	movhi	r2,128
 2003de4:	10bfffc4 	addi	r2,r2,-1
 2003de8:	308c703a 	and	r6,r6,r2
 2003dec:	00ffffc4 	movi	r3,-1
 2003df0:	003fd406 	br	2003d44 <__pack_f+0x30>
 2003df4:	1109c83a 	sub	r4,r2,r4
 2003df8:	00800644 	movi	r2,25
 2003dfc:	11001216 	blt	r2,r4,2003e48 <__pack_f+0x134>
 2003e00:	3904983a 	sll	r2,r7,r4
 2003e04:	3106d83a 	srl	r3,r6,r4
 2003e08:	10bfffc4 	addi	r2,r2,-1
 2003e0c:	3084703a 	and	r2,r6,r2
 2003e10:	1004c03a 	cmpne	r2,r2,zero
 2003e14:	1886b03a 	or	r3,r3,r2
 2003e18:	19001fcc 	andi	r4,r3,127
 2003e1c:	00801004 	movi	r2,64
 2003e20:	20800c26 	beq	r4,r2,2003e54 <__pack_f+0x140>
 2003e24:	18c00fc4 	addi	r3,r3,63
 2003e28:	00900034 	movhi	r2,16384
 2003e2c:	10bfffc4 	addi	r2,r2,-1
 2003e30:	180cd1fa 	srli	r6,r3,7
 2003e34:	10c7803a 	cmpltu	r3,r2,r3
 2003e38:	00802034 	movhi	r2,128
 2003e3c:	10bfffc4 	addi	r2,r2,-1
 2003e40:	308c703a 	and	r6,r6,r2
 2003e44:	003fbf06 	br	2003d44 <__pack_f+0x30>
 2003e48:	0007883a 	mov	r3,zero
 2003e4c:	000d883a 	mov	r6,zero
 2003e50:	003ff906 	br	2003e38 <__pack_f+0x124>
 2003e54:	1880200c 	andi	r2,r3,128
 2003e58:	10000126 	beq	r2,zero,2003e60 <__pack_f+0x14c>
 2003e5c:	1907883a 	add	r3,r3,r4
 2003e60:	180cd1fa 	srli	r6,r3,7
 2003e64:	00900034 	movhi	r2,16384
 2003e68:	10bfffc4 	addi	r2,r2,-1
 2003e6c:	10c7803a 	cmpltu	r3,r2,r3
 2003e70:	003ff106 	br	2003e38 <__pack_f+0x124>

02003e74 <__unpack_f>:
 2003e74:	21800017 	ldw	r6,0(r4)
 2003e78:	00c02034 	movhi	r3,128
 2003e7c:	18ffffc4 	addi	r3,r3,-1
 2003e80:	3004d5fa 	srli	r2,r6,23
 2003e84:	3008d7fa 	srli	r4,r6,31
 2003e88:	30ce703a 	and	r7,r6,r3
 2003e8c:	10c03fcc 	andi	r3,r2,255
 2003e90:	29000115 	stw	r4,4(r5)
 2003e94:	1800131e 	bne	r3,zero,2003ee4 <__unpack_f+0x70>
 2003e98:	38000f26 	beq	r7,zero,2003ed8 <__unpack_f+0x64>
 2003e9c:	380691fa 	slli	r3,r7,7
 2003ea0:	01bfe084 	movi	r6,-126
 2003ea4:	008000c4 	movi	r2,3
 2003ea8:	01100034 	movhi	r4,16384
 2003eac:	213fffc4 	addi	r4,r4,-1
 2003eb0:	28800015 	stw	r2,0(r5)
 2003eb4:	29800215 	stw	r6,8(r5)
 2003eb8:	20c00536 	bltu	r4,r3,2003ed0 <__unpack_f+0x5c>
 2003ebc:	3005883a 	mov	r2,r6
 2003ec0:	18c7883a 	add	r3,r3,r3
 2003ec4:	10bfffc4 	addi	r2,r2,-1
 2003ec8:	20fffd2e 	bgeu	r4,r3,2003ec0 <__unpack_f+0x4c>
 2003ecc:	28800215 	stw	r2,8(r5)
 2003ed0:	28c00315 	stw	r3,12(r5)
 2003ed4:	f800283a 	ret
 2003ed8:	00800084 	movi	r2,2
 2003edc:	28800015 	stw	r2,0(r5)
 2003ee0:	f800283a 	ret
 2003ee4:	00803fc4 	movi	r2,255
 2003ee8:	18800826 	beq	r3,r2,2003f0c <__unpack_f+0x98>
 2003eec:	380491fa 	slli	r2,r7,7
 2003ef0:	18ffe044 	addi	r3,r3,-127
 2003ef4:	28c00215 	stw	r3,8(r5)
 2003ef8:	10900034 	orhi	r2,r2,16384
 2003efc:	28800315 	stw	r2,12(r5)
 2003f00:	008000c4 	movi	r2,3
 2003f04:	28800015 	stw	r2,0(r5)
 2003f08:	f800283a 	ret
 2003f0c:	3800031e 	bne	r7,zero,2003f1c <__unpack_f+0xa8>
 2003f10:	00800104 	movi	r2,4
 2003f14:	28800015 	stw	r2,0(r5)
 2003f18:	f800283a 	ret
 2003f1c:	3080042c 	andhi	r2,r6,16
 2003f20:	10000426 	beq	r2,zero,2003f34 <__unpack_f+0xc0>
 2003f24:	00800044 	movi	r2,1
 2003f28:	28800015 	stw	r2,0(r5)
 2003f2c:	29c00315 	stw	r7,12(r5)
 2003f30:	f800283a 	ret
 2003f34:	28000015 	stw	zero,0(r5)
 2003f38:	003ffc06 	br	2003f2c <__unpack_f+0xb8>

02003f3c <__make_fp>:
 2003f3c:	defffb04 	addi	sp,sp,-20
 2003f40:	d9000015 	stw	r4,0(sp)
 2003f44:	d809883a 	mov	r4,sp
 2003f48:	dfc00415 	stw	ra,16(sp)
 2003f4c:	d9400115 	stw	r5,4(sp)
 2003f50:	d9800215 	stw	r6,8(sp)
 2003f54:	d9c00315 	stw	r7,12(sp)
 2003f58:	2003d140 	call	2003d14 <__pack_f>
 2003f5c:	dfc00417 	ldw	ra,16(sp)
 2003f60:	dec00504 	addi	sp,sp,20
 2003f64:	f800283a 	ret

02003f68 <__pack_d>:
 2003f68:	20c00017 	ldw	r3,0(r4)
 2003f6c:	defffd04 	addi	sp,sp,-12
 2003f70:	dc000015 	stw	r16,0(sp)
 2003f74:	dc800215 	stw	r18,8(sp)
 2003f78:	dc400115 	stw	r17,4(sp)
 2003f7c:	00800044 	movi	r2,1
 2003f80:	22000317 	ldw	r8,12(r4)
 2003f84:	001f883a 	mov	r15,zero
 2003f88:	22400417 	ldw	r9,16(r4)
 2003f8c:	24000117 	ldw	r16,4(r4)
 2003f90:	10c0552e 	bgeu	r2,r3,20040e8 <__pack_d+0x180>
 2003f94:	00800104 	movi	r2,4
 2003f98:	18804f26 	beq	r3,r2,20040d8 <__pack_d+0x170>
 2003f9c:	00800084 	movi	r2,2
 2003fa0:	18800226 	beq	r3,r2,2003fac <__pack_d+0x44>
 2003fa4:	4244b03a 	or	r2,r8,r9
 2003fa8:	10001a1e 	bne	r2,zero,2004014 <__pack_d+0xac>
 2003fac:	000d883a 	mov	r6,zero
 2003fb0:	000f883a 	mov	r7,zero
 2003fb4:	0011883a 	mov	r8,zero
 2003fb8:	00800434 	movhi	r2,16
 2003fbc:	10bfffc4 	addi	r2,r2,-1
 2003fc0:	301d883a 	mov	r14,r6
 2003fc4:	3884703a 	and	r2,r7,r2
 2003fc8:	400a953a 	slli	r5,r8,20
 2003fcc:	79bffc2c 	andhi	r6,r15,65520
 2003fd0:	308cb03a 	or	r6,r6,r2
 2003fd4:	00e00434 	movhi	r3,32784
 2003fd8:	18ffffc4 	addi	r3,r3,-1
 2003fdc:	800497fa 	slli	r2,r16,31
 2003fe0:	30c6703a 	and	r3,r6,r3
 2003fe4:	1946b03a 	or	r3,r3,r5
 2003fe8:	01600034 	movhi	r5,32768
 2003fec:	297fffc4 	addi	r5,r5,-1
 2003ff0:	194a703a 	and	r5,r3,r5
 2003ff4:	288ab03a 	or	r5,r5,r2
 2003ff8:	2807883a 	mov	r3,r5
 2003ffc:	7005883a 	mov	r2,r14
 2004000:	dc800217 	ldw	r18,8(sp)
 2004004:	dc400117 	ldw	r17,4(sp)
 2004008:	dc000017 	ldw	r16,0(sp)
 200400c:	dec00304 	addi	sp,sp,12
 2004010:	f800283a 	ret
 2004014:	21000217 	ldw	r4,8(r4)
 2004018:	00bf0084 	movi	r2,-1022
 200401c:	20803f16 	blt	r4,r2,200411c <__pack_d+0x1b4>
 2004020:	0080ffc4 	movi	r2,1023
 2004024:	11002c16 	blt	r2,r4,20040d8 <__pack_d+0x170>
 2004028:	00803fc4 	movi	r2,255
 200402c:	408c703a 	and	r6,r8,r2
 2004030:	00802004 	movi	r2,128
 2004034:	0007883a 	mov	r3,zero
 2004038:	000f883a 	mov	r7,zero
 200403c:	2280ffc4 	addi	r10,r4,1023
 2004040:	30801e26 	beq	r6,r2,20040bc <__pack_d+0x154>
 2004044:	00801fc4 	movi	r2,127
 2004048:	4089883a 	add	r4,r8,r2
 200404c:	220d803a 	cmpltu	r6,r4,r8
 2004050:	324d883a 	add	r6,r6,r9
 2004054:	2011883a 	mov	r8,r4
 2004058:	3013883a 	mov	r9,r6
 200405c:	00880034 	movhi	r2,8192
 2004060:	10bfffc4 	addi	r2,r2,-1
 2004064:	12400d36 	bltu	r2,r9,200409c <__pack_d+0x134>
 2004068:	4804963a 	slli	r2,r9,24
 200406c:	400cd23a 	srli	r6,r8,8
 2004070:	480ed23a 	srli	r7,r9,8
 2004074:	013fffc4 	movi	r4,-1
 2004078:	118cb03a 	or	r6,r2,r6
 200407c:	01400434 	movhi	r5,16
 2004080:	297fffc4 	addi	r5,r5,-1
 2004084:	3104703a 	and	r2,r6,r4
 2004088:	3946703a 	and	r3,r7,r5
 200408c:	5201ffcc 	andi	r8,r10,2047
 2004090:	100d883a 	mov	r6,r2
 2004094:	180f883a 	mov	r7,r3
 2004098:	003fc706 	br	2003fb8 <__pack_d+0x50>
 200409c:	480897fa 	slli	r4,r9,31
 20040a0:	4004d07a 	srli	r2,r8,1
 20040a4:	4806d07a 	srli	r3,r9,1
 20040a8:	52800044 	addi	r10,r10,1
 20040ac:	2084b03a 	or	r2,r4,r2
 20040b0:	1011883a 	mov	r8,r2
 20040b4:	1813883a 	mov	r9,r3
 20040b8:	003feb06 	br	2004068 <__pack_d+0x100>
 20040bc:	383fe11e 	bne	r7,zero,2004044 <__pack_d+0xdc>
 20040c0:	01004004 	movi	r4,256
 20040c4:	4104703a 	and	r2,r8,r4
 20040c8:	10c4b03a 	or	r2,r2,r3
 20040cc:	103fe326 	beq	r2,zero,200405c <__pack_d+0xf4>
 20040d0:	3005883a 	mov	r2,r6
 20040d4:	003fdc06 	br	2004048 <__pack_d+0xe0>
 20040d8:	000d883a 	mov	r6,zero
 20040dc:	000f883a 	mov	r7,zero
 20040e0:	0201ffc4 	movi	r8,2047
 20040e4:	003fb406 	br	2003fb8 <__pack_d+0x50>
 20040e8:	0005883a 	mov	r2,zero
 20040ec:	00c00234 	movhi	r3,8
 20040f0:	408cb03a 	or	r6,r8,r2
 20040f4:	48ceb03a 	or	r7,r9,r3
 20040f8:	013fffc4 	movi	r4,-1
 20040fc:	01400434 	movhi	r5,16
 2004100:	297fffc4 	addi	r5,r5,-1
 2004104:	3104703a 	and	r2,r6,r4
 2004108:	3946703a 	and	r3,r7,r5
 200410c:	100d883a 	mov	r6,r2
 2004110:	180f883a 	mov	r7,r3
 2004114:	0201ffc4 	movi	r8,2047
 2004118:	003fa706 	br	2003fb8 <__pack_d+0x50>
 200411c:	1109c83a 	sub	r4,r2,r4
 2004120:	00800e04 	movi	r2,56
 2004124:	11004316 	blt	r2,r4,2004234 <__pack_d+0x2cc>
 2004128:	21fff804 	addi	r7,r4,-32
 200412c:	38004516 	blt	r7,zero,2004244 <__pack_d+0x2dc>
 2004130:	49d8d83a 	srl	r12,r9,r7
 2004134:	001b883a 	mov	r13,zero
 2004138:	0023883a 	mov	r17,zero
 200413c:	01400044 	movi	r5,1
 2004140:	0025883a 	mov	r18,zero
 2004144:	38004716 	blt	r7,zero,2004264 <__pack_d+0x2fc>
 2004148:	29d6983a 	sll	r11,r5,r7
 200414c:	0015883a 	mov	r10,zero
 2004150:	00bfffc4 	movi	r2,-1
 2004154:	5089883a 	add	r4,r10,r2
 2004158:	588b883a 	add	r5,r11,r2
 200415c:	228d803a 	cmpltu	r6,r4,r10
 2004160:	314b883a 	add	r5,r6,r5
 2004164:	4104703a 	and	r2,r8,r4
 2004168:	4946703a 	and	r3,r9,r5
 200416c:	10c4b03a 	or	r2,r2,r3
 2004170:	10000226 	beq	r2,zero,200417c <__pack_d+0x214>
 2004174:	04400044 	movi	r17,1
 2004178:	0025883a 	mov	r18,zero
 200417c:	00803fc4 	movi	r2,255
 2004180:	644eb03a 	or	r7,r12,r17
 2004184:	3892703a 	and	r9,r7,r2
 2004188:	00802004 	movi	r2,128
 200418c:	6c90b03a 	or	r8,r13,r18
 2004190:	0015883a 	mov	r10,zero
 2004194:	48801626 	beq	r9,r2,20041f0 <__pack_d+0x288>
 2004198:	01001fc4 	movi	r4,127
 200419c:	3905883a 	add	r2,r7,r4
 20041a0:	11cd803a 	cmpltu	r6,r2,r7
 20041a4:	320d883a 	add	r6,r6,r8
 20041a8:	100f883a 	mov	r7,r2
 20041ac:	00840034 	movhi	r2,4096
 20041b0:	10bfffc4 	addi	r2,r2,-1
 20041b4:	3011883a 	mov	r8,r6
 20041b8:	0007883a 	mov	r3,zero
 20041bc:	11801b36 	bltu	r2,r6,200422c <__pack_d+0x2c4>
 20041c0:	4004963a 	slli	r2,r8,24
 20041c4:	3808d23a 	srli	r4,r7,8
 20041c8:	400ad23a 	srli	r5,r8,8
 20041cc:	1813883a 	mov	r9,r3
 20041d0:	1108b03a 	or	r4,r2,r4
 20041d4:	00bfffc4 	movi	r2,-1
 20041d8:	00c00434 	movhi	r3,16
 20041dc:	18ffffc4 	addi	r3,r3,-1
 20041e0:	208c703a 	and	r6,r4,r2
 20041e4:	28ce703a 	and	r7,r5,r3
 20041e8:	4a01ffcc 	andi	r8,r9,2047
 20041ec:	003f7206 	br	2003fb8 <__pack_d+0x50>
 20041f0:	503fe91e 	bne	r10,zero,2004198 <__pack_d+0x230>
 20041f4:	01004004 	movi	r4,256
 20041f8:	3904703a 	and	r2,r7,r4
 20041fc:	0007883a 	mov	r3,zero
 2004200:	10c4b03a 	or	r2,r2,r3
 2004204:	10000626 	beq	r2,zero,2004220 <__pack_d+0x2b8>
 2004208:	3a45883a 	add	r2,r7,r9
 200420c:	11cd803a 	cmpltu	r6,r2,r7
 2004210:	320d883a 	add	r6,r6,r8
 2004214:	100f883a 	mov	r7,r2
 2004218:	3011883a 	mov	r8,r6
 200421c:	0007883a 	mov	r3,zero
 2004220:	00840034 	movhi	r2,4096
 2004224:	10bfffc4 	addi	r2,r2,-1
 2004228:	123fe52e 	bgeu	r2,r8,20041c0 <__pack_d+0x258>
 200422c:	00c00044 	movi	r3,1
 2004230:	003fe306 	br	20041c0 <__pack_d+0x258>
 2004234:	0009883a 	mov	r4,zero
 2004238:	0013883a 	mov	r9,zero
 200423c:	000b883a 	mov	r5,zero
 2004240:	003fe406 	br	20041d4 <__pack_d+0x26c>
 2004244:	4a47883a 	add	r3,r9,r9
 2004248:	008007c4 	movi	r2,31
 200424c:	1105c83a 	sub	r2,r2,r4
 2004250:	1886983a 	sll	r3,r3,r2
 2004254:	4118d83a 	srl	r12,r8,r4
 2004258:	491ad83a 	srl	r13,r9,r4
 200425c:	1b18b03a 	or	r12,r3,r12
 2004260:	003fb506 	br	2004138 <__pack_d+0x1d0>
 2004264:	2806d07a 	srli	r3,r5,1
 2004268:	008007c4 	movi	r2,31
 200426c:	1105c83a 	sub	r2,r2,r4
 2004270:	1896d83a 	srl	r11,r3,r2
 2004274:	2914983a 	sll	r10,r5,r4
 2004278:	003fb506 	br	2004150 <__pack_d+0x1e8>

0200427c <__unpack_d>:
 200427c:	20c00117 	ldw	r3,4(r4)
 2004280:	22400017 	ldw	r9,0(r4)
 2004284:	00800434 	movhi	r2,16
 2004288:	10bfffc4 	addi	r2,r2,-1
 200428c:	1808d53a 	srli	r4,r3,20
 2004290:	180cd7fa 	srli	r6,r3,31
 2004294:	1894703a 	and	r10,r3,r2
 2004298:	2201ffcc 	andi	r8,r4,2047
 200429c:	281b883a 	mov	r13,r5
 20042a0:	4817883a 	mov	r11,r9
 20042a4:	29800115 	stw	r6,4(r5)
 20042a8:	5019883a 	mov	r12,r10
 20042ac:	40001e1e 	bne	r8,zero,2004328 <__unpack_d+0xac>
 20042b0:	4a84b03a 	or	r2,r9,r10
 20042b4:	10001926 	beq	r2,zero,200431c <__unpack_d+0xa0>
 20042b8:	4804d63a 	srli	r2,r9,24
 20042bc:	500c923a 	slli	r6,r10,8
 20042c0:	013f0084 	movi	r4,-1022
 20042c4:	00c40034 	movhi	r3,4096
 20042c8:	18ffffc4 	addi	r3,r3,-1
 20042cc:	118cb03a 	or	r6,r2,r6
 20042d0:	008000c4 	movi	r2,3
 20042d4:	480a923a 	slli	r5,r9,8
 20042d8:	68800015 	stw	r2,0(r13)
 20042dc:	69000215 	stw	r4,8(r13)
 20042e0:	19800b36 	bltu	r3,r6,2004310 <__unpack_d+0x94>
 20042e4:	200f883a 	mov	r7,r4
 20042e8:	1811883a 	mov	r8,r3
 20042ec:	2945883a 	add	r2,r5,r5
 20042f0:	1149803a 	cmpltu	r4,r2,r5
 20042f4:	3187883a 	add	r3,r6,r6
 20042f8:	20c9883a 	add	r4,r4,r3
 20042fc:	100b883a 	mov	r5,r2
 2004300:	200d883a 	mov	r6,r4
 2004304:	39ffffc4 	addi	r7,r7,-1
 2004308:	413ff82e 	bgeu	r8,r4,20042ec <__unpack_d+0x70>
 200430c:	69c00215 	stw	r7,8(r13)
 2004310:	69800415 	stw	r6,16(r13)
 2004314:	69400315 	stw	r5,12(r13)
 2004318:	f800283a 	ret
 200431c:	00800084 	movi	r2,2
 2004320:	28800015 	stw	r2,0(r5)
 2004324:	f800283a 	ret
 2004328:	0081ffc4 	movi	r2,2047
 200432c:	40800f26 	beq	r8,r2,200436c <__unpack_d+0xf0>
 2004330:	480cd63a 	srli	r6,r9,24
 2004334:	5006923a 	slli	r3,r10,8
 2004338:	4804923a 	slli	r2,r9,8
 200433c:	0009883a 	mov	r4,zero
 2004340:	30c6b03a 	or	r3,r6,r3
 2004344:	01440034 	movhi	r5,4096
 2004348:	110cb03a 	or	r6,r2,r4
 200434c:	423f0044 	addi	r8,r8,-1023
 2004350:	194eb03a 	or	r7,r3,r5
 2004354:	008000c4 	movi	r2,3
 2004358:	69c00415 	stw	r7,16(r13)
 200435c:	6a000215 	stw	r8,8(r13)
 2004360:	68800015 	stw	r2,0(r13)
 2004364:	69800315 	stw	r6,12(r13)
 2004368:	f800283a 	ret
 200436c:	4a84b03a 	or	r2,r9,r10
 2004370:	1000031e 	bne	r2,zero,2004380 <__unpack_d+0x104>
 2004374:	00800104 	movi	r2,4
 2004378:	28800015 	stw	r2,0(r5)
 200437c:	f800283a 	ret
 2004380:	0009883a 	mov	r4,zero
 2004384:	01400234 	movhi	r5,8
 2004388:	4904703a 	and	r2,r9,r4
 200438c:	5146703a 	and	r3,r10,r5
 2004390:	10c4b03a 	or	r2,r2,r3
 2004394:	10000526 	beq	r2,zero,20043ac <__unpack_d+0x130>
 2004398:	00800044 	movi	r2,1
 200439c:	68800015 	stw	r2,0(r13)
 20043a0:	6b000415 	stw	r12,16(r13)
 20043a4:	6ac00315 	stw	r11,12(r13)
 20043a8:	f800283a 	ret
 20043ac:	68000015 	stw	zero,0(r13)
 20043b0:	003ffb06 	br	20043a0 <__unpack_d+0x124>

020043b4 <free>:
 20043b4:	00808074 	movhi	r2,513
 20043b8:	1085b404 	addi	r2,r2,5840
 20043bc:	200b883a 	mov	r5,r4
 20043c0:	11000017 	ldw	r4,0(r2)
 20043c4:	2008bf01 	jmpi	2008bf0 <_free_r>

020043c8 <malloc>:
 20043c8:	00808074 	movhi	r2,513
 20043cc:	1085b404 	addi	r2,r2,5840
 20043d0:	200b883a 	mov	r5,r4
 20043d4:	11000017 	ldw	r4,0(r2)
 20043d8:	20043dc1 	jmpi	20043dc <_malloc_r>

020043dc <_malloc_r>:
 20043dc:	defff604 	addi	sp,sp,-40
 20043e0:	28c002c4 	addi	r3,r5,11
 20043e4:	00800584 	movi	r2,22
 20043e8:	dc800215 	stw	r18,8(sp)
 20043ec:	dfc00915 	stw	ra,36(sp)
 20043f0:	df000815 	stw	fp,32(sp)
 20043f4:	ddc00715 	stw	r23,28(sp)
 20043f8:	dd800615 	stw	r22,24(sp)
 20043fc:	dd400515 	stw	r21,20(sp)
 2004400:	dd000415 	stw	r20,16(sp)
 2004404:	dcc00315 	stw	r19,12(sp)
 2004408:	dc400115 	stw	r17,4(sp)
 200440c:	dc000015 	stw	r16,0(sp)
 2004410:	2025883a 	mov	r18,r4
 2004414:	10c01236 	bltu	r2,r3,2004460 <_malloc_r+0x84>
 2004418:	04400404 	movi	r17,16
 200441c:	8940142e 	bgeu	r17,r5,2004470 <_malloc_r+0x94>
 2004420:	00800304 	movi	r2,12
 2004424:	0007883a 	mov	r3,zero
 2004428:	90800015 	stw	r2,0(r18)
 200442c:	1805883a 	mov	r2,r3
 2004430:	dfc00917 	ldw	ra,36(sp)
 2004434:	df000817 	ldw	fp,32(sp)
 2004438:	ddc00717 	ldw	r23,28(sp)
 200443c:	dd800617 	ldw	r22,24(sp)
 2004440:	dd400517 	ldw	r21,20(sp)
 2004444:	dd000417 	ldw	r20,16(sp)
 2004448:	dcc00317 	ldw	r19,12(sp)
 200444c:	dc800217 	ldw	r18,8(sp)
 2004450:	dc400117 	ldw	r17,4(sp)
 2004454:	dc000017 	ldw	r16,0(sp)
 2004458:	dec00a04 	addi	sp,sp,40
 200445c:	f800283a 	ret
 2004460:	00bffe04 	movi	r2,-8
 2004464:	18a2703a 	and	r17,r3,r2
 2004468:	883fed16 	blt	r17,zero,2004420 <_malloc_r+0x44>
 200446c:	897fec36 	bltu	r17,r5,2004420 <_malloc_r+0x44>
 2004470:	9009883a 	mov	r4,r18
 2004474:	200d5d00 	call	200d5d0 <__malloc_lock>
 2004478:	00807dc4 	movi	r2,503
 200447c:	14402b2e 	bgeu	r2,r17,200452c <_malloc_r+0x150>
 2004480:	8806d27a 	srli	r3,r17,9
 2004484:	18003f1e 	bne	r3,zero,2004584 <_malloc_r+0x1a8>
 2004488:	880cd0fa 	srli	r6,r17,3
 200448c:	300490fa 	slli	r2,r6,3
 2004490:	02c08074 	movhi	r11,513
 2004494:	5ac2fa04 	addi	r11,r11,3048
 2004498:	12cb883a 	add	r5,r2,r11
 200449c:	2c000317 	ldw	r16,12(r5)
 20044a0:	580f883a 	mov	r7,r11
 20044a4:	2c00041e 	bne	r5,r16,20044b8 <_malloc_r+0xdc>
 20044a8:	00000a06 	br	20044d4 <_malloc_r+0xf8>
 20044ac:	1800860e 	bge	r3,zero,20046c8 <_malloc_r+0x2ec>
 20044b0:	84000317 	ldw	r16,12(r16)
 20044b4:	2c000726 	beq	r5,r16,20044d4 <_malloc_r+0xf8>
 20044b8:	80800117 	ldw	r2,4(r16)
 20044bc:	00ffff04 	movi	r3,-4
 20044c0:	10c8703a 	and	r4,r2,r3
 20044c4:	2447c83a 	sub	r3,r4,r17
 20044c8:	008003c4 	movi	r2,15
 20044cc:	10fff70e 	bge	r2,r3,20044ac <_malloc_r+0xd0>
 20044d0:	31bfffc4 	addi	r6,r6,-1
 20044d4:	32400044 	addi	r9,r6,1
 20044d8:	02808074 	movhi	r10,513
 20044dc:	5282fc04 	addi	r10,r10,3056
 20044e0:	54000217 	ldw	r16,8(r10)
 20044e4:	8280a026 	beq	r16,r10,2004768 <_malloc_r+0x38c>
 20044e8:	80800117 	ldw	r2,4(r16)
 20044ec:	00ffff04 	movi	r3,-4
 20044f0:	10ca703a 	and	r5,r2,r3
 20044f4:	2c4dc83a 	sub	r6,r5,r17
 20044f8:	008003c4 	movi	r2,15
 20044fc:	11808316 	blt	r2,r6,200470c <_malloc_r+0x330>
 2004500:	52800315 	stw	r10,12(r10)
 2004504:	52800215 	stw	r10,8(r10)
 2004508:	30002916 	blt	r6,zero,20045b0 <_malloc_r+0x1d4>
 200450c:	8147883a 	add	r3,r16,r5
 2004510:	18800117 	ldw	r2,4(r3)
 2004514:	9009883a 	mov	r4,r18
 2004518:	10800054 	ori	r2,r2,1
 200451c:	18800115 	stw	r2,4(r3)
 2004520:	200d5f00 	call	200d5f0 <__malloc_unlock>
 2004524:	80c00204 	addi	r3,r16,8
 2004528:	003fc006 	br	200442c <_malloc_r+0x50>
 200452c:	02c08074 	movhi	r11,513
 2004530:	5ac2fa04 	addi	r11,r11,3048
 2004534:	8ac5883a 	add	r2,r17,r11
 2004538:	14000317 	ldw	r16,12(r2)
 200453c:	580f883a 	mov	r7,r11
 2004540:	8806d0fa 	srli	r3,r17,3
 2004544:	14006c26 	beq	r2,r16,20046f8 <_malloc_r+0x31c>
 2004548:	80c00117 	ldw	r3,4(r16)
 200454c:	00bfff04 	movi	r2,-4
 2004550:	81800317 	ldw	r6,12(r16)
 2004554:	1886703a 	and	r3,r3,r2
 2004558:	80c7883a 	add	r3,r16,r3
 200455c:	18800117 	ldw	r2,4(r3)
 2004560:	81400217 	ldw	r5,8(r16)
 2004564:	9009883a 	mov	r4,r18
 2004568:	10800054 	ori	r2,r2,1
 200456c:	18800115 	stw	r2,4(r3)
 2004570:	31400215 	stw	r5,8(r6)
 2004574:	29800315 	stw	r6,12(r5)
 2004578:	200d5f00 	call	200d5f0 <__malloc_unlock>
 200457c:	80c00204 	addi	r3,r16,8
 2004580:	003faa06 	br	200442c <_malloc_r+0x50>
 2004584:	00800104 	movi	r2,4
 2004588:	10c0052e 	bgeu	r2,r3,20045a0 <_malloc_r+0x1c4>
 200458c:	00800504 	movi	r2,20
 2004590:	10c07836 	bltu	r2,r3,2004774 <_malloc_r+0x398>
 2004594:	198016c4 	addi	r6,r3,91
 2004598:	300490fa 	slli	r2,r6,3
 200459c:	003fbc06 	br	2004490 <_malloc_r+0xb4>
 20045a0:	8804d1ba 	srli	r2,r17,6
 20045a4:	11800e04 	addi	r6,r2,56
 20045a8:	300490fa 	slli	r2,r6,3
 20045ac:	003fb806 	br	2004490 <_malloc_r+0xb4>
 20045b0:	00807fc4 	movi	r2,511
 20045b4:	1140bb36 	bltu	r2,r5,20048a4 <_malloc_r+0x4c8>
 20045b8:	2806d0fa 	srli	r3,r5,3
 20045bc:	573ffe04 	addi	fp,r10,-8
 20045c0:	00800044 	movi	r2,1
 20045c4:	180890fa 	slli	r4,r3,3
 20045c8:	1807d0ba 	srai	r3,r3,2
 20045cc:	e1c00117 	ldw	r7,4(fp)
 20045d0:	5909883a 	add	r4,r11,r4
 20045d4:	21400217 	ldw	r5,8(r4)
 20045d8:	10c4983a 	sll	r2,r2,r3
 20045dc:	81000315 	stw	r4,12(r16)
 20045e0:	81400215 	stw	r5,8(r16)
 20045e4:	388eb03a 	or	r7,r7,r2
 20045e8:	2c000315 	stw	r16,12(r5)
 20045ec:	24000215 	stw	r16,8(r4)
 20045f0:	e1c00115 	stw	r7,4(fp)
 20045f4:	4807883a 	mov	r3,r9
 20045f8:	4800cd16 	blt	r9,zero,2004930 <_malloc_r+0x554>
 20045fc:	1807d0ba 	srai	r3,r3,2
 2004600:	00800044 	movi	r2,1
 2004604:	10c8983a 	sll	r4,r2,r3
 2004608:	39004436 	bltu	r7,r4,200471c <_malloc_r+0x340>
 200460c:	21c4703a 	and	r2,r4,r7
 2004610:	10000a1e 	bne	r2,zero,200463c <_malloc_r+0x260>
 2004614:	2109883a 	add	r4,r4,r4
 2004618:	00bfff04 	movi	r2,-4
 200461c:	4884703a 	and	r2,r9,r2
 2004620:	3906703a 	and	r3,r7,r4
 2004624:	12400104 	addi	r9,r2,4
 2004628:	1800041e 	bne	r3,zero,200463c <_malloc_r+0x260>
 200462c:	2109883a 	add	r4,r4,r4
 2004630:	3904703a 	and	r2,r7,r4
 2004634:	4a400104 	addi	r9,r9,4
 2004638:	103ffc26 	beq	r2,zero,200462c <_malloc_r+0x250>
 200463c:	480490fa 	slli	r2,r9,3
 2004640:	4819883a 	mov	r12,r9
 2004644:	023fff04 	movi	r8,-4
 2004648:	589b883a 	add	r13,r11,r2
 200464c:	6807883a 	mov	r3,r13
 2004650:	014003c4 	movi	r5,15
 2004654:	1c000317 	ldw	r16,12(r3)
 2004658:	1c00041e 	bne	r3,r16,200466c <_malloc_r+0x290>
 200465c:	0000a706 	br	20048fc <_malloc_r+0x520>
 2004660:	3000ab0e 	bge	r6,zero,2004910 <_malloc_r+0x534>
 2004664:	84000317 	ldw	r16,12(r16)
 2004668:	1c00a426 	beq	r3,r16,20048fc <_malloc_r+0x520>
 200466c:	80800117 	ldw	r2,4(r16)
 2004670:	1204703a 	and	r2,r2,r8
 2004674:	144dc83a 	sub	r6,r2,r17
 2004678:	29bff90e 	bge	r5,r6,2004660 <_malloc_r+0x284>
 200467c:	81000317 	ldw	r4,12(r16)
 2004680:	80c00217 	ldw	r3,8(r16)
 2004684:	89400054 	ori	r5,r17,1
 2004688:	8445883a 	add	r2,r16,r17
 200468c:	20c00215 	stw	r3,8(r4)
 2004690:	19000315 	stw	r4,12(r3)
 2004694:	81400115 	stw	r5,4(r16)
 2004698:	1187883a 	add	r3,r2,r6
 200469c:	31000054 	ori	r4,r6,1
 20046a0:	50800315 	stw	r2,12(r10)
 20046a4:	50800215 	stw	r2,8(r10)
 20046a8:	19800015 	stw	r6,0(r3)
 20046ac:	11000115 	stw	r4,4(r2)
 20046b0:	12800215 	stw	r10,8(r2)
 20046b4:	12800315 	stw	r10,12(r2)
 20046b8:	9009883a 	mov	r4,r18
 20046bc:	200d5f00 	call	200d5f0 <__malloc_unlock>
 20046c0:	80c00204 	addi	r3,r16,8
 20046c4:	003f5906 	br	200442c <_malloc_r+0x50>
 20046c8:	8109883a 	add	r4,r16,r4
 20046cc:	20800117 	ldw	r2,4(r4)
 20046d0:	80c00217 	ldw	r3,8(r16)
 20046d4:	81400317 	ldw	r5,12(r16)
 20046d8:	10800054 	ori	r2,r2,1
 20046dc:	20800115 	stw	r2,4(r4)
 20046e0:	28c00215 	stw	r3,8(r5)
 20046e4:	19400315 	stw	r5,12(r3)
 20046e8:	9009883a 	mov	r4,r18
 20046ec:	200d5f00 	call	200d5f0 <__malloc_unlock>
 20046f0:	80c00204 	addi	r3,r16,8
 20046f4:	003f4d06 	br	200442c <_malloc_r+0x50>
 20046f8:	80800204 	addi	r2,r16,8
 20046fc:	14000317 	ldw	r16,12(r2)
 2004700:	143f911e 	bne	r2,r16,2004548 <_malloc_r+0x16c>
 2004704:	1a400084 	addi	r9,r3,2
 2004708:	003f7306 	br	20044d8 <_malloc_r+0xfc>
 200470c:	88c00054 	ori	r3,r17,1
 2004710:	8445883a 	add	r2,r16,r17
 2004714:	80c00115 	stw	r3,4(r16)
 2004718:	003fdf06 	br	2004698 <_malloc_r+0x2bc>
 200471c:	e4000217 	ldw	r16,8(fp)
 2004720:	00bfff04 	movi	r2,-4
 2004724:	80c00117 	ldw	r3,4(r16)
 2004728:	802d883a 	mov	r22,r16
 200472c:	18aa703a 	and	r21,r3,r2
 2004730:	ac401636 	bltu	r21,r17,200478c <_malloc_r+0x3b0>
 2004734:	ac49c83a 	sub	r4,r21,r17
 2004738:	008003c4 	movi	r2,15
 200473c:	1100130e 	bge	r2,r4,200478c <_malloc_r+0x3b0>
 2004740:	88800054 	ori	r2,r17,1
 2004744:	8447883a 	add	r3,r16,r17
 2004748:	80800115 	stw	r2,4(r16)
 200474c:	20800054 	ori	r2,r4,1
 2004750:	18800115 	stw	r2,4(r3)
 2004754:	e0c00215 	stw	r3,8(fp)
 2004758:	9009883a 	mov	r4,r18
 200475c:	200d5f00 	call	200d5f0 <__malloc_unlock>
 2004760:	80c00204 	addi	r3,r16,8
 2004764:	003f3106 	br	200442c <_malloc_r+0x50>
 2004768:	39c00117 	ldw	r7,4(r7)
 200476c:	573ffe04 	addi	fp,r10,-8
 2004770:	003fa006 	br	20045f4 <_malloc_r+0x218>
 2004774:	00801504 	movi	r2,84
 2004778:	10c06736 	bltu	r2,r3,2004918 <_malloc_r+0x53c>
 200477c:	8804d33a 	srli	r2,r17,12
 2004780:	11801b84 	addi	r6,r2,110
 2004784:	300490fa 	slli	r2,r6,3
 2004788:	003f4106 	br	2004490 <_malloc_r+0xb4>
 200478c:	d0a2e317 	ldw	r2,-29812(gp)
 2004790:	d0e00217 	ldw	r3,-32760(gp)
 2004794:	053fffc4 	movi	r20,-1
 2004798:	10800404 	addi	r2,r2,16
 200479c:	88a7883a 	add	r19,r17,r2
 20047a0:	1d000326 	beq	r3,r20,20047b0 <_malloc_r+0x3d4>
 20047a4:	98c3ffc4 	addi	r3,r19,4095
 20047a8:	00bc0004 	movi	r2,-4096
 20047ac:	18a6703a 	and	r19,r3,r2
 20047b0:	9009883a 	mov	r4,r18
 20047b4:	980b883a 	mov	r5,r19
 20047b8:	2004c480 	call	2004c48 <_sbrk_r>
 20047bc:	1009883a 	mov	r4,r2
 20047c0:	15000426 	beq	r2,r20,20047d4 <_malloc_r+0x3f8>
 20047c4:	854b883a 	add	r5,r16,r21
 20047c8:	1029883a 	mov	r20,r2
 20047cc:	11405a2e 	bgeu	r2,r5,2004938 <_malloc_r+0x55c>
 20047d0:	87000c26 	beq	r16,fp,2004804 <_malloc_r+0x428>
 20047d4:	e4000217 	ldw	r16,8(fp)
 20047d8:	80c00117 	ldw	r3,4(r16)
 20047dc:	00bfff04 	movi	r2,-4
 20047e0:	1884703a 	and	r2,r3,r2
 20047e4:	14400336 	bltu	r2,r17,20047f4 <_malloc_r+0x418>
 20047e8:	1449c83a 	sub	r4,r2,r17
 20047ec:	008003c4 	movi	r2,15
 20047f0:	113fd316 	blt	r2,r4,2004740 <_malloc_r+0x364>
 20047f4:	9009883a 	mov	r4,r18
 20047f8:	200d5f00 	call	200d5f0 <__malloc_unlock>
 20047fc:	0007883a 	mov	r3,zero
 2004800:	003f0a06 	br	200442c <_malloc_r+0x50>
 2004804:	05c08074 	movhi	r23,513
 2004808:	bdc8a104 	addi	r23,r23,8836
 200480c:	b8800017 	ldw	r2,0(r23)
 2004810:	988d883a 	add	r6,r19,r2
 2004814:	b9800015 	stw	r6,0(r23)
 2004818:	d0e00217 	ldw	r3,-32760(gp)
 200481c:	00bfffc4 	movi	r2,-1
 2004820:	18808e26 	beq	r3,r2,2004a5c <_malloc_r+0x680>
 2004824:	2145c83a 	sub	r2,r4,r5
 2004828:	3085883a 	add	r2,r6,r2
 200482c:	b8800015 	stw	r2,0(r23)
 2004830:	20c001cc 	andi	r3,r4,7
 2004834:	18005f1e 	bne	r3,zero,20049b4 <_malloc_r+0x5d8>
 2004838:	000b883a 	mov	r5,zero
 200483c:	a4c5883a 	add	r2,r20,r19
 2004840:	1083ffcc 	andi	r2,r2,4095
 2004844:	00c40004 	movi	r3,4096
 2004848:	1887c83a 	sub	r3,r3,r2
 200484c:	28e7883a 	add	r19,r5,r3
 2004850:	9009883a 	mov	r4,r18
 2004854:	980b883a 	mov	r5,r19
 2004858:	2004c480 	call	2004c48 <_sbrk_r>
 200485c:	1007883a 	mov	r3,r2
 2004860:	00bfffc4 	movi	r2,-1
 2004864:	18807a26 	beq	r3,r2,2004a50 <_malloc_r+0x674>
 2004868:	1d05c83a 	sub	r2,r3,r20
 200486c:	9885883a 	add	r2,r19,r2
 2004870:	10c00054 	ori	r3,r2,1
 2004874:	b8800017 	ldw	r2,0(r23)
 2004878:	a021883a 	mov	r16,r20
 200487c:	a0c00115 	stw	r3,4(r20)
 2004880:	9885883a 	add	r2,r19,r2
 2004884:	b8800015 	stw	r2,0(r23)
 2004888:	e5000215 	stw	r20,8(fp)
 200488c:	b7003626 	beq	r22,fp,2004968 <_malloc_r+0x58c>
 2004890:	018003c4 	movi	r6,15
 2004894:	35404b36 	bltu	r6,r21,20049c4 <_malloc_r+0x5e8>
 2004898:	00800044 	movi	r2,1
 200489c:	a0800115 	stw	r2,4(r20)
 20048a0:	003fcd06 	br	20047d8 <_malloc_r+0x3fc>
 20048a4:	2808d27a 	srli	r4,r5,9
 20048a8:	2000371e 	bne	r4,zero,2004988 <_malloc_r+0x5ac>
 20048ac:	2808d0fa 	srli	r4,r5,3
 20048b0:	200690fa 	slli	r3,r4,3
 20048b4:	1ad1883a 	add	r8,r3,r11
 20048b8:	41800217 	ldw	r6,8(r8)
 20048bc:	41805b26 	beq	r8,r6,2004a2c <_malloc_r+0x650>
 20048c0:	30800117 	ldw	r2,4(r6)
 20048c4:	00ffff04 	movi	r3,-4
 20048c8:	10c4703a 	and	r2,r2,r3
 20048cc:	2880022e 	bgeu	r5,r2,20048d8 <_malloc_r+0x4fc>
 20048d0:	31800217 	ldw	r6,8(r6)
 20048d4:	41bffa1e 	bne	r8,r6,20048c0 <_malloc_r+0x4e4>
 20048d8:	32000317 	ldw	r8,12(r6)
 20048dc:	39c00117 	ldw	r7,4(r7)
 20048e0:	82000315 	stw	r8,12(r16)
 20048e4:	81800215 	stw	r6,8(r16)
 20048e8:	07008074 	movhi	fp,513
 20048ec:	e702fa04 	addi	fp,fp,3048
 20048f0:	34000315 	stw	r16,12(r6)
 20048f4:	44000215 	stw	r16,8(r8)
 20048f8:	003f3e06 	br	20045f4 <_malloc_r+0x218>
 20048fc:	63000044 	addi	r12,r12,1
 2004900:	608000cc 	andi	r2,r12,3
 2004904:	10005d26 	beq	r2,zero,2004a7c <_malloc_r+0x6a0>
 2004908:	18c00204 	addi	r3,r3,8
 200490c:	003f5106 	br	2004654 <_malloc_r+0x278>
 2004910:	8089883a 	add	r4,r16,r2
 2004914:	003f6d06 	br	20046cc <_malloc_r+0x2f0>
 2004918:	00805504 	movi	r2,340
 200491c:	10c02036 	bltu	r2,r3,20049a0 <_malloc_r+0x5c4>
 2004920:	8804d3fa 	srli	r2,r17,15
 2004924:	11801dc4 	addi	r6,r2,119
 2004928:	300490fa 	slli	r2,r6,3
 200492c:	003ed806 	br	2004490 <_malloc_r+0xb4>
 2004930:	48c000c4 	addi	r3,r9,3
 2004934:	003f3106 	br	20045fc <_malloc_r+0x220>
 2004938:	05c08074 	movhi	r23,513
 200493c:	bdc8a104 	addi	r23,r23,8836
 2004940:	b8800017 	ldw	r2,0(r23)
 2004944:	988d883a 	add	r6,r19,r2
 2004948:	b9800015 	stw	r6,0(r23)
 200494c:	293fb21e 	bne	r5,r4,2004818 <_malloc_r+0x43c>
 2004950:	2083ffcc 	andi	r2,r4,4095
 2004954:	103fb01e 	bne	r2,zero,2004818 <_malloc_r+0x43c>
 2004958:	e4000217 	ldw	r16,8(fp)
 200495c:	9d45883a 	add	r2,r19,r21
 2004960:	10800054 	ori	r2,r2,1
 2004964:	80800115 	stw	r2,4(r16)
 2004968:	b8c00017 	ldw	r3,0(r23)
 200496c:	d0a2e417 	ldw	r2,-29808(gp)
 2004970:	10c0012e 	bgeu	r2,r3,2004978 <_malloc_r+0x59c>
 2004974:	d0e2e415 	stw	r3,-29808(gp)
 2004978:	d0a2e517 	ldw	r2,-29804(gp)
 200497c:	10ff962e 	bgeu	r2,r3,20047d8 <_malloc_r+0x3fc>
 2004980:	d0e2e515 	stw	r3,-29804(gp)
 2004984:	003f9406 	br	20047d8 <_malloc_r+0x3fc>
 2004988:	00800104 	movi	r2,4
 200498c:	11001e36 	bltu	r2,r4,2004a08 <_malloc_r+0x62c>
 2004990:	2804d1ba 	srli	r2,r5,6
 2004994:	11000e04 	addi	r4,r2,56
 2004998:	200690fa 	slli	r3,r4,3
 200499c:	003fc506 	br	20048b4 <_malloc_r+0x4d8>
 20049a0:	00815504 	movi	r2,1364
 20049a4:	10c01d2e 	bgeu	r2,r3,2004a1c <_malloc_r+0x640>
 20049a8:	01801f84 	movi	r6,126
 20049ac:	0080fc04 	movi	r2,1008
 20049b0:	003eb706 	br	2004490 <_malloc_r+0xb4>
 20049b4:	00800204 	movi	r2,8
 20049b8:	10cbc83a 	sub	r5,r2,r3
 20049bc:	2169883a 	add	r20,r4,r5
 20049c0:	003f9e06 	br	200483c <_malloc_r+0x460>
 20049c4:	00bffe04 	movi	r2,-8
 20049c8:	a93ffd04 	addi	r4,r21,-12
 20049cc:	2088703a 	and	r4,r4,r2
 20049d0:	b10b883a 	add	r5,r22,r4
 20049d4:	00c00144 	movi	r3,5
 20049d8:	28c00215 	stw	r3,8(r5)
 20049dc:	28c00115 	stw	r3,4(r5)
 20049e0:	b0800117 	ldw	r2,4(r22)
 20049e4:	1080004c 	andi	r2,r2,1
 20049e8:	2084b03a 	or	r2,r4,r2
 20049ec:	b0800115 	stw	r2,4(r22)
 20049f0:	313fdd2e 	bgeu	r6,r4,2004968 <_malloc_r+0x58c>
 20049f4:	b1400204 	addi	r5,r22,8
 20049f8:	9009883a 	mov	r4,r18
 20049fc:	2008bf00 	call	2008bf0 <_free_r>
 2004a00:	e4000217 	ldw	r16,8(fp)
 2004a04:	003fd806 	br	2004968 <_malloc_r+0x58c>
 2004a08:	00800504 	movi	r2,20
 2004a0c:	11001536 	bltu	r2,r4,2004a64 <_malloc_r+0x688>
 2004a10:	210016c4 	addi	r4,r4,91
 2004a14:	200690fa 	slli	r3,r4,3
 2004a18:	003fa606 	br	20048b4 <_malloc_r+0x4d8>
 2004a1c:	8804d4ba 	srli	r2,r17,18
 2004a20:	11801f04 	addi	r6,r2,124
 2004a24:	300490fa 	slli	r2,r6,3
 2004a28:	003e9906 	br	2004490 <_malloc_r+0xb4>
 2004a2c:	2009d0ba 	srai	r4,r4,2
 2004a30:	01408074 	movhi	r5,513
 2004a34:	2942fa04 	addi	r5,r5,3048
 2004a38:	00c00044 	movi	r3,1
 2004a3c:	28800117 	ldw	r2,4(r5)
 2004a40:	1906983a 	sll	r3,r3,r4
 2004a44:	10c4b03a 	or	r2,r2,r3
 2004a48:	28800115 	stw	r2,4(r5)
 2004a4c:	003fa306 	br	20048dc <_malloc_r+0x500>
 2004a50:	0027883a 	mov	r19,zero
 2004a54:	00c00044 	movi	r3,1
 2004a58:	003f8606 	br	2004874 <_malloc_r+0x498>
 2004a5c:	d1200215 	stw	r4,-32760(gp)
 2004a60:	003f7306 	br	2004830 <_malloc_r+0x454>
 2004a64:	00801504 	movi	r2,84
 2004a68:	11001936 	bltu	r2,r4,2004ad0 <_malloc_r+0x6f4>
 2004a6c:	2804d33a 	srli	r2,r5,12
 2004a70:	11001b84 	addi	r4,r2,110
 2004a74:	200690fa 	slli	r3,r4,3
 2004a78:	003f8e06 	br	20048b4 <_malloc_r+0x4d8>
 2004a7c:	480b883a 	mov	r5,r9
 2004a80:	6807883a 	mov	r3,r13
 2004a84:	288000cc 	andi	r2,r5,3
 2004a88:	18fffe04 	addi	r3,r3,-8
 2004a8c:	297fffc4 	addi	r5,r5,-1
 2004a90:	10001526 	beq	r2,zero,2004ae8 <_malloc_r+0x70c>
 2004a94:	18800217 	ldw	r2,8(r3)
 2004a98:	10fffa26 	beq	r2,r3,2004a84 <_malloc_r+0x6a8>
 2004a9c:	2109883a 	add	r4,r4,r4
 2004aa0:	393f1e36 	bltu	r7,r4,200471c <_malloc_r+0x340>
 2004aa4:	203f1d26 	beq	r4,zero,200471c <_malloc_r+0x340>
 2004aa8:	21c4703a 	and	r2,r4,r7
 2004aac:	10000226 	beq	r2,zero,2004ab8 <_malloc_r+0x6dc>
 2004ab0:	6013883a 	mov	r9,r12
 2004ab4:	003ee106 	br	200463c <_malloc_r+0x260>
 2004ab8:	2109883a 	add	r4,r4,r4
 2004abc:	3904703a 	and	r2,r7,r4
 2004ac0:	63000104 	addi	r12,r12,4
 2004ac4:	103ffc26 	beq	r2,zero,2004ab8 <_malloc_r+0x6dc>
 2004ac8:	6013883a 	mov	r9,r12
 2004acc:	003edb06 	br	200463c <_malloc_r+0x260>
 2004ad0:	00805504 	movi	r2,340
 2004ad4:	11000836 	bltu	r2,r4,2004af8 <_malloc_r+0x71c>
 2004ad8:	2804d3fa 	srli	r2,r5,15
 2004adc:	11001dc4 	addi	r4,r2,119
 2004ae0:	200690fa 	slli	r3,r4,3
 2004ae4:	003f7306 	br	20048b4 <_malloc_r+0x4d8>
 2004ae8:	0104303a 	nor	r2,zero,r4
 2004aec:	388e703a 	and	r7,r7,r2
 2004af0:	e1c00115 	stw	r7,4(fp)
 2004af4:	003fe906 	br	2004a9c <_malloc_r+0x6c0>
 2004af8:	00815504 	movi	r2,1364
 2004afc:	1100032e 	bgeu	r2,r4,2004b0c <_malloc_r+0x730>
 2004b00:	01001f84 	movi	r4,126
 2004b04:	00c0fc04 	movi	r3,1008
 2004b08:	003f6a06 	br	20048b4 <_malloc_r+0x4d8>
 2004b0c:	2804d4ba 	srli	r2,r5,18
 2004b10:	11001f04 	addi	r4,r2,124
 2004b14:	200690fa 	slli	r3,r4,3
 2004b18:	003f6606 	br	20048b4 <_malloc_r+0x4d8>

02004b1c <printf>:
 2004b1c:	defffb04 	addi	sp,sp,-20
 2004b20:	dfc00115 	stw	ra,4(sp)
 2004b24:	d9400215 	stw	r5,8(sp)
 2004b28:	d9800315 	stw	r6,12(sp)
 2004b2c:	d9c00415 	stw	r7,16(sp)
 2004b30:	00808074 	movhi	r2,513
 2004b34:	1085b404 	addi	r2,r2,5840
 2004b38:	10c00017 	ldw	r3,0(r2)
 2004b3c:	200b883a 	mov	r5,r4
 2004b40:	d8800204 	addi	r2,sp,8
 2004b44:	19000217 	ldw	r4,8(r3)
 2004b48:	100d883a 	mov	r6,r2
 2004b4c:	d8800015 	stw	r2,0(sp)
 2004b50:	2006c480 	call	2006c48 <__vfprintf_internal>
 2004b54:	dfc00117 	ldw	ra,4(sp)
 2004b58:	dec00504 	addi	sp,sp,20
 2004b5c:	f800283a 	ret

02004b60 <_printf_r>:
 2004b60:	defffc04 	addi	sp,sp,-16
 2004b64:	dfc00115 	stw	ra,4(sp)
 2004b68:	d9800215 	stw	r6,8(sp)
 2004b6c:	d9c00315 	stw	r7,12(sp)
 2004b70:	280d883a 	mov	r6,r5
 2004b74:	21400217 	ldw	r5,8(r4)
 2004b78:	d8c00204 	addi	r3,sp,8
 2004b7c:	180f883a 	mov	r7,r3
 2004b80:	d8c00015 	stw	r3,0(sp)
 2004b84:	2004d840 	call	2004d84 <___vfprintf_internal_r>
 2004b88:	dfc00117 	ldw	ra,4(sp)
 2004b8c:	dec00404 	addi	sp,sp,16
 2004b90:	f800283a 	ret

02004b94 <_puts_r>:
 2004b94:	defff604 	addi	sp,sp,-40
 2004b98:	dc400715 	stw	r17,28(sp)
 2004b9c:	2023883a 	mov	r17,r4
 2004ba0:	2809883a 	mov	r4,r5
 2004ba4:	dfc00915 	stw	ra,36(sp)
 2004ba8:	dcc00815 	stw	r19,32(sp)
 2004bac:	2827883a 	mov	r19,r5
 2004bb0:	2004cb80 	call	2004cb8 <strlen>
 2004bb4:	89400217 	ldw	r5,8(r17)
 2004bb8:	00c08074 	movhi	r3,513
 2004bbc:	18c26a04 	addi	r3,r3,2472
 2004bc0:	01c00044 	movi	r7,1
 2004bc4:	12000044 	addi	r8,r2,1
 2004bc8:	d8c00515 	stw	r3,20(sp)
 2004bcc:	d9c00615 	stw	r7,24(sp)
 2004bd0:	d8c00304 	addi	r3,sp,12
 2004bd4:	01c00084 	movi	r7,2
 2004bd8:	8809883a 	mov	r4,r17
 2004bdc:	d80d883a 	mov	r6,sp
 2004be0:	d8c00015 	stw	r3,0(sp)
 2004be4:	dcc00315 	stw	r19,12(sp)
 2004be8:	da000215 	stw	r8,8(sp)
 2004bec:	d9c00115 	stw	r7,4(sp)
 2004bf0:	d8800415 	stw	r2,16(sp)
 2004bf4:	2008f040 	call	2008f04 <__sfvwrite_r>
 2004bf8:	00ffffc4 	movi	r3,-1
 2004bfc:	10000626 	beq	r2,zero,2004c18 <_puts_r+0x84>
 2004c00:	1805883a 	mov	r2,r3
 2004c04:	dfc00917 	ldw	ra,36(sp)
 2004c08:	dcc00817 	ldw	r19,32(sp)
 2004c0c:	dc400717 	ldw	r17,28(sp)
 2004c10:	dec00a04 	addi	sp,sp,40
 2004c14:	f800283a 	ret
 2004c18:	00c00284 	movi	r3,10
 2004c1c:	1805883a 	mov	r2,r3
 2004c20:	dfc00917 	ldw	ra,36(sp)
 2004c24:	dcc00817 	ldw	r19,32(sp)
 2004c28:	dc400717 	ldw	r17,28(sp)
 2004c2c:	dec00a04 	addi	sp,sp,40
 2004c30:	f800283a 	ret

02004c34 <puts>:
 2004c34:	00808074 	movhi	r2,513
 2004c38:	1085b404 	addi	r2,r2,5840
 2004c3c:	200b883a 	mov	r5,r4
 2004c40:	11000017 	ldw	r4,0(r2)
 2004c44:	2004b941 	jmpi	2004b94 <_puts_r>

02004c48 <_sbrk_r>:
 2004c48:	defffd04 	addi	sp,sp,-12
 2004c4c:	dc000015 	stw	r16,0(sp)
 2004c50:	04008074 	movhi	r16,513
 2004c54:	84089704 	addi	r16,r16,8796
 2004c58:	dc400115 	stw	r17,4(sp)
 2004c5c:	80000015 	stw	zero,0(r16)
 2004c60:	2023883a 	mov	r17,r4
 2004c64:	2809883a 	mov	r4,r5
 2004c68:	dfc00215 	stw	ra,8(sp)
 2004c6c:	200d80c0 	call	200d80c <sbrk>
 2004c70:	1007883a 	mov	r3,r2
 2004c74:	00bfffc4 	movi	r2,-1
 2004c78:	18800626 	beq	r3,r2,2004c94 <_sbrk_r+0x4c>
 2004c7c:	1805883a 	mov	r2,r3
 2004c80:	dfc00217 	ldw	ra,8(sp)
 2004c84:	dc400117 	ldw	r17,4(sp)
 2004c88:	dc000017 	ldw	r16,0(sp)
 2004c8c:	dec00304 	addi	sp,sp,12
 2004c90:	f800283a 	ret
 2004c94:	80800017 	ldw	r2,0(r16)
 2004c98:	103ff826 	beq	r2,zero,2004c7c <_sbrk_r+0x34>
 2004c9c:	88800015 	stw	r2,0(r17)
 2004ca0:	1805883a 	mov	r2,r3
 2004ca4:	dfc00217 	ldw	ra,8(sp)
 2004ca8:	dc400117 	ldw	r17,4(sp)
 2004cac:	dc000017 	ldw	r16,0(sp)
 2004cb0:	dec00304 	addi	sp,sp,12
 2004cb4:	f800283a 	ret

02004cb8 <strlen>:
 2004cb8:	208000cc 	andi	r2,r4,3
 2004cbc:	2011883a 	mov	r8,r4
 2004cc0:	1000161e 	bne	r2,zero,2004d1c <strlen+0x64>
 2004cc4:	20c00017 	ldw	r3,0(r4)
 2004cc8:	017fbff4 	movhi	r5,65279
 2004ccc:	297fbfc4 	addi	r5,r5,-257
 2004cd0:	01e02074 	movhi	r7,32897
 2004cd4:	39e02004 	addi	r7,r7,-32640
 2004cd8:	1945883a 	add	r2,r3,r5
 2004cdc:	11c4703a 	and	r2,r2,r7
 2004ce0:	00c6303a 	nor	r3,zero,r3
 2004ce4:	1886703a 	and	r3,r3,r2
 2004ce8:	18000c1e 	bne	r3,zero,2004d1c <strlen+0x64>
 2004cec:	280d883a 	mov	r6,r5
 2004cf0:	380b883a 	mov	r5,r7
 2004cf4:	21000104 	addi	r4,r4,4
 2004cf8:	20800017 	ldw	r2,0(r4)
 2004cfc:	1187883a 	add	r3,r2,r6
 2004d00:	1946703a 	and	r3,r3,r5
 2004d04:	0084303a 	nor	r2,zero,r2
 2004d08:	10c4703a 	and	r2,r2,r3
 2004d0c:	103ff926 	beq	r2,zero,2004cf4 <strlen+0x3c>
 2004d10:	20800007 	ldb	r2,0(r4)
 2004d14:	10000326 	beq	r2,zero,2004d24 <strlen+0x6c>
 2004d18:	21000044 	addi	r4,r4,1
 2004d1c:	20800007 	ldb	r2,0(r4)
 2004d20:	103ffd1e 	bne	r2,zero,2004d18 <strlen+0x60>
 2004d24:	2205c83a 	sub	r2,r4,r8
 2004d28:	f800283a 	ret

02004d2c <__sprint_r>:
 2004d2c:	30800217 	ldw	r2,8(r6)
 2004d30:	defffe04 	addi	sp,sp,-8
 2004d34:	dc000015 	stw	r16,0(sp)
 2004d38:	dfc00115 	stw	ra,4(sp)
 2004d3c:	3021883a 	mov	r16,r6
 2004d40:	0007883a 	mov	r3,zero
 2004d44:	1000061e 	bne	r2,zero,2004d60 <__sprint_r+0x34>
 2004d48:	1805883a 	mov	r2,r3
 2004d4c:	30000115 	stw	zero,4(r6)
 2004d50:	dfc00117 	ldw	ra,4(sp)
 2004d54:	dc000017 	ldw	r16,0(sp)
 2004d58:	dec00204 	addi	sp,sp,8
 2004d5c:	f800283a 	ret
 2004d60:	2008f040 	call	2008f04 <__sfvwrite_r>
 2004d64:	1007883a 	mov	r3,r2
 2004d68:	1805883a 	mov	r2,r3
 2004d6c:	80000115 	stw	zero,4(r16)
 2004d70:	80000215 	stw	zero,8(r16)
 2004d74:	dfc00117 	ldw	ra,4(sp)
 2004d78:	dc000017 	ldw	r16,0(sp)
 2004d7c:	dec00204 	addi	sp,sp,8
 2004d80:	f800283a 	ret

02004d84 <___vfprintf_internal_r>:
 2004d84:	defea404 	addi	sp,sp,-1392
 2004d88:	dd815815 	stw	r22,1376(sp)
 2004d8c:	dc015215 	stw	r16,1352(sp)
 2004d90:	d9c15115 	stw	r7,1348(sp)
 2004d94:	dfc15b15 	stw	ra,1388(sp)
 2004d98:	df015a15 	stw	fp,1384(sp)
 2004d9c:	ddc15915 	stw	r23,1380(sp)
 2004da0:	dd415715 	stw	r21,1372(sp)
 2004da4:	dd015615 	stw	r20,1368(sp)
 2004da8:	dcc15515 	stw	r19,1364(sp)
 2004dac:	dc815415 	stw	r18,1360(sp)
 2004db0:	dc415315 	stw	r17,1356(sp)
 2004db4:	282d883a 	mov	r22,r5
 2004db8:	3021883a 	mov	r16,r6
 2004dbc:	d9014f15 	stw	r4,1340(sp)
 2004dc0:	20095280 	call	2009528 <_localeconv_r>
 2004dc4:	10800017 	ldw	r2,0(r2)
 2004dc8:	d9c15117 	ldw	r7,1348(sp)
 2004dcc:	d8814915 	stw	r2,1316(sp)
 2004dd0:	d8814f17 	ldw	r2,1340(sp)
 2004dd4:	10000226 	beq	r2,zero,2004de0 <___vfprintf_internal_r+0x5c>
 2004dd8:	10800e17 	ldw	r2,56(r2)
 2004ddc:	10020d26 	beq	r2,zero,2005614 <___vfprintf_internal_r+0x890>
 2004de0:	b080030b 	ldhu	r2,12(r22)
 2004de4:	1080020c 	andi	r2,r2,8
 2004de8:	10020e26 	beq	r2,zero,2005624 <___vfprintf_internal_r+0x8a0>
 2004dec:	b0800417 	ldw	r2,16(r22)
 2004df0:	10020c26 	beq	r2,zero,2005624 <___vfprintf_internal_r+0x8a0>
 2004df4:	b200030b 	ldhu	r8,12(r22)
 2004df8:	00800284 	movi	r2,10
 2004dfc:	40c0068c 	andi	r3,r8,26
 2004e00:	18802f1e 	bne	r3,r2,2004ec0 <___vfprintf_internal_r+0x13c>
 2004e04:	b080038f 	ldh	r2,14(r22)
 2004e08:	10002d16 	blt	r2,zero,2004ec0 <___vfprintf_internal_r+0x13c>
 2004e0c:	b240038b 	ldhu	r9,14(r22)
 2004e10:	b2800717 	ldw	r10,28(r22)
 2004e14:	b2c00917 	ldw	r11,36(r22)
 2004e18:	d9014f17 	ldw	r4,1340(sp)
 2004e1c:	dc402904 	addi	r17,sp,164
 2004e20:	d8804004 	addi	r2,sp,256
 2004e24:	00c10004 	movi	r3,1024
 2004e28:	423fff4c 	andi	r8,r8,65533
 2004e2c:	800d883a 	mov	r6,r16
 2004e30:	880b883a 	mov	r5,r17
 2004e34:	da002c0d 	sth	r8,176(sp)
 2004e38:	da402c8d 	sth	r9,178(sp)
 2004e3c:	da803015 	stw	r10,192(sp)
 2004e40:	dac03215 	stw	r11,200(sp)
 2004e44:	d8802d15 	stw	r2,180(sp)
 2004e48:	d8c02e15 	stw	r3,184(sp)
 2004e4c:	d8802915 	stw	r2,164(sp)
 2004e50:	d8c02b15 	stw	r3,172(sp)
 2004e54:	d8002f15 	stw	zero,188(sp)
 2004e58:	2004d840 	call	2004d84 <___vfprintf_internal_r>
 2004e5c:	d8814b15 	stw	r2,1324(sp)
 2004e60:	10000416 	blt	r2,zero,2004e74 <___vfprintf_internal_r+0xf0>
 2004e64:	d9014f17 	ldw	r4,1340(sp)
 2004e68:	880b883a 	mov	r5,r17
 2004e6c:	20085a00 	call	20085a0 <_fflush_r>
 2004e70:	1002321e 	bne	r2,zero,200573c <___vfprintf_internal_r+0x9b8>
 2004e74:	d8802c0b 	ldhu	r2,176(sp)
 2004e78:	1080100c 	andi	r2,r2,64
 2004e7c:	10000326 	beq	r2,zero,2004e8c <___vfprintf_internal_r+0x108>
 2004e80:	b080030b 	ldhu	r2,12(r22)
 2004e84:	10801014 	ori	r2,r2,64
 2004e88:	b080030d 	sth	r2,12(r22)
 2004e8c:	d8814b17 	ldw	r2,1324(sp)
 2004e90:	dfc15b17 	ldw	ra,1388(sp)
 2004e94:	df015a17 	ldw	fp,1384(sp)
 2004e98:	ddc15917 	ldw	r23,1380(sp)
 2004e9c:	dd815817 	ldw	r22,1376(sp)
 2004ea0:	dd415717 	ldw	r21,1372(sp)
 2004ea4:	dd015617 	ldw	r20,1368(sp)
 2004ea8:	dcc15517 	ldw	r19,1364(sp)
 2004eac:	dc815417 	ldw	r18,1360(sp)
 2004eb0:	dc415317 	ldw	r17,1356(sp)
 2004eb4:	dc015217 	ldw	r16,1352(sp)
 2004eb8:	dec15c04 	addi	sp,sp,1392
 2004ebc:	f800283a 	ret
 2004ec0:	0005883a 	mov	r2,zero
 2004ec4:	0007883a 	mov	r3,zero
 2004ec8:	dd401904 	addi	r21,sp,100
 2004ecc:	d8814215 	stw	r2,1288(sp)
 2004ed0:	802f883a 	mov	r23,r16
 2004ed4:	d8c14315 	stw	r3,1292(sp)
 2004ed8:	d8014b15 	stw	zero,1324(sp)
 2004edc:	d8014815 	stw	zero,1312(sp)
 2004ee0:	d8014415 	stw	zero,1296(sp)
 2004ee4:	d8014715 	stw	zero,1308(sp)
 2004ee8:	dd400c15 	stw	r21,48(sp)
 2004eec:	d8000e15 	stw	zero,56(sp)
 2004ef0:	d8000d15 	stw	zero,52(sp)
 2004ef4:	b8800007 	ldb	r2,0(r23)
 2004ef8:	10001926 	beq	r2,zero,2004f60 <___vfprintf_internal_r+0x1dc>
 2004efc:	00c00944 	movi	r3,37
 2004f00:	10c01726 	beq	r2,r3,2004f60 <___vfprintf_internal_r+0x1dc>
 2004f04:	b821883a 	mov	r16,r23
 2004f08:	00000106 	br	2004f10 <___vfprintf_internal_r+0x18c>
 2004f0c:	10c00326 	beq	r2,r3,2004f1c <___vfprintf_internal_r+0x198>
 2004f10:	84000044 	addi	r16,r16,1
 2004f14:	80800007 	ldb	r2,0(r16)
 2004f18:	103ffc1e 	bne	r2,zero,2004f0c <___vfprintf_internal_r+0x188>
 2004f1c:	85e7c83a 	sub	r19,r16,r23
 2004f20:	98000e26 	beq	r19,zero,2004f5c <___vfprintf_internal_r+0x1d8>
 2004f24:	dc800e17 	ldw	r18,56(sp)
 2004f28:	dc400d17 	ldw	r17,52(sp)
 2004f2c:	008001c4 	movi	r2,7
 2004f30:	94e5883a 	add	r18,r18,r19
 2004f34:	8c400044 	addi	r17,r17,1
 2004f38:	adc00015 	stw	r23,0(r21)
 2004f3c:	dc800e15 	stw	r18,56(sp)
 2004f40:	acc00115 	stw	r19,4(r21)
 2004f44:	dc400d15 	stw	r17,52(sp)
 2004f48:	14428b16 	blt	r2,r17,2005978 <___vfprintf_internal_r+0xbf4>
 2004f4c:	ad400204 	addi	r21,r21,8
 2004f50:	d9014b17 	ldw	r4,1324(sp)
 2004f54:	24c9883a 	add	r4,r4,r19
 2004f58:	d9014b15 	stw	r4,1324(sp)
 2004f5c:	802f883a 	mov	r23,r16
 2004f60:	b8800007 	ldb	r2,0(r23)
 2004f64:	10013c26 	beq	r2,zero,2005458 <___vfprintf_internal_r+0x6d4>
 2004f68:	bdc00044 	addi	r23,r23,1
 2004f6c:	d8000405 	stb	zero,16(sp)
 2004f70:	b8c00007 	ldb	r3,0(r23)
 2004f74:	04ffffc4 	movi	r19,-1
 2004f78:	d8014c15 	stw	zero,1328(sp)
 2004f7c:	d8014a15 	stw	zero,1320(sp)
 2004f80:	d8c14d15 	stw	r3,1332(sp)
 2004f84:	bdc00044 	addi	r23,r23,1
 2004f88:	d9414d17 	ldw	r5,1332(sp)
 2004f8c:	00801604 	movi	r2,88
 2004f90:	28fff804 	addi	r3,r5,-32
 2004f94:	10c06036 	bltu	r2,r3,2005118 <___vfprintf_internal_r+0x394>
 2004f98:	18c5883a 	add	r2,r3,r3
 2004f9c:	1085883a 	add	r2,r2,r2
 2004fa0:	00c08034 	movhi	r3,512
 2004fa4:	18d3ed04 	addi	r3,r3,20404
 2004fa8:	10c5883a 	add	r2,r2,r3
 2004fac:	11000017 	ldw	r4,0(r2)
 2004fb0:	2000683a 	jmp	r4
 2004fb4:	02005f28 	cmpgeui	r8,zero,380
 2004fb8:	02005118 	cmpnei	r8,zero,324
 2004fbc:	02005118 	cmpnei	r8,zero,324
 2004fc0:	02005f14 	movui	r8,380
 2004fc4:	02005118 	cmpnei	r8,zero,324
 2004fc8:	02005118 	cmpnei	r8,zero,324
 2004fcc:	02005118 	cmpnei	r8,zero,324
 2004fd0:	02005118 	cmpnei	r8,zero,324
 2004fd4:	02005118 	cmpnei	r8,zero,324
 2004fd8:	02005118 	cmpnei	r8,zero,324
 2004fdc:	02005cf4 	movhi	r8,371
 2004fe0:	02005f04 	movi	r8,380
 2004fe4:	02005118 	cmpnei	r8,zero,324
 2004fe8:	02005d0c 	andi	r8,zero,372
 2004fec:	02005fac 	andhi	r8,zero,382
 2004ff0:	02005118 	cmpnei	r8,zero,324
 2004ff4:	02005f98 	cmpnei	r8,zero,382
 2004ff8:	02005f54 	movui	r8,381
 2004ffc:	02005f54 	movui	r8,381
 2005000:	02005f54 	movui	r8,381
 2005004:	02005f54 	movui	r8,381
 2005008:	02005f54 	movui	r8,381
 200500c:	02005f54 	movui	r8,381
 2005010:	02005f54 	movui	r8,381
 2005014:	02005f54 	movui	r8,381
 2005018:	02005f54 	movui	r8,381
 200501c:	02005118 	cmpnei	r8,zero,324
 2005020:	02005118 	cmpnei	r8,zero,324
 2005024:	02005118 	cmpnei	r8,zero,324
 2005028:	02005118 	cmpnei	r8,zero,324
 200502c:	02005118 	cmpnei	r8,zero,324
 2005030:	02005118 	cmpnei	r8,zero,324
 2005034:	02005118 	cmpnei	r8,zero,324
 2005038:	02005118 	cmpnei	r8,zero,324
 200503c:	02005118 	cmpnei	r8,zero,324
 2005040:	02005118 	cmpnei	r8,zero,324
 2005044:	02005770 	cmpltui	r8,zero,349
 2005048:	02005ddc 	xori	r8,zero,375
 200504c:	02005118 	cmpnei	r8,zero,324
 2005050:	02005ddc 	xori	r8,zero,375
 2005054:	02005118 	cmpnei	r8,zero,324
 2005058:	02005118 	cmpnei	r8,zero,324
 200505c:	02005118 	cmpnei	r8,zero,324
 2005060:	02005118 	cmpnei	r8,zero,324
 2005064:	02005f40 	call	2005f4 <__reset-0x1dffa0c>
 2005068:	02005118 	cmpnei	r8,zero,324
 200506c:	02005118 	cmpnei	r8,zero,324
 2005070:	02005824 	muli	r8,zero,352
 2005074:	02005118 	cmpnei	r8,zero,324
 2005078:	02005118 	cmpnei	r8,zero,324
 200507c:	02005118 	cmpnei	r8,zero,324
 2005080:	02005118 	cmpnei	r8,zero,324
 2005084:	02005118 	cmpnei	r8,zero,324
 2005088:	02005870 	cmpltui	r8,zero,353
 200508c:	02005118 	cmpnei	r8,zero,324
 2005090:	02005118 	cmpnei	r8,zero,324
 2005094:	02005e90 	cmplti	r8,zero,378
 2005098:	02005118 	cmpnei	r8,zero,324
 200509c:	02005118 	cmpnei	r8,zero,324
 20050a0:	02005118 	cmpnei	r8,zero,324
 20050a4:	02005118 	cmpnei	r8,zero,324
 20050a8:	02005118 	cmpnei	r8,zero,324
 20050ac:	02005118 	cmpnei	r8,zero,324
 20050b0:	02005118 	cmpnei	r8,zero,324
 20050b4:	02005118 	cmpnei	r8,zero,324
 20050b8:	02005118 	cmpnei	r8,zero,324
 20050bc:	02005118 	cmpnei	r8,zero,324
 20050c0:	02005e64 	muli	r8,zero,377
 20050c4:	0200577c 	xorhi	r8,zero,349
 20050c8:	02005ddc 	xori	r8,zero,375
 20050cc:	02005ddc 	xori	r8,zero,375
 20050d0:	02005ddc 	xori	r8,zero,375
 20050d4:	02005dc8 	cmpgei	r8,zero,375
 20050d8:	0200577c 	xorhi	r8,zero,349
 20050dc:	02005118 	cmpnei	r8,zero,324
 20050e0:	02005118 	cmpnei	r8,zero,324
 20050e4:	02005d50 	cmplti	r8,zero,373
 20050e8:	02005118 	cmpnei	r8,zero,324
 20050ec:	02005d20 	cmpeqi	r8,zero,372
 20050f0:	02005830 	cmpltui	r8,zero,352
 20050f4:	02005d80 	call	2005d8 <__reset-0x1dffa28>
 20050f8:	02005d6c 	andhi	r8,zero,373
 20050fc:	02005118 	cmpnei	r8,zero,324
 2005100:	02006014 	movui	r8,384
 2005104:	02005118 	cmpnei	r8,zero,324
 2005108:	0200587c 	xorhi	r8,zero,353
 200510c:	02005118 	cmpnei	r8,zero,324
 2005110:	02005118 	cmpnei	r8,zero,324
 2005114:	02005ef4 	movhi	r8,379
 2005118:	d9014d17 	ldw	r4,1332(sp)
 200511c:	2000ce26 	beq	r4,zero,2005458 <___vfprintf_internal_r+0x6d4>
 2005120:	01400044 	movi	r5,1
 2005124:	d9800f04 	addi	r6,sp,60
 2005128:	d9c14015 	stw	r7,1280(sp)
 200512c:	d9414515 	stw	r5,1300(sp)
 2005130:	d9814115 	stw	r6,1284(sp)
 2005134:	280f883a 	mov	r7,r5
 2005138:	d9000f05 	stb	r4,60(sp)
 200513c:	d8000405 	stb	zero,16(sp)
 2005140:	d8014615 	stw	zero,1304(sp)
 2005144:	d8c14c17 	ldw	r3,1328(sp)
 2005148:	1880008c 	andi	r2,r3,2
 200514c:	1005003a 	cmpeq	r2,r2,zero
 2005150:	d8815015 	stw	r2,1344(sp)
 2005154:	1000031e 	bne	r2,zero,2005164 <___vfprintf_internal_r+0x3e0>
 2005158:	d9014517 	ldw	r4,1300(sp)
 200515c:	21000084 	addi	r4,r4,2
 2005160:	d9014515 	stw	r4,1300(sp)
 2005164:	d9414c17 	ldw	r5,1328(sp)
 2005168:	2940210c 	andi	r5,r5,132
 200516c:	d9414e15 	stw	r5,1336(sp)
 2005170:	28002d1e 	bne	r5,zero,2005228 <___vfprintf_internal_r+0x4a4>
 2005174:	d9814a17 	ldw	r6,1320(sp)
 2005178:	d8814517 	ldw	r2,1300(sp)
 200517c:	30a1c83a 	sub	r16,r6,r2
 2005180:	0400290e 	bge	zero,r16,2005228 <___vfprintf_internal_r+0x4a4>
 2005184:	00800404 	movi	r2,16
 2005188:	14045e0e 	bge	r2,r16,2006304 <___vfprintf_internal_r+0x1580>
 200518c:	dc800e17 	ldw	r18,56(sp)
 2005190:	dc400d17 	ldw	r17,52(sp)
 2005194:	1027883a 	mov	r19,r2
 2005198:	07008074 	movhi	fp,513
 200519c:	e7028684 	addi	fp,fp,2586
 20051a0:	050001c4 	movi	r20,7
 20051a4:	00000306 	br	20051b4 <___vfprintf_internal_r+0x430>
 20051a8:	843ffc04 	addi	r16,r16,-16
 20051ac:	ad400204 	addi	r21,r21,8
 20051b0:	9c00130e 	bge	r19,r16,2005200 <___vfprintf_internal_r+0x47c>
 20051b4:	94800404 	addi	r18,r18,16
 20051b8:	8c400044 	addi	r17,r17,1
 20051bc:	af000015 	stw	fp,0(r21)
 20051c0:	acc00115 	stw	r19,4(r21)
 20051c4:	dc800e15 	stw	r18,56(sp)
 20051c8:	dc400d15 	stw	r17,52(sp)
 20051cc:	a47ff60e 	bge	r20,r17,20051a8 <___vfprintf_internal_r+0x424>
 20051d0:	d9014f17 	ldw	r4,1340(sp)
 20051d4:	b00b883a 	mov	r5,r22
 20051d8:	d9800c04 	addi	r6,sp,48
 20051dc:	d9c15115 	stw	r7,1348(sp)
 20051e0:	2004d2c0 	call	2004d2c <__sprint_r>
 20051e4:	d9c15117 	ldw	r7,1348(sp)
 20051e8:	10009e1e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 20051ec:	843ffc04 	addi	r16,r16,-16
 20051f0:	dc800e17 	ldw	r18,56(sp)
 20051f4:	dc400d17 	ldw	r17,52(sp)
 20051f8:	dd401904 	addi	r21,sp,100
 20051fc:	9c3fed16 	blt	r19,r16,20051b4 <___vfprintf_internal_r+0x430>
 2005200:	9425883a 	add	r18,r18,r16
 2005204:	8c400044 	addi	r17,r17,1
 2005208:	008001c4 	movi	r2,7
 200520c:	af000015 	stw	fp,0(r21)
 2005210:	ac000115 	stw	r16,4(r21)
 2005214:	dc800e15 	stw	r18,56(sp)
 2005218:	dc400d15 	stw	r17,52(sp)
 200521c:	1441f516 	blt	r2,r17,20059f4 <___vfprintf_internal_r+0xc70>
 2005220:	ad400204 	addi	r21,r21,8
 2005224:	00000206 	br	2005230 <___vfprintf_internal_r+0x4ac>
 2005228:	dc800e17 	ldw	r18,56(sp)
 200522c:	dc400d17 	ldw	r17,52(sp)
 2005230:	d8800407 	ldb	r2,16(sp)
 2005234:	10000b26 	beq	r2,zero,2005264 <___vfprintf_internal_r+0x4e0>
 2005238:	00800044 	movi	r2,1
 200523c:	94800044 	addi	r18,r18,1
 2005240:	8c400044 	addi	r17,r17,1
 2005244:	a8800115 	stw	r2,4(r21)
 2005248:	d8c00404 	addi	r3,sp,16
 200524c:	008001c4 	movi	r2,7
 2005250:	a8c00015 	stw	r3,0(r21)
 2005254:	dc800e15 	stw	r18,56(sp)
 2005258:	dc400d15 	stw	r17,52(sp)
 200525c:	1441da16 	blt	r2,r17,20059c8 <___vfprintf_internal_r+0xc44>
 2005260:	ad400204 	addi	r21,r21,8
 2005264:	d9015017 	ldw	r4,1344(sp)
 2005268:	20000b1e 	bne	r4,zero,2005298 <___vfprintf_internal_r+0x514>
 200526c:	d8800444 	addi	r2,sp,17
 2005270:	94800084 	addi	r18,r18,2
 2005274:	8c400044 	addi	r17,r17,1
 2005278:	a8800015 	stw	r2,0(r21)
 200527c:	00c00084 	movi	r3,2
 2005280:	008001c4 	movi	r2,7
 2005284:	a8c00115 	stw	r3,4(r21)
 2005288:	dc800e15 	stw	r18,56(sp)
 200528c:	dc400d15 	stw	r17,52(sp)
 2005290:	1441c216 	blt	r2,r17,200599c <___vfprintf_internal_r+0xc18>
 2005294:	ad400204 	addi	r21,r21,8
 2005298:	d9414e17 	ldw	r5,1336(sp)
 200529c:	00802004 	movi	r2,128
 20052a0:	2880b126 	beq	r5,r2,2005568 <___vfprintf_internal_r+0x7e4>
 20052a4:	d8c14617 	ldw	r3,1304(sp)
 20052a8:	19e1c83a 	sub	r16,r3,r7
 20052ac:	0400260e 	bge	zero,r16,2005348 <___vfprintf_internal_r+0x5c4>
 20052b0:	00800404 	movi	r2,16
 20052b4:	1403cf0e 	bge	r2,r16,20061f4 <___vfprintf_internal_r+0x1470>
 20052b8:	1027883a 	mov	r19,r2
 20052bc:	07008074 	movhi	fp,513
 20052c0:	e7028284 	addi	fp,fp,2570
 20052c4:	050001c4 	movi	r20,7
 20052c8:	00000306 	br	20052d8 <___vfprintf_internal_r+0x554>
 20052cc:	843ffc04 	addi	r16,r16,-16
 20052d0:	ad400204 	addi	r21,r21,8
 20052d4:	9c00130e 	bge	r19,r16,2005324 <___vfprintf_internal_r+0x5a0>
 20052d8:	94800404 	addi	r18,r18,16
 20052dc:	8c400044 	addi	r17,r17,1
 20052e0:	af000015 	stw	fp,0(r21)
 20052e4:	acc00115 	stw	r19,4(r21)
 20052e8:	dc800e15 	stw	r18,56(sp)
 20052ec:	dc400d15 	stw	r17,52(sp)
 20052f0:	a47ff60e 	bge	r20,r17,20052cc <___vfprintf_internal_r+0x548>
 20052f4:	d9014f17 	ldw	r4,1340(sp)
 20052f8:	b00b883a 	mov	r5,r22
 20052fc:	d9800c04 	addi	r6,sp,48
 2005300:	d9c15115 	stw	r7,1348(sp)
 2005304:	2004d2c0 	call	2004d2c <__sprint_r>
 2005308:	d9c15117 	ldw	r7,1348(sp)
 200530c:	1000551e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 2005310:	843ffc04 	addi	r16,r16,-16
 2005314:	dc800e17 	ldw	r18,56(sp)
 2005318:	dc400d17 	ldw	r17,52(sp)
 200531c:	dd401904 	addi	r21,sp,100
 2005320:	9c3fed16 	blt	r19,r16,20052d8 <___vfprintf_internal_r+0x554>
 2005324:	9425883a 	add	r18,r18,r16
 2005328:	8c400044 	addi	r17,r17,1
 200532c:	008001c4 	movi	r2,7
 2005330:	af000015 	stw	fp,0(r21)
 2005334:	ac000115 	stw	r16,4(r21)
 2005338:	dc800e15 	stw	r18,56(sp)
 200533c:	dc400d15 	stw	r17,52(sp)
 2005340:	14418216 	blt	r2,r17,200594c <___vfprintf_internal_r+0xbc8>
 2005344:	ad400204 	addi	r21,r21,8
 2005348:	d9014c17 	ldw	r4,1328(sp)
 200534c:	2080400c 	andi	r2,r4,256
 2005350:	10004a1e 	bne	r2,zero,200547c <___vfprintf_internal_r+0x6f8>
 2005354:	d9414117 	ldw	r5,1284(sp)
 2005358:	91e5883a 	add	r18,r18,r7
 200535c:	8c400044 	addi	r17,r17,1
 2005360:	008001c4 	movi	r2,7
 2005364:	a9400015 	stw	r5,0(r21)
 2005368:	a9c00115 	stw	r7,4(r21)
 200536c:	dc800e15 	stw	r18,56(sp)
 2005370:	dc400d15 	stw	r17,52(sp)
 2005374:	14416716 	blt	r2,r17,2005914 <___vfprintf_internal_r+0xb90>
 2005378:	a8c00204 	addi	r3,r21,8
 200537c:	d9814c17 	ldw	r6,1328(sp)
 2005380:	3080010c 	andi	r2,r6,4
 2005384:	10002826 	beq	r2,zero,2005428 <___vfprintf_internal_r+0x6a4>
 2005388:	d8814a17 	ldw	r2,1320(sp)
 200538c:	d9014517 	ldw	r4,1300(sp)
 2005390:	1121c83a 	sub	r16,r2,r4
 2005394:	0400240e 	bge	zero,r16,2005428 <___vfprintf_internal_r+0x6a4>
 2005398:	00800404 	movi	r2,16
 200539c:	1404550e 	bge	r2,r16,20064f4 <___vfprintf_internal_r+0x1770>
 20053a0:	dc400d17 	ldw	r17,52(sp)
 20053a4:	1027883a 	mov	r19,r2
 20053a8:	07008074 	movhi	fp,513
 20053ac:	e7028684 	addi	fp,fp,2586
 20053b0:	050001c4 	movi	r20,7
 20053b4:	00000306 	br	20053c4 <___vfprintf_internal_r+0x640>
 20053b8:	843ffc04 	addi	r16,r16,-16
 20053bc:	18c00204 	addi	r3,r3,8
 20053c0:	9c00110e 	bge	r19,r16,2005408 <___vfprintf_internal_r+0x684>
 20053c4:	94800404 	addi	r18,r18,16
 20053c8:	8c400044 	addi	r17,r17,1
 20053cc:	1f000015 	stw	fp,0(r3)
 20053d0:	1cc00115 	stw	r19,4(r3)
 20053d4:	dc800e15 	stw	r18,56(sp)
 20053d8:	dc400d15 	stw	r17,52(sp)
 20053dc:	a47ff60e 	bge	r20,r17,20053b8 <___vfprintf_internal_r+0x634>
 20053e0:	d9014f17 	ldw	r4,1340(sp)
 20053e4:	b00b883a 	mov	r5,r22
 20053e8:	d9800c04 	addi	r6,sp,48
 20053ec:	2004d2c0 	call	2004d2c <__sprint_r>
 20053f0:	10001c1e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 20053f4:	843ffc04 	addi	r16,r16,-16
 20053f8:	dc800e17 	ldw	r18,56(sp)
 20053fc:	dc400d17 	ldw	r17,52(sp)
 2005400:	d8c01904 	addi	r3,sp,100
 2005404:	9c3fef16 	blt	r19,r16,20053c4 <___vfprintf_internal_r+0x640>
 2005408:	9425883a 	add	r18,r18,r16
 200540c:	8c400044 	addi	r17,r17,1
 2005410:	008001c4 	movi	r2,7
 2005414:	1f000015 	stw	fp,0(r3)
 2005418:	1c000115 	stw	r16,4(r3)
 200541c:	dc800e15 	stw	r18,56(sp)
 2005420:	dc400d15 	stw	r17,52(sp)
 2005424:	1440cb16 	blt	r2,r17,2005754 <___vfprintf_internal_r+0x9d0>
 2005428:	d8814a17 	ldw	r2,1320(sp)
 200542c:	d9414517 	ldw	r5,1300(sp)
 2005430:	1140010e 	bge	r2,r5,2005438 <___vfprintf_internal_r+0x6b4>
 2005434:	2805883a 	mov	r2,r5
 2005438:	d9814b17 	ldw	r6,1324(sp)
 200543c:	308d883a 	add	r6,r6,r2
 2005440:	d9814b15 	stw	r6,1324(sp)
 2005444:	90013b1e 	bne	r18,zero,2005934 <___vfprintf_internal_r+0xbb0>
 2005448:	d9c14017 	ldw	r7,1280(sp)
 200544c:	dd401904 	addi	r21,sp,100
 2005450:	d8000d15 	stw	zero,52(sp)
 2005454:	003ea706 	br	2004ef4 <___vfprintf_internal_r+0x170>
 2005458:	d8800e17 	ldw	r2,56(sp)
 200545c:	1005451e 	bne	r2,zero,2006974 <___vfprintf_internal_r+0x1bf0>
 2005460:	d8000d15 	stw	zero,52(sp)
 2005464:	b080030b 	ldhu	r2,12(r22)
 2005468:	1080100c 	andi	r2,r2,64
 200546c:	103e8726 	beq	r2,zero,2004e8c <___vfprintf_internal_r+0x108>
 2005470:	00bfffc4 	movi	r2,-1
 2005474:	d8814b15 	stw	r2,1324(sp)
 2005478:	003e8406 	br	2004e8c <___vfprintf_internal_r+0x108>
 200547c:	d9814d17 	ldw	r6,1332(sp)
 2005480:	00801944 	movi	r2,101
 2005484:	11806e16 	blt	r2,r6,2005640 <___vfprintf_internal_r+0x8bc>
 2005488:	d9414717 	ldw	r5,1308(sp)
 200548c:	00c00044 	movi	r3,1
 2005490:	1943490e 	bge	r3,r5,20061b8 <___vfprintf_internal_r+0x1434>
 2005494:	d8814117 	ldw	r2,1284(sp)
 2005498:	94800044 	addi	r18,r18,1
 200549c:	8c400044 	addi	r17,r17,1
 20054a0:	a8800015 	stw	r2,0(r21)
 20054a4:	008001c4 	movi	r2,7
 20054a8:	a8c00115 	stw	r3,4(r21)
 20054ac:	dc800e15 	stw	r18,56(sp)
 20054b0:	dc400d15 	stw	r17,52(sp)
 20054b4:	1441ca16 	blt	r2,r17,2005be0 <___vfprintf_internal_r+0xe5c>
 20054b8:	a8c00204 	addi	r3,r21,8
 20054bc:	d9014917 	ldw	r4,1316(sp)
 20054c0:	00800044 	movi	r2,1
 20054c4:	94800044 	addi	r18,r18,1
 20054c8:	8c400044 	addi	r17,r17,1
 20054cc:	18800115 	stw	r2,4(r3)
 20054d0:	008001c4 	movi	r2,7
 20054d4:	19000015 	stw	r4,0(r3)
 20054d8:	dc800e15 	stw	r18,56(sp)
 20054dc:	dc400d15 	stw	r17,52(sp)
 20054e0:	1441b616 	blt	r2,r17,2005bbc <___vfprintf_internal_r+0xe38>
 20054e4:	1cc00204 	addi	r19,r3,8
 20054e8:	d9014217 	ldw	r4,1288(sp)
 20054ec:	d9414317 	ldw	r5,1292(sp)
 20054f0:	000d883a 	mov	r6,zero
 20054f4:	000f883a 	mov	r7,zero
 20054f8:	200ca6c0 	call	200ca6c <__nedf2>
 20054fc:	10017426 	beq	r2,zero,2005ad0 <___vfprintf_internal_r+0xd4c>
 2005500:	d9414717 	ldw	r5,1308(sp)
 2005504:	d9814117 	ldw	r6,1284(sp)
 2005508:	8c400044 	addi	r17,r17,1
 200550c:	2c85883a 	add	r2,r5,r18
 2005510:	14bfffc4 	addi	r18,r2,-1
 2005514:	28bfffc4 	addi	r2,r5,-1
 2005518:	30c00044 	addi	r3,r6,1
 200551c:	98800115 	stw	r2,4(r19)
 2005520:	008001c4 	movi	r2,7
 2005524:	98c00015 	stw	r3,0(r19)
 2005528:	dc800e15 	stw	r18,56(sp)
 200552c:	dc400d15 	stw	r17,52(sp)
 2005530:	14418e16 	blt	r2,r17,2005b6c <___vfprintf_internal_r+0xde8>
 2005534:	9cc00204 	addi	r19,r19,8
 2005538:	d9414817 	ldw	r5,1312(sp)
 200553c:	d8800804 	addi	r2,sp,32
 2005540:	8c400044 	addi	r17,r17,1
 2005544:	9165883a 	add	r18,r18,r5
 2005548:	98800015 	stw	r2,0(r19)
 200554c:	008001c4 	movi	r2,7
 2005550:	99400115 	stw	r5,4(r19)
 2005554:	dc800e15 	stw	r18,56(sp)
 2005558:	dc400d15 	stw	r17,52(sp)
 200555c:	1440ed16 	blt	r2,r17,2005914 <___vfprintf_internal_r+0xb90>
 2005560:	98c00204 	addi	r3,r19,8
 2005564:	003f8506 	br	200537c <___vfprintf_internal_r+0x5f8>
 2005568:	d9814a17 	ldw	r6,1320(sp)
 200556c:	d8814517 	ldw	r2,1300(sp)
 2005570:	30a1c83a 	sub	r16,r6,r2
 2005574:	043f4b0e 	bge	zero,r16,20052a4 <___vfprintf_internal_r+0x520>
 2005578:	00800404 	movi	r2,16
 200557c:	14043a0e 	bge	r2,r16,2006668 <___vfprintf_internal_r+0x18e4>
 2005580:	1027883a 	mov	r19,r2
 2005584:	07008074 	movhi	fp,513
 2005588:	e7028284 	addi	fp,fp,2570
 200558c:	050001c4 	movi	r20,7
 2005590:	00000306 	br	20055a0 <___vfprintf_internal_r+0x81c>
 2005594:	843ffc04 	addi	r16,r16,-16
 2005598:	ad400204 	addi	r21,r21,8
 200559c:	9c00130e 	bge	r19,r16,20055ec <___vfprintf_internal_r+0x868>
 20055a0:	94800404 	addi	r18,r18,16
 20055a4:	8c400044 	addi	r17,r17,1
 20055a8:	af000015 	stw	fp,0(r21)
 20055ac:	acc00115 	stw	r19,4(r21)
 20055b0:	dc800e15 	stw	r18,56(sp)
 20055b4:	dc400d15 	stw	r17,52(sp)
 20055b8:	a47ff60e 	bge	r20,r17,2005594 <___vfprintf_internal_r+0x810>
 20055bc:	d9014f17 	ldw	r4,1340(sp)
 20055c0:	b00b883a 	mov	r5,r22
 20055c4:	d9800c04 	addi	r6,sp,48
 20055c8:	d9c15115 	stw	r7,1348(sp)
 20055cc:	2004d2c0 	call	2004d2c <__sprint_r>
 20055d0:	d9c15117 	ldw	r7,1348(sp)
 20055d4:	103fa31e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 20055d8:	843ffc04 	addi	r16,r16,-16
 20055dc:	dc800e17 	ldw	r18,56(sp)
 20055e0:	dc400d17 	ldw	r17,52(sp)
 20055e4:	dd401904 	addi	r21,sp,100
 20055e8:	9c3fed16 	blt	r19,r16,20055a0 <___vfprintf_internal_r+0x81c>
 20055ec:	9425883a 	add	r18,r18,r16
 20055f0:	8c400044 	addi	r17,r17,1
 20055f4:	008001c4 	movi	r2,7
 20055f8:	af000015 	stw	fp,0(r21)
 20055fc:	ac000115 	stw	r16,4(r21)
 2005600:	dc800e15 	stw	r18,56(sp)
 2005604:	dc400d15 	stw	r17,52(sp)
 2005608:	14416116 	blt	r2,r17,2005b90 <___vfprintf_internal_r+0xe0c>
 200560c:	ad400204 	addi	r21,r21,8
 2005610:	003f2406 	br	20052a4 <___vfprintf_internal_r+0x520>
 2005614:	d9014f17 	ldw	r4,1340(sp)
 2005618:	20088380 	call	2008838 <__sinit>
 200561c:	d9c15117 	ldw	r7,1348(sp)
 2005620:	003def06 	br	2004de0 <___vfprintf_internal_r+0x5c>
 2005624:	d9014f17 	ldw	r4,1340(sp)
 2005628:	b00b883a 	mov	r5,r22
 200562c:	d9c15115 	stw	r7,1348(sp)
 2005630:	2006c6c0 	call	2006c6c <__swsetup_r>
 2005634:	d9c15117 	ldw	r7,1348(sp)
 2005638:	103dee26 	beq	r2,zero,2004df4 <___vfprintf_internal_r+0x70>
 200563c:	003f8c06 	br	2005470 <___vfprintf_internal_r+0x6ec>
 2005640:	d9014217 	ldw	r4,1288(sp)
 2005644:	d9414317 	ldw	r5,1292(sp)
 2005648:	000d883a 	mov	r6,zero
 200564c:	000f883a 	mov	r7,zero
 2005650:	200c9e40 	call	200c9e4 <__eqdf2>
 2005654:	1000f21e 	bne	r2,zero,2005a20 <___vfprintf_internal_r+0xc9c>
 2005658:	00808074 	movhi	r2,513
 200565c:	10828204 	addi	r2,r2,2568
 2005660:	94800044 	addi	r18,r18,1
 2005664:	8c400044 	addi	r17,r17,1
 2005668:	a8800015 	stw	r2,0(r21)
 200566c:	00c00044 	movi	r3,1
 2005670:	008001c4 	movi	r2,7
 2005674:	a8c00115 	stw	r3,4(r21)
 2005678:	dc800e15 	stw	r18,56(sp)
 200567c:	dc400d15 	stw	r17,52(sp)
 2005680:	14430016 	blt	r2,r17,2006284 <___vfprintf_internal_r+0x1500>
 2005684:	a8c00204 	addi	r3,r21,8
 2005688:	d8800517 	ldw	r2,20(sp)
 200568c:	d9014717 	ldw	r4,1308(sp)
 2005690:	11015c0e 	bge	r2,r4,2005c04 <___vfprintf_internal_r+0xe80>
 2005694:	dc400d17 	ldw	r17,52(sp)
 2005698:	d9814917 	ldw	r6,1316(sp)
 200569c:	00800044 	movi	r2,1
 20056a0:	94800044 	addi	r18,r18,1
 20056a4:	8c400044 	addi	r17,r17,1
 20056a8:	18800115 	stw	r2,4(r3)
 20056ac:	008001c4 	movi	r2,7
 20056b0:	19800015 	stw	r6,0(r3)
 20056b4:	dc800e15 	stw	r18,56(sp)
 20056b8:	dc400d15 	stw	r17,52(sp)
 20056bc:	14431616 	blt	r2,r17,2006318 <___vfprintf_internal_r+0x1594>
 20056c0:	18c00204 	addi	r3,r3,8
 20056c4:	d8814717 	ldw	r2,1308(sp)
 20056c8:	143fffc4 	addi	r16,r2,-1
 20056cc:	043f2b0e 	bge	zero,r16,200537c <___vfprintf_internal_r+0x5f8>
 20056d0:	00800404 	movi	r2,16
 20056d4:	1402a80e 	bge	r2,r16,2006178 <___vfprintf_internal_r+0x13f4>
 20056d8:	dc400d17 	ldw	r17,52(sp)
 20056dc:	1027883a 	mov	r19,r2
 20056e0:	07008074 	movhi	fp,513
 20056e4:	e7028284 	addi	fp,fp,2570
 20056e8:	050001c4 	movi	r20,7
 20056ec:	00000306 	br	20056fc <___vfprintf_internal_r+0x978>
 20056f0:	18c00204 	addi	r3,r3,8
 20056f4:	843ffc04 	addi	r16,r16,-16
 20056f8:	9c02a20e 	bge	r19,r16,2006184 <___vfprintf_internal_r+0x1400>
 20056fc:	94800404 	addi	r18,r18,16
 2005700:	8c400044 	addi	r17,r17,1
 2005704:	1f000015 	stw	fp,0(r3)
 2005708:	1cc00115 	stw	r19,4(r3)
 200570c:	dc800e15 	stw	r18,56(sp)
 2005710:	dc400d15 	stw	r17,52(sp)
 2005714:	a47ff60e 	bge	r20,r17,20056f0 <___vfprintf_internal_r+0x96c>
 2005718:	d9014f17 	ldw	r4,1340(sp)
 200571c:	b00b883a 	mov	r5,r22
 2005720:	d9800c04 	addi	r6,sp,48
 2005724:	2004d2c0 	call	2004d2c <__sprint_r>
 2005728:	103f4e1e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 200572c:	dc800e17 	ldw	r18,56(sp)
 2005730:	dc400d17 	ldw	r17,52(sp)
 2005734:	d8c01904 	addi	r3,sp,100
 2005738:	003fee06 	br	20056f4 <___vfprintf_internal_r+0x970>
 200573c:	d8802c0b 	ldhu	r2,176(sp)
 2005740:	00ffffc4 	movi	r3,-1
 2005744:	d8c14b15 	stw	r3,1324(sp)
 2005748:	1080100c 	andi	r2,r2,64
 200574c:	103dcc1e 	bne	r2,zero,2004e80 <___vfprintf_internal_r+0xfc>
 2005750:	003dce06 	br	2004e8c <___vfprintf_internal_r+0x108>
 2005754:	d9014f17 	ldw	r4,1340(sp)
 2005758:	b00b883a 	mov	r5,r22
 200575c:	d9800c04 	addi	r6,sp,48
 2005760:	2004d2c0 	call	2004d2c <__sprint_r>
 2005764:	103f3f1e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 2005768:	dc800e17 	ldw	r18,56(sp)
 200576c:	003f2e06 	br	2005428 <___vfprintf_internal_r+0x6a4>
 2005770:	d9414c17 	ldw	r5,1328(sp)
 2005774:	29400414 	ori	r5,r5,16
 2005778:	d9414c15 	stw	r5,1328(sp)
 200577c:	d9814c17 	ldw	r6,1328(sp)
 2005780:	3080080c 	andi	r2,r6,32
 2005784:	10014f1e 	bne	r2,zero,2005cc4 <___vfprintf_internal_r+0xf40>
 2005788:	d8c14c17 	ldw	r3,1328(sp)
 200578c:	1880040c 	andi	r2,r3,16
 2005790:	1002f01e 	bne	r2,zero,2006354 <___vfprintf_internal_r+0x15d0>
 2005794:	d9014c17 	ldw	r4,1328(sp)
 2005798:	2080100c 	andi	r2,r4,64
 200579c:	1002ed26 	beq	r2,zero,2006354 <___vfprintf_internal_r+0x15d0>
 20057a0:	3880000f 	ldh	r2,0(r7)
 20057a4:	39c00104 	addi	r7,r7,4
 20057a8:	d9c14015 	stw	r7,1280(sp)
 20057ac:	1023d7fa 	srai	r17,r2,31
 20057b0:	1021883a 	mov	r16,r2
 20057b4:	88037816 	blt	r17,zero,2006598 <___vfprintf_internal_r+0x1814>
 20057b8:	01000044 	movi	r4,1
 20057bc:	98000416 	blt	r19,zero,20057d0 <___vfprintf_internal_r+0xa4c>
 20057c0:	d8c14c17 	ldw	r3,1328(sp)
 20057c4:	00bfdfc4 	movi	r2,-129
 20057c8:	1886703a 	and	r3,r3,r2
 20057cc:	d8c14c15 	stw	r3,1328(sp)
 20057d0:	8444b03a 	or	r2,r16,r17
 20057d4:	10022c1e 	bne	r2,zero,2006088 <___vfprintf_internal_r+0x1304>
 20057d8:	98022b1e 	bne	r19,zero,2006088 <___vfprintf_internal_r+0x1304>
 20057dc:	20803fcc 	andi	r2,r4,255
 20057e0:	1002a126 	beq	r2,zero,2006268 <___vfprintf_internal_r+0x14e4>
 20057e4:	d8c01904 	addi	r3,sp,100
 20057e8:	dd000f04 	addi	r20,sp,60
 20057ec:	d8c14115 	stw	r3,1284(sp)
 20057f0:	d8c14117 	ldw	r3,1284(sp)
 20057f4:	dcc14515 	stw	r19,1300(sp)
 20057f8:	a0c5c83a 	sub	r2,r20,r3
 20057fc:	11c00a04 	addi	r7,r2,40
 2005800:	99c0010e 	bge	r19,r7,2005808 <___vfprintf_internal_r+0xa84>
 2005804:	d9c14515 	stw	r7,1300(sp)
 2005808:	dcc14615 	stw	r19,1304(sp)
 200580c:	d8800407 	ldb	r2,16(sp)
 2005810:	103e4c26 	beq	r2,zero,2005144 <___vfprintf_internal_r+0x3c0>
 2005814:	d8814517 	ldw	r2,1300(sp)
 2005818:	10800044 	addi	r2,r2,1
 200581c:	d8814515 	stw	r2,1300(sp)
 2005820:	003e4806 	br	2005144 <___vfprintf_internal_r+0x3c0>
 2005824:	d9814c17 	ldw	r6,1328(sp)
 2005828:	31800414 	ori	r6,r6,16
 200582c:	d9814c15 	stw	r6,1328(sp)
 2005830:	d8c14c17 	ldw	r3,1328(sp)
 2005834:	1880080c 	andi	r2,r3,32
 2005838:	1001271e 	bne	r2,zero,2005cd8 <___vfprintf_internal_r+0xf54>
 200583c:	d9414c17 	ldw	r5,1328(sp)
 2005840:	2880040c 	andi	r2,r5,16
 2005844:	1002bc1e 	bne	r2,zero,2006338 <___vfprintf_internal_r+0x15b4>
 2005848:	d9814c17 	ldw	r6,1328(sp)
 200584c:	3080100c 	andi	r2,r6,64
 2005850:	1002b926 	beq	r2,zero,2006338 <___vfprintf_internal_r+0x15b4>
 2005854:	3c00000b 	ldhu	r16,0(r7)
 2005858:	0009883a 	mov	r4,zero
 200585c:	39c00104 	addi	r7,r7,4
 2005860:	0023883a 	mov	r17,zero
 2005864:	d9c14015 	stw	r7,1280(sp)
 2005868:	d8000405 	stb	zero,16(sp)
 200586c:	003fd306 	br	20057bc <___vfprintf_internal_r+0xa38>
 2005870:	d9014c17 	ldw	r4,1328(sp)
 2005874:	21000414 	ori	r4,r4,16
 2005878:	d9014c15 	stw	r4,1328(sp)
 200587c:	d9414c17 	ldw	r5,1328(sp)
 2005880:	2880080c 	andi	r2,r5,32
 2005884:	1001081e 	bne	r2,zero,2005ca8 <___vfprintf_internal_r+0xf24>
 2005888:	d8c14c17 	ldw	r3,1328(sp)
 200588c:	1880040c 	andi	r2,r3,16
 2005890:	1002b61e 	bne	r2,zero,200636c <___vfprintf_internal_r+0x15e8>
 2005894:	d9014c17 	ldw	r4,1328(sp)
 2005898:	2080100c 	andi	r2,r4,64
 200589c:	1002b326 	beq	r2,zero,200636c <___vfprintf_internal_r+0x15e8>
 20058a0:	3c00000b 	ldhu	r16,0(r7)
 20058a4:	01000044 	movi	r4,1
 20058a8:	39c00104 	addi	r7,r7,4
 20058ac:	0023883a 	mov	r17,zero
 20058b0:	d9c14015 	stw	r7,1280(sp)
 20058b4:	d8000405 	stb	zero,16(sp)
 20058b8:	003fc006 	br	20057bc <___vfprintf_internal_r+0xa38>
 20058bc:	d9014f17 	ldw	r4,1340(sp)
 20058c0:	b00b883a 	mov	r5,r22
 20058c4:	d9800c04 	addi	r6,sp,48
 20058c8:	2004d2c0 	call	2004d2c <__sprint_r>
 20058cc:	103ee51e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 20058d0:	dc800e17 	ldw	r18,56(sp)
 20058d4:	d8c01904 	addi	r3,sp,100
 20058d8:	d9814c17 	ldw	r6,1328(sp)
 20058dc:	3080004c 	andi	r2,r6,1
 20058e0:	1005003a 	cmpeq	r2,r2,zero
 20058e4:	103ea51e 	bne	r2,zero,200537c <___vfprintf_internal_r+0x5f8>
 20058e8:	00800044 	movi	r2,1
 20058ec:	dc400d17 	ldw	r17,52(sp)
 20058f0:	18800115 	stw	r2,4(r3)
 20058f4:	d8814917 	ldw	r2,1316(sp)
 20058f8:	94800044 	addi	r18,r18,1
 20058fc:	8c400044 	addi	r17,r17,1
 2005900:	18800015 	stw	r2,0(r3)
 2005904:	008001c4 	movi	r2,7
 2005908:	dc800e15 	stw	r18,56(sp)
 200590c:	dc400d15 	stw	r17,52(sp)
 2005910:	1442240e 	bge	r2,r17,20061a4 <___vfprintf_internal_r+0x1420>
 2005914:	d9014f17 	ldw	r4,1340(sp)
 2005918:	b00b883a 	mov	r5,r22
 200591c:	d9800c04 	addi	r6,sp,48
 2005920:	2004d2c0 	call	2004d2c <__sprint_r>
 2005924:	103ecf1e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 2005928:	dc800e17 	ldw	r18,56(sp)
 200592c:	d8c01904 	addi	r3,sp,100
 2005930:	003e9206 	br	200537c <___vfprintf_internal_r+0x5f8>
 2005934:	d9014f17 	ldw	r4,1340(sp)
 2005938:	b00b883a 	mov	r5,r22
 200593c:	d9800c04 	addi	r6,sp,48
 2005940:	2004d2c0 	call	2004d2c <__sprint_r>
 2005944:	103ec026 	beq	r2,zero,2005448 <___vfprintf_internal_r+0x6c4>
 2005948:	003ec606 	br	2005464 <___vfprintf_internal_r+0x6e0>
 200594c:	d9014f17 	ldw	r4,1340(sp)
 2005950:	b00b883a 	mov	r5,r22
 2005954:	d9800c04 	addi	r6,sp,48
 2005958:	d9c15115 	stw	r7,1348(sp)
 200595c:	2004d2c0 	call	2004d2c <__sprint_r>
 2005960:	d9c15117 	ldw	r7,1348(sp)
 2005964:	103ebf1e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 2005968:	dc800e17 	ldw	r18,56(sp)
 200596c:	dc400d17 	ldw	r17,52(sp)
 2005970:	dd401904 	addi	r21,sp,100
 2005974:	003e7406 	br	2005348 <___vfprintf_internal_r+0x5c4>
 2005978:	d9014f17 	ldw	r4,1340(sp)
 200597c:	b00b883a 	mov	r5,r22
 2005980:	d9800c04 	addi	r6,sp,48
 2005984:	d9c15115 	stw	r7,1348(sp)
 2005988:	2004d2c0 	call	2004d2c <__sprint_r>
 200598c:	d9c15117 	ldw	r7,1348(sp)
 2005990:	103eb41e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 2005994:	dd401904 	addi	r21,sp,100
 2005998:	003d6d06 	br	2004f50 <___vfprintf_internal_r+0x1cc>
 200599c:	d9014f17 	ldw	r4,1340(sp)
 20059a0:	b00b883a 	mov	r5,r22
 20059a4:	d9800c04 	addi	r6,sp,48
 20059a8:	d9c15115 	stw	r7,1348(sp)
 20059ac:	2004d2c0 	call	2004d2c <__sprint_r>
 20059b0:	d9c15117 	ldw	r7,1348(sp)
 20059b4:	103eab1e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 20059b8:	dc800e17 	ldw	r18,56(sp)
 20059bc:	dc400d17 	ldw	r17,52(sp)
 20059c0:	dd401904 	addi	r21,sp,100
 20059c4:	003e3406 	br	2005298 <___vfprintf_internal_r+0x514>
 20059c8:	d9014f17 	ldw	r4,1340(sp)
 20059cc:	b00b883a 	mov	r5,r22
 20059d0:	d9800c04 	addi	r6,sp,48
 20059d4:	d9c15115 	stw	r7,1348(sp)
 20059d8:	2004d2c0 	call	2004d2c <__sprint_r>
 20059dc:	d9c15117 	ldw	r7,1348(sp)
 20059e0:	103ea01e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 20059e4:	dc800e17 	ldw	r18,56(sp)
 20059e8:	dc400d17 	ldw	r17,52(sp)
 20059ec:	dd401904 	addi	r21,sp,100
 20059f0:	003e1c06 	br	2005264 <___vfprintf_internal_r+0x4e0>
 20059f4:	d9014f17 	ldw	r4,1340(sp)
 20059f8:	b00b883a 	mov	r5,r22
 20059fc:	d9800c04 	addi	r6,sp,48
 2005a00:	d9c15115 	stw	r7,1348(sp)
 2005a04:	2004d2c0 	call	2004d2c <__sprint_r>
 2005a08:	d9c15117 	ldw	r7,1348(sp)
 2005a0c:	103e951e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 2005a10:	dc800e17 	ldw	r18,56(sp)
 2005a14:	dc400d17 	ldw	r17,52(sp)
 2005a18:	dd401904 	addi	r21,sp,100
 2005a1c:	003e0406 	br	2005230 <___vfprintf_internal_r+0x4ac>
 2005a20:	d9000517 	ldw	r4,20(sp)
 2005a24:	0102580e 	bge	zero,r4,2006388 <___vfprintf_internal_r+0x1604>
 2005a28:	d9814717 	ldw	r6,1308(sp)
 2005a2c:	21807a16 	blt	r4,r6,2005c18 <___vfprintf_internal_r+0xe94>
 2005a30:	d8814117 	ldw	r2,1284(sp)
 2005a34:	91a5883a 	add	r18,r18,r6
 2005a38:	8c400044 	addi	r17,r17,1
 2005a3c:	a8800015 	stw	r2,0(r21)
 2005a40:	008001c4 	movi	r2,7
 2005a44:	a9800115 	stw	r6,4(r21)
 2005a48:	dc800e15 	stw	r18,56(sp)
 2005a4c:	dc400d15 	stw	r17,52(sp)
 2005a50:	1442fc16 	blt	r2,r17,2006644 <___vfprintf_internal_r+0x18c0>
 2005a54:	a8c00204 	addi	r3,r21,8
 2005a58:	d9414717 	ldw	r5,1308(sp)
 2005a5c:	2161c83a 	sub	r16,r4,r5
 2005a60:	043f9d0e 	bge	zero,r16,20058d8 <___vfprintf_internal_r+0xb54>
 2005a64:	00800404 	movi	r2,16
 2005a68:	1402190e 	bge	r2,r16,20062d0 <___vfprintf_internal_r+0x154c>
 2005a6c:	dc400d17 	ldw	r17,52(sp)
 2005a70:	1027883a 	mov	r19,r2
 2005a74:	07008074 	movhi	fp,513
 2005a78:	e7028284 	addi	fp,fp,2570
 2005a7c:	050001c4 	movi	r20,7
 2005a80:	00000306 	br	2005a90 <___vfprintf_internal_r+0xd0c>
 2005a84:	18c00204 	addi	r3,r3,8
 2005a88:	843ffc04 	addi	r16,r16,-16
 2005a8c:	9c02130e 	bge	r19,r16,20062dc <___vfprintf_internal_r+0x1558>
 2005a90:	94800404 	addi	r18,r18,16
 2005a94:	8c400044 	addi	r17,r17,1
 2005a98:	1f000015 	stw	fp,0(r3)
 2005a9c:	1cc00115 	stw	r19,4(r3)
 2005aa0:	dc800e15 	stw	r18,56(sp)
 2005aa4:	dc400d15 	stw	r17,52(sp)
 2005aa8:	a47ff60e 	bge	r20,r17,2005a84 <___vfprintf_internal_r+0xd00>
 2005aac:	d9014f17 	ldw	r4,1340(sp)
 2005ab0:	b00b883a 	mov	r5,r22
 2005ab4:	d9800c04 	addi	r6,sp,48
 2005ab8:	2004d2c0 	call	2004d2c <__sprint_r>
 2005abc:	103e691e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 2005ac0:	dc800e17 	ldw	r18,56(sp)
 2005ac4:	dc400d17 	ldw	r17,52(sp)
 2005ac8:	d8c01904 	addi	r3,sp,100
 2005acc:	003fee06 	br	2005a88 <___vfprintf_internal_r+0xd04>
 2005ad0:	d8814717 	ldw	r2,1308(sp)
 2005ad4:	143fffc4 	addi	r16,r2,-1
 2005ad8:	043e970e 	bge	zero,r16,2005538 <___vfprintf_internal_r+0x7b4>
 2005adc:	00800404 	movi	r2,16
 2005ae0:	1400180e 	bge	r2,r16,2005b44 <___vfprintf_internal_r+0xdc0>
 2005ae4:	1029883a 	mov	r20,r2
 2005ae8:	07008074 	movhi	fp,513
 2005aec:	e7028284 	addi	fp,fp,2570
 2005af0:	054001c4 	movi	r21,7
 2005af4:	00000306 	br	2005b04 <___vfprintf_internal_r+0xd80>
 2005af8:	9cc00204 	addi	r19,r19,8
 2005afc:	843ffc04 	addi	r16,r16,-16
 2005b00:	a400120e 	bge	r20,r16,2005b4c <___vfprintf_internal_r+0xdc8>
 2005b04:	94800404 	addi	r18,r18,16
 2005b08:	8c400044 	addi	r17,r17,1
 2005b0c:	9f000015 	stw	fp,0(r19)
 2005b10:	9d000115 	stw	r20,4(r19)
 2005b14:	dc800e15 	stw	r18,56(sp)
 2005b18:	dc400d15 	stw	r17,52(sp)
 2005b1c:	ac7ff60e 	bge	r21,r17,2005af8 <___vfprintf_internal_r+0xd74>
 2005b20:	d9014f17 	ldw	r4,1340(sp)
 2005b24:	b00b883a 	mov	r5,r22
 2005b28:	d9800c04 	addi	r6,sp,48
 2005b2c:	2004d2c0 	call	2004d2c <__sprint_r>
 2005b30:	103e4c1e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 2005b34:	dc800e17 	ldw	r18,56(sp)
 2005b38:	dc400d17 	ldw	r17,52(sp)
 2005b3c:	dcc01904 	addi	r19,sp,100
 2005b40:	003fee06 	br	2005afc <___vfprintf_internal_r+0xd78>
 2005b44:	07008074 	movhi	fp,513
 2005b48:	e7028284 	addi	fp,fp,2570
 2005b4c:	9425883a 	add	r18,r18,r16
 2005b50:	8c400044 	addi	r17,r17,1
 2005b54:	008001c4 	movi	r2,7
 2005b58:	9f000015 	stw	fp,0(r19)
 2005b5c:	9c000115 	stw	r16,4(r19)
 2005b60:	dc800e15 	stw	r18,56(sp)
 2005b64:	dc400d15 	stw	r17,52(sp)
 2005b68:	147e720e 	bge	r2,r17,2005534 <___vfprintf_internal_r+0x7b0>
 2005b6c:	d9014f17 	ldw	r4,1340(sp)
 2005b70:	b00b883a 	mov	r5,r22
 2005b74:	d9800c04 	addi	r6,sp,48
 2005b78:	2004d2c0 	call	2004d2c <__sprint_r>
 2005b7c:	103e391e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 2005b80:	dc800e17 	ldw	r18,56(sp)
 2005b84:	dc400d17 	ldw	r17,52(sp)
 2005b88:	dcc01904 	addi	r19,sp,100
 2005b8c:	003e6a06 	br	2005538 <___vfprintf_internal_r+0x7b4>
 2005b90:	d9014f17 	ldw	r4,1340(sp)
 2005b94:	b00b883a 	mov	r5,r22
 2005b98:	d9800c04 	addi	r6,sp,48
 2005b9c:	d9c15115 	stw	r7,1348(sp)
 2005ba0:	2004d2c0 	call	2004d2c <__sprint_r>
 2005ba4:	d9c15117 	ldw	r7,1348(sp)
 2005ba8:	103e2e1e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 2005bac:	dc800e17 	ldw	r18,56(sp)
 2005bb0:	dc400d17 	ldw	r17,52(sp)
 2005bb4:	dd401904 	addi	r21,sp,100
 2005bb8:	003dba06 	br	20052a4 <___vfprintf_internal_r+0x520>
 2005bbc:	d9014f17 	ldw	r4,1340(sp)
 2005bc0:	b00b883a 	mov	r5,r22
 2005bc4:	d9800c04 	addi	r6,sp,48
 2005bc8:	2004d2c0 	call	2004d2c <__sprint_r>
 2005bcc:	103e251e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 2005bd0:	dc800e17 	ldw	r18,56(sp)
 2005bd4:	dc400d17 	ldw	r17,52(sp)
 2005bd8:	dcc01904 	addi	r19,sp,100
 2005bdc:	003e4206 	br	20054e8 <___vfprintf_internal_r+0x764>
 2005be0:	d9014f17 	ldw	r4,1340(sp)
 2005be4:	b00b883a 	mov	r5,r22
 2005be8:	d9800c04 	addi	r6,sp,48
 2005bec:	2004d2c0 	call	2004d2c <__sprint_r>
 2005bf0:	103e1c1e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 2005bf4:	dc800e17 	ldw	r18,56(sp)
 2005bf8:	dc400d17 	ldw	r17,52(sp)
 2005bfc:	d8c01904 	addi	r3,sp,100
 2005c00:	003e2e06 	br	20054bc <___vfprintf_internal_r+0x738>
 2005c04:	d9414c17 	ldw	r5,1328(sp)
 2005c08:	2880004c 	andi	r2,r5,1
 2005c0c:	1005003a 	cmpeq	r2,r2,zero
 2005c10:	103dda1e 	bne	r2,zero,200537c <___vfprintf_internal_r+0x5f8>
 2005c14:	003e9f06 	br	2005694 <___vfprintf_internal_r+0x910>
 2005c18:	d8c14117 	ldw	r3,1284(sp)
 2005c1c:	9125883a 	add	r18,r18,r4
 2005c20:	8c400044 	addi	r17,r17,1
 2005c24:	008001c4 	movi	r2,7
 2005c28:	a8c00015 	stw	r3,0(r21)
 2005c2c:	a9000115 	stw	r4,4(r21)
 2005c30:	dc800e15 	stw	r18,56(sp)
 2005c34:	dc400d15 	stw	r17,52(sp)
 2005c38:	14426c16 	blt	r2,r17,20065ec <___vfprintf_internal_r+0x1868>
 2005c3c:	a8c00204 	addi	r3,r21,8
 2005c40:	d9414917 	ldw	r5,1316(sp)
 2005c44:	00800044 	movi	r2,1
 2005c48:	94800044 	addi	r18,r18,1
 2005c4c:	8c400044 	addi	r17,r17,1
 2005c50:	18800115 	stw	r2,4(r3)
 2005c54:	008001c4 	movi	r2,7
 2005c58:	19400015 	stw	r5,0(r3)
 2005c5c:	dc800e15 	stw	r18,56(sp)
 2005c60:	dc400d15 	stw	r17,52(sp)
 2005c64:	2021883a 	mov	r16,r4
 2005c68:	14425616 	blt	r2,r17,20065c4 <___vfprintf_internal_r+0x1840>
 2005c6c:	19400204 	addi	r5,r3,8
 2005c70:	d9814717 	ldw	r6,1308(sp)
 2005c74:	8c400044 	addi	r17,r17,1
 2005c78:	dc400d15 	stw	r17,52(sp)
 2005c7c:	3107c83a 	sub	r3,r6,r4
 2005c80:	d9014117 	ldw	r4,1284(sp)
 2005c84:	90e5883a 	add	r18,r18,r3
 2005c88:	28c00115 	stw	r3,4(r5)
 2005c8c:	8105883a 	add	r2,r16,r4
 2005c90:	28800015 	stw	r2,0(r5)
 2005c94:	008001c4 	movi	r2,7
 2005c98:	dc800e15 	stw	r18,56(sp)
 2005c9c:	147f1d16 	blt	r2,r17,2005914 <___vfprintf_internal_r+0xb90>
 2005ca0:	28c00204 	addi	r3,r5,8
 2005ca4:	003db506 	br	200537c <___vfprintf_internal_r+0x5f8>
 2005ca8:	3c000017 	ldw	r16,0(r7)
 2005cac:	3c400117 	ldw	r17,4(r7)
 2005cb0:	39800204 	addi	r6,r7,8
 2005cb4:	01000044 	movi	r4,1
 2005cb8:	d9814015 	stw	r6,1280(sp)
 2005cbc:	d8000405 	stb	zero,16(sp)
 2005cc0:	003ebe06 	br	20057bc <___vfprintf_internal_r+0xa38>
 2005cc4:	3c000017 	ldw	r16,0(r7)
 2005cc8:	3c400117 	ldw	r17,4(r7)
 2005ccc:	38800204 	addi	r2,r7,8
 2005cd0:	d8814015 	stw	r2,1280(sp)
 2005cd4:	003eb706 	br	20057b4 <___vfprintf_internal_r+0xa30>
 2005cd8:	3c000017 	ldw	r16,0(r7)
 2005cdc:	3c400117 	ldw	r17,4(r7)
 2005ce0:	39000204 	addi	r4,r7,8
 2005ce4:	d9014015 	stw	r4,1280(sp)
 2005ce8:	0009883a 	mov	r4,zero
 2005cec:	d8000405 	stb	zero,16(sp)
 2005cf0:	003eb206 	br	20057bc <___vfprintf_internal_r+0xa38>
 2005cf4:	38c00017 	ldw	r3,0(r7)
 2005cf8:	39c00104 	addi	r7,r7,4
 2005cfc:	d8c14a15 	stw	r3,1320(sp)
 2005d00:	1800d70e 	bge	r3,zero,2006060 <___vfprintf_internal_r+0x12dc>
 2005d04:	00c7c83a 	sub	r3,zero,r3
 2005d08:	d8c14a15 	stw	r3,1320(sp)
 2005d0c:	d9014c17 	ldw	r4,1328(sp)
 2005d10:	b8c00007 	ldb	r3,0(r23)
 2005d14:	21000114 	ori	r4,r4,4
 2005d18:	d9014c15 	stw	r4,1328(sp)
 2005d1c:	003c9806 	br	2004f80 <___vfprintf_internal_r+0x1fc>
 2005d20:	d9814c17 	ldw	r6,1328(sp)
 2005d24:	3080080c 	andi	r2,r6,32
 2005d28:	1001f626 	beq	r2,zero,2006504 <___vfprintf_internal_r+0x1780>
 2005d2c:	d9014b17 	ldw	r4,1324(sp)
 2005d30:	38800017 	ldw	r2,0(r7)
 2005d34:	39c00104 	addi	r7,r7,4
 2005d38:	d9c14015 	stw	r7,1280(sp)
 2005d3c:	2007d7fa 	srai	r3,r4,31
 2005d40:	d9c14017 	ldw	r7,1280(sp)
 2005d44:	11000015 	stw	r4,0(r2)
 2005d48:	10c00115 	stw	r3,4(r2)
 2005d4c:	003c6906 	br	2004ef4 <___vfprintf_internal_r+0x170>
 2005d50:	b8c00007 	ldb	r3,0(r23)
 2005d54:	00801b04 	movi	r2,108
 2005d58:	18825526 	beq	r3,r2,20066b0 <___vfprintf_internal_r+0x192c>
 2005d5c:	d9414c17 	ldw	r5,1328(sp)
 2005d60:	29400414 	ori	r5,r5,16
 2005d64:	d9414c15 	stw	r5,1328(sp)
 2005d68:	003c8506 	br	2004f80 <___vfprintf_internal_r+0x1fc>
 2005d6c:	d9814c17 	ldw	r6,1328(sp)
 2005d70:	b8c00007 	ldb	r3,0(r23)
 2005d74:	31800814 	ori	r6,r6,32
 2005d78:	d9814c15 	stw	r6,1328(sp)
 2005d7c:	003c8006 	br	2004f80 <___vfprintf_internal_r+0x1fc>
 2005d80:	d8814c17 	ldw	r2,1328(sp)
 2005d84:	3c000017 	ldw	r16,0(r7)
 2005d88:	00c01e04 	movi	r3,120
 2005d8c:	10800094 	ori	r2,r2,2
 2005d90:	d8814c15 	stw	r2,1328(sp)
 2005d94:	39c00104 	addi	r7,r7,4
 2005d98:	01408074 	movhi	r5,513
 2005d9c:	29426b04 	addi	r5,r5,2476
 2005da0:	00800c04 	movi	r2,48
 2005da4:	0023883a 	mov	r17,zero
 2005da8:	01000084 	movi	r4,2
 2005dac:	d9c14015 	stw	r7,1280(sp)
 2005db0:	d8c14d15 	stw	r3,1332(sp)
 2005db4:	d9414415 	stw	r5,1296(sp)
 2005db8:	d8800445 	stb	r2,17(sp)
 2005dbc:	d8c00485 	stb	r3,18(sp)
 2005dc0:	d8000405 	stb	zero,16(sp)
 2005dc4:	003e7d06 	br	20057bc <___vfprintf_internal_r+0xa38>
 2005dc8:	d8814c17 	ldw	r2,1328(sp)
 2005dcc:	b8c00007 	ldb	r3,0(r23)
 2005dd0:	10801014 	ori	r2,r2,64
 2005dd4:	d8814c15 	stw	r2,1328(sp)
 2005dd8:	003c6906 	br	2004f80 <___vfprintf_internal_r+0x1fc>
 2005ddc:	d9414c17 	ldw	r5,1328(sp)
 2005de0:	2880020c 	andi	r2,r5,8
 2005de4:	1001e526 	beq	r2,zero,200657c <___vfprintf_internal_r+0x17f8>
 2005de8:	39800017 	ldw	r6,0(r7)
 2005dec:	38800204 	addi	r2,r7,8
 2005df0:	d8814015 	stw	r2,1280(sp)
 2005df4:	d9814215 	stw	r6,1288(sp)
 2005df8:	39c00117 	ldw	r7,4(r7)
 2005dfc:	d9c14315 	stw	r7,1292(sp)
 2005e00:	d9014217 	ldw	r4,1288(sp)
 2005e04:	d9414317 	ldw	r5,1292(sp)
 2005e08:	200b0f40 	call	200b0f4 <__isinfd>
 2005e0c:	10021d26 	beq	r2,zero,2006684 <___vfprintf_internal_r+0x1900>
 2005e10:	d9014217 	ldw	r4,1288(sp)
 2005e14:	d9414317 	ldw	r5,1292(sp)
 2005e18:	000d883a 	mov	r6,zero
 2005e1c:	000f883a 	mov	r7,zero
 2005e20:	200cc040 	call	200cc04 <__ltdf2>
 2005e24:	1002d016 	blt	r2,zero,2006968 <___vfprintf_internal_r+0x1be4>
 2005e28:	d9414d17 	ldw	r5,1332(sp)
 2005e2c:	008011c4 	movi	r2,71
 2005e30:	11421016 	blt	r2,r5,2006674 <___vfprintf_internal_r+0x18f0>
 2005e34:	01808074 	movhi	r6,513
 2005e38:	31827004 	addi	r6,r6,2496
 2005e3c:	d9814115 	stw	r6,1284(sp)
 2005e40:	d9014c17 	ldw	r4,1328(sp)
 2005e44:	00c000c4 	movi	r3,3
 2005e48:	00bfdfc4 	movi	r2,-129
 2005e4c:	2088703a 	and	r4,r4,r2
 2005e50:	180f883a 	mov	r7,r3
 2005e54:	d8c14515 	stw	r3,1300(sp)
 2005e58:	d9014c15 	stw	r4,1328(sp)
 2005e5c:	d8014615 	stw	zero,1304(sp)
 2005e60:	003e6a06 	br	200580c <___vfprintf_internal_r+0xa88>
 2005e64:	38800017 	ldw	r2,0(r7)
 2005e68:	00c00044 	movi	r3,1
 2005e6c:	39c00104 	addi	r7,r7,4
 2005e70:	d9c14015 	stw	r7,1280(sp)
 2005e74:	d9000f04 	addi	r4,sp,60
 2005e78:	180f883a 	mov	r7,r3
 2005e7c:	d8c14515 	stw	r3,1300(sp)
 2005e80:	d9014115 	stw	r4,1284(sp)
 2005e84:	d8800f05 	stb	r2,60(sp)
 2005e88:	d8000405 	stb	zero,16(sp)
 2005e8c:	003cac06 	br	2005140 <___vfprintf_internal_r+0x3bc>
 2005e90:	01408074 	movhi	r5,513
 2005e94:	29427604 	addi	r5,r5,2520
 2005e98:	d9414415 	stw	r5,1296(sp)
 2005e9c:	d9814c17 	ldw	r6,1328(sp)
 2005ea0:	3080080c 	andi	r2,r6,32
 2005ea4:	1000ff26 	beq	r2,zero,20062a4 <___vfprintf_internal_r+0x1520>
 2005ea8:	3c000017 	ldw	r16,0(r7)
 2005eac:	3c400117 	ldw	r17,4(r7)
 2005eb0:	38800204 	addi	r2,r7,8
 2005eb4:	d8814015 	stw	r2,1280(sp)
 2005eb8:	d9414c17 	ldw	r5,1328(sp)
 2005ebc:	2880004c 	andi	r2,r5,1
 2005ec0:	1005003a 	cmpeq	r2,r2,zero
 2005ec4:	1000b91e 	bne	r2,zero,20061ac <___vfprintf_internal_r+0x1428>
 2005ec8:	8444b03a 	or	r2,r16,r17
 2005ecc:	1000b726 	beq	r2,zero,20061ac <___vfprintf_internal_r+0x1428>
 2005ed0:	d9814d17 	ldw	r6,1332(sp)
 2005ed4:	29400094 	ori	r5,r5,2
 2005ed8:	00800c04 	movi	r2,48
 2005edc:	01000084 	movi	r4,2
 2005ee0:	d9414c15 	stw	r5,1328(sp)
 2005ee4:	d8800445 	stb	r2,17(sp)
 2005ee8:	d9800485 	stb	r6,18(sp)
 2005eec:	d8000405 	stb	zero,16(sp)
 2005ef0:	003e3206 	br	20057bc <___vfprintf_internal_r+0xa38>
 2005ef4:	01808074 	movhi	r6,513
 2005ef8:	31826b04 	addi	r6,r6,2476
 2005efc:	d9814415 	stw	r6,1296(sp)
 2005f00:	003fe606 	br	2005e9c <___vfprintf_internal_r+0x1118>
 2005f04:	00800ac4 	movi	r2,43
 2005f08:	d8800405 	stb	r2,16(sp)
 2005f0c:	b8c00007 	ldb	r3,0(r23)
 2005f10:	003c1b06 	br	2004f80 <___vfprintf_internal_r+0x1fc>
 2005f14:	d8814c17 	ldw	r2,1328(sp)
 2005f18:	b8c00007 	ldb	r3,0(r23)
 2005f1c:	10800054 	ori	r2,r2,1
 2005f20:	d8814c15 	stw	r2,1328(sp)
 2005f24:	003c1606 	br	2004f80 <___vfprintf_internal_r+0x1fc>
 2005f28:	d8800407 	ldb	r2,16(sp)
 2005f2c:	10004c1e 	bne	r2,zero,2006060 <___vfprintf_internal_r+0x12dc>
 2005f30:	00800804 	movi	r2,32
 2005f34:	d8800405 	stb	r2,16(sp)
 2005f38:	b8c00007 	ldb	r3,0(r23)
 2005f3c:	003c1006 	br	2004f80 <___vfprintf_internal_r+0x1fc>
 2005f40:	d9814c17 	ldw	r6,1328(sp)
 2005f44:	b8c00007 	ldb	r3,0(r23)
 2005f48:	31800214 	ori	r6,r6,8
 2005f4c:	d9814c15 	stw	r6,1328(sp)
 2005f50:	003c0b06 	br	2004f80 <___vfprintf_internal_r+0x1fc>
 2005f54:	0009883a 	mov	r4,zero
 2005f58:	04000244 	movi	r16,9
 2005f5c:	01400284 	movi	r5,10
 2005f60:	d9c15115 	stw	r7,1348(sp)
 2005f64:	2003b380 	call	2003b38 <__mulsi3>
 2005f68:	b9000007 	ldb	r4,0(r23)
 2005f6c:	d8c14d17 	ldw	r3,1332(sp)
 2005f70:	bdc00044 	addi	r23,r23,1
 2005f74:	d9014d15 	stw	r4,1332(sp)
 2005f78:	d9414d17 	ldw	r5,1332(sp)
 2005f7c:	1885883a 	add	r2,r3,r2
 2005f80:	113ff404 	addi	r4,r2,-48
 2005f84:	28bff404 	addi	r2,r5,-48
 2005f88:	d9c15117 	ldw	r7,1348(sp)
 2005f8c:	80bff32e 	bgeu	r16,r2,2005f5c <___vfprintf_internal_r+0x11d8>
 2005f90:	d9014a15 	stw	r4,1320(sp)
 2005f94:	003bfc06 	br	2004f88 <___vfprintf_internal_r+0x204>
 2005f98:	d8814c17 	ldw	r2,1328(sp)
 2005f9c:	b8c00007 	ldb	r3,0(r23)
 2005fa0:	10802014 	ori	r2,r2,128
 2005fa4:	d8814c15 	stw	r2,1328(sp)
 2005fa8:	003bf506 	br	2004f80 <___vfprintf_internal_r+0x1fc>
 2005fac:	b8c00007 	ldb	r3,0(r23)
 2005fb0:	00800a84 	movi	r2,42
 2005fb4:	bdc00044 	addi	r23,r23,1
 2005fb8:	18831826 	beq	r3,r2,2006c1c <___vfprintf_internal_r+0x1e98>
 2005fbc:	d8c14d15 	stw	r3,1332(sp)
 2005fc0:	18bff404 	addi	r2,r3,-48
 2005fc4:	00c00244 	movi	r3,9
 2005fc8:	18827b36 	bltu	r3,r2,20069b8 <___vfprintf_internal_r+0x1c34>
 2005fcc:	1821883a 	mov	r16,r3
 2005fd0:	0009883a 	mov	r4,zero
 2005fd4:	01400284 	movi	r5,10
 2005fd8:	d9c15115 	stw	r7,1348(sp)
 2005fdc:	2003b380 	call	2003b38 <__mulsi3>
 2005fe0:	d9414d17 	ldw	r5,1332(sp)
 2005fe4:	b9800007 	ldb	r6,0(r23)
 2005fe8:	d9c15117 	ldw	r7,1348(sp)
 2005fec:	1145883a 	add	r2,r2,r5
 2005ff0:	113ff404 	addi	r4,r2,-48
 2005ff4:	30bff404 	addi	r2,r6,-48
 2005ff8:	d9814d15 	stw	r6,1332(sp)
 2005ffc:	bdc00044 	addi	r23,r23,1
 2006000:	80bff42e 	bgeu	r16,r2,2005fd4 <___vfprintf_internal_r+0x1250>
 2006004:	2027883a 	mov	r19,r4
 2006008:	203bdf0e 	bge	r4,zero,2004f88 <___vfprintf_internal_r+0x204>
 200600c:	04ffffc4 	movi	r19,-1
 2006010:	003bdd06 	br	2004f88 <___vfprintf_internal_r+0x204>
 2006014:	d8000405 	stb	zero,16(sp)
 2006018:	39800017 	ldw	r6,0(r7)
 200601c:	39c00104 	addi	r7,r7,4
 2006020:	d9c14015 	stw	r7,1280(sp)
 2006024:	d9814115 	stw	r6,1284(sp)
 2006028:	3001c926 	beq	r6,zero,2006750 <___vfprintf_internal_r+0x19cc>
 200602c:	98000e16 	blt	r19,zero,2006068 <___vfprintf_internal_r+0x12e4>
 2006030:	d9014117 	ldw	r4,1284(sp)
 2006034:	000b883a 	mov	r5,zero
 2006038:	980d883a 	mov	r6,r19
 200603c:	20097780 	call	2009778 <memchr>
 2006040:	10025926 	beq	r2,zero,20069a8 <___vfprintf_internal_r+0x1c24>
 2006044:	d8c14117 	ldw	r3,1284(sp)
 2006048:	10cfc83a 	sub	r7,r2,r3
 200604c:	99c19e16 	blt	r19,r7,20066c8 <___vfprintf_internal_r+0x1944>
 2006050:	d9c14515 	stw	r7,1300(sp)
 2006054:	38000916 	blt	r7,zero,200607c <___vfprintf_internal_r+0x12f8>
 2006058:	d8014615 	stw	zero,1304(sp)
 200605c:	003deb06 	br	200580c <___vfprintf_internal_r+0xa88>
 2006060:	b8c00007 	ldb	r3,0(r23)
 2006064:	003bc606 	br	2004f80 <___vfprintf_internal_r+0x1fc>
 2006068:	d9014117 	ldw	r4,1284(sp)
 200606c:	2004cb80 	call	2004cb8 <strlen>
 2006070:	d8814515 	stw	r2,1300(sp)
 2006074:	100f883a 	mov	r7,r2
 2006078:	103ff70e 	bge	r2,zero,2006058 <___vfprintf_internal_r+0x12d4>
 200607c:	d8014515 	stw	zero,1300(sp)
 2006080:	d8014615 	stw	zero,1304(sp)
 2006084:	003de106 	br	200580c <___vfprintf_internal_r+0xa88>
 2006088:	20c03fcc 	andi	r3,r4,255
 200608c:	00800044 	movi	r2,1
 2006090:	18802d26 	beq	r3,r2,2006148 <___vfprintf_internal_r+0x13c4>
 2006094:	18800e36 	bltu	r3,r2,20060d0 <___vfprintf_internal_r+0x134c>
 2006098:	00800084 	movi	r2,2
 200609c:	1880fa26 	beq	r3,r2,2006488 <___vfprintf_internal_r+0x1704>
 20060a0:	01008074 	movhi	r4,513
 20060a4:	21027b04 	addi	r4,r4,2540
 20060a8:	2004cb80 	call	2004cb8 <strlen>
 20060ac:	100f883a 	mov	r7,r2
 20060b0:	dcc14515 	stw	r19,1300(sp)
 20060b4:	9880010e 	bge	r19,r2,20060bc <___vfprintf_internal_r+0x1338>
 20060b8:	d8814515 	stw	r2,1300(sp)
 20060bc:	00808074 	movhi	r2,513
 20060c0:	10827b04 	addi	r2,r2,2540
 20060c4:	dcc14615 	stw	r19,1304(sp)
 20060c8:	d8814115 	stw	r2,1284(sp)
 20060cc:	003dcf06 	br	200580c <___vfprintf_internal_r+0xa88>
 20060d0:	d9401904 	addi	r5,sp,100
 20060d4:	dd000f04 	addi	r20,sp,60
 20060d8:	d9414115 	stw	r5,1284(sp)
 20060dc:	880a977a 	slli	r5,r17,29
 20060e0:	d9814117 	ldw	r6,1284(sp)
 20060e4:	8004d0fa 	srli	r2,r16,3
 20060e8:	8806d0fa 	srli	r3,r17,3
 20060ec:	810001cc 	andi	r4,r16,7
 20060f0:	2884b03a 	or	r2,r5,r2
 20060f4:	31bfffc4 	addi	r6,r6,-1
 20060f8:	21000c04 	addi	r4,r4,48
 20060fc:	d9814115 	stw	r6,1284(sp)
 2006100:	10cab03a 	or	r5,r2,r3
 2006104:	31000005 	stb	r4,0(r6)
 2006108:	1021883a 	mov	r16,r2
 200610c:	1823883a 	mov	r17,r3
 2006110:	283ff21e 	bne	r5,zero,20060dc <___vfprintf_internal_r+0x1358>
 2006114:	d8c14c17 	ldw	r3,1328(sp)
 2006118:	1880004c 	andi	r2,r3,1
 200611c:	1005003a 	cmpeq	r2,r2,zero
 2006120:	103db31e 	bne	r2,zero,20057f0 <___vfprintf_internal_r+0xa6c>
 2006124:	20803fcc 	andi	r2,r4,255
 2006128:	1080201c 	xori	r2,r2,128
 200612c:	10bfe004 	addi	r2,r2,-128
 2006130:	00c00c04 	movi	r3,48
 2006134:	10fdae26 	beq	r2,r3,20057f0 <___vfprintf_internal_r+0xa6c>
 2006138:	31bfffc4 	addi	r6,r6,-1
 200613c:	d9814115 	stw	r6,1284(sp)
 2006140:	30c00005 	stb	r3,0(r6)
 2006144:	003daa06 	br	20057f0 <___vfprintf_internal_r+0xa6c>
 2006148:	88800068 	cmpgeui	r2,r17,1
 200614c:	10002c1e 	bne	r2,zero,2006200 <___vfprintf_internal_r+0x147c>
 2006150:	8800021e 	bne	r17,zero,200615c <___vfprintf_internal_r+0x13d8>
 2006154:	00800244 	movi	r2,9
 2006158:	14002936 	bltu	r2,r16,2006200 <___vfprintf_internal_r+0x147c>
 200615c:	d90018c4 	addi	r4,sp,99
 2006160:	dd000f04 	addi	r20,sp,60
 2006164:	d9014115 	stw	r4,1284(sp)
 2006168:	d9014117 	ldw	r4,1284(sp)
 200616c:	80800c04 	addi	r2,r16,48
 2006170:	20800005 	stb	r2,0(r4)
 2006174:	003d9e06 	br	20057f0 <___vfprintf_internal_r+0xa6c>
 2006178:	dc400d17 	ldw	r17,52(sp)
 200617c:	07008074 	movhi	fp,513
 2006180:	e7028284 	addi	fp,fp,2570
 2006184:	9425883a 	add	r18,r18,r16
 2006188:	8c400044 	addi	r17,r17,1
 200618c:	008001c4 	movi	r2,7
 2006190:	1f000015 	stw	fp,0(r3)
 2006194:	1c000115 	stw	r16,4(r3)
 2006198:	dc800e15 	stw	r18,56(sp)
 200619c:	dc400d15 	stw	r17,52(sp)
 20061a0:	147ddc16 	blt	r2,r17,2005914 <___vfprintf_internal_r+0xb90>
 20061a4:	18c00204 	addi	r3,r3,8
 20061a8:	003c7406 	br	200537c <___vfprintf_internal_r+0x5f8>
 20061ac:	01000084 	movi	r4,2
 20061b0:	d8000405 	stb	zero,16(sp)
 20061b4:	003d8106 	br	20057bc <___vfprintf_internal_r+0xa38>
 20061b8:	d9814c17 	ldw	r6,1328(sp)
 20061bc:	30c4703a 	and	r2,r6,r3
 20061c0:	1005003a 	cmpeq	r2,r2,zero
 20061c4:	103cb326 	beq	r2,zero,2005494 <___vfprintf_internal_r+0x710>
 20061c8:	d9014117 	ldw	r4,1284(sp)
 20061cc:	94800044 	addi	r18,r18,1
 20061d0:	8c400044 	addi	r17,r17,1
 20061d4:	008001c4 	movi	r2,7
 20061d8:	a9000015 	stw	r4,0(r21)
 20061dc:	a8c00115 	stw	r3,4(r21)
 20061e0:	dc800e15 	stw	r18,56(sp)
 20061e4:	dc400d15 	stw	r17,52(sp)
 20061e8:	147e6016 	blt	r2,r17,2005b6c <___vfprintf_internal_r+0xde8>
 20061ec:	acc00204 	addi	r19,r21,8
 20061f0:	003cd106 	br	2005538 <___vfprintf_internal_r+0x7b4>
 20061f4:	07008074 	movhi	fp,513
 20061f8:	e7028284 	addi	fp,fp,2570
 20061fc:	003c4906 	br	2005324 <___vfprintf_internal_r+0x5a0>
 2006200:	dd000f04 	addi	r20,sp,60
 2006204:	dc801904 	addi	r18,sp,100
 2006208:	8009883a 	mov	r4,r16
 200620c:	880b883a 	mov	r5,r17
 2006210:	01800284 	movi	r6,10
 2006214:	000f883a 	mov	r7,zero
 2006218:	200be800 	call	200be80 <__umoddi3>
 200621c:	12000c04 	addi	r8,r2,48
 2006220:	94bfffc4 	addi	r18,r18,-1
 2006224:	8009883a 	mov	r4,r16
 2006228:	880b883a 	mov	r5,r17
 200622c:	01800284 	movi	r6,10
 2006230:	000f883a 	mov	r7,zero
 2006234:	92000005 	stb	r8,0(r18)
 2006238:	200b8140 	call	200b814 <__udivdi3>
 200623c:	1009883a 	mov	r4,r2
 2006240:	1021883a 	mov	r16,r2
 2006244:	18800068 	cmpgeui	r2,r3,1
 2006248:	1823883a 	mov	r17,r3
 200624c:	103fee1e 	bne	r2,zero,2006208 <___vfprintf_internal_r+0x1484>
 2006250:	1800021e 	bne	r3,zero,200625c <___vfprintf_internal_r+0x14d8>
 2006254:	00800244 	movi	r2,9
 2006258:	113feb36 	bltu	r2,r4,2006208 <___vfprintf_internal_r+0x1484>
 200625c:	94bfffc4 	addi	r18,r18,-1
 2006260:	dc814115 	stw	r18,1284(sp)
 2006264:	003fc006 	br	2006168 <___vfprintf_internal_r+0x13e4>
 2006268:	d9014c17 	ldw	r4,1328(sp)
 200626c:	2080004c 	andi	r2,r4,1
 2006270:	10009a1e 	bne	r2,zero,20064dc <___vfprintf_internal_r+0x1758>
 2006274:	d9401904 	addi	r5,sp,100
 2006278:	dd000f04 	addi	r20,sp,60
 200627c:	d9414115 	stw	r5,1284(sp)
 2006280:	003d5b06 	br	20057f0 <___vfprintf_internal_r+0xa6c>
 2006284:	d9014f17 	ldw	r4,1340(sp)
 2006288:	b00b883a 	mov	r5,r22
 200628c:	d9800c04 	addi	r6,sp,48
 2006290:	2004d2c0 	call	2004d2c <__sprint_r>
 2006294:	103c731e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 2006298:	dc800e17 	ldw	r18,56(sp)
 200629c:	d8c01904 	addi	r3,sp,100
 20062a0:	003cf906 	br	2005688 <___vfprintf_internal_r+0x904>
 20062a4:	d8c14c17 	ldw	r3,1328(sp)
 20062a8:	1880040c 	andi	r2,r3,16
 20062ac:	1000711e 	bne	r2,zero,2006474 <___vfprintf_internal_r+0x16f0>
 20062b0:	d9014c17 	ldw	r4,1328(sp)
 20062b4:	2080100c 	andi	r2,r4,64
 20062b8:	10006e26 	beq	r2,zero,2006474 <___vfprintf_internal_r+0x16f0>
 20062bc:	3c00000b 	ldhu	r16,0(r7)
 20062c0:	0023883a 	mov	r17,zero
 20062c4:	39c00104 	addi	r7,r7,4
 20062c8:	d9c14015 	stw	r7,1280(sp)
 20062cc:	003efa06 	br	2005eb8 <___vfprintf_internal_r+0x1134>
 20062d0:	dc400d17 	ldw	r17,52(sp)
 20062d4:	07008074 	movhi	fp,513
 20062d8:	e7028284 	addi	fp,fp,2570
 20062dc:	9425883a 	add	r18,r18,r16
 20062e0:	8c400044 	addi	r17,r17,1
 20062e4:	008001c4 	movi	r2,7
 20062e8:	1f000015 	stw	fp,0(r3)
 20062ec:	1c000115 	stw	r16,4(r3)
 20062f0:	dc800e15 	stw	r18,56(sp)
 20062f4:	dc400d15 	stw	r17,52(sp)
 20062f8:	147d7016 	blt	r2,r17,20058bc <___vfprintf_internal_r+0xb38>
 20062fc:	18c00204 	addi	r3,r3,8
 2006300:	003d7506 	br	20058d8 <___vfprintf_internal_r+0xb54>
 2006304:	dc800e17 	ldw	r18,56(sp)
 2006308:	dc400d17 	ldw	r17,52(sp)
 200630c:	07008074 	movhi	fp,513
 2006310:	e7028684 	addi	fp,fp,2586
 2006314:	003bba06 	br	2005200 <___vfprintf_internal_r+0x47c>
 2006318:	d9014f17 	ldw	r4,1340(sp)
 200631c:	b00b883a 	mov	r5,r22
 2006320:	d9800c04 	addi	r6,sp,48
 2006324:	2004d2c0 	call	2004d2c <__sprint_r>
 2006328:	103c4e1e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 200632c:	dc800e17 	ldw	r18,56(sp)
 2006330:	d8c01904 	addi	r3,sp,100
 2006334:	003ce306 	br	20056c4 <___vfprintf_internal_r+0x940>
 2006338:	3c000017 	ldw	r16,0(r7)
 200633c:	0009883a 	mov	r4,zero
 2006340:	39c00104 	addi	r7,r7,4
 2006344:	0023883a 	mov	r17,zero
 2006348:	d9c14015 	stw	r7,1280(sp)
 200634c:	d8000405 	stb	zero,16(sp)
 2006350:	003d1a06 	br	20057bc <___vfprintf_internal_r+0xa38>
 2006354:	38800017 	ldw	r2,0(r7)
 2006358:	39c00104 	addi	r7,r7,4
 200635c:	d9c14015 	stw	r7,1280(sp)
 2006360:	1023d7fa 	srai	r17,r2,31
 2006364:	1021883a 	mov	r16,r2
 2006368:	003d1206 	br	20057b4 <___vfprintf_internal_r+0xa30>
 200636c:	3c000017 	ldw	r16,0(r7)
 2006370:	01000044 	movi	r4,1
 2006374:	39c00104 	addi	r7,r7,4
 2006378:	0023883a 	mov	r17,zero
 200637c:	d9c14015 	stw	r7,1280(sp)
 2006380:	d8000405 	stb	zero,16(sp)
 2006384:	003d0d06 	br	20057bc <___vfprintf_internal_r+0xa38>
 2006388:	00808074 	movhi	r2,513
 200638c:	10828204 	addi	r2,r2,2568
 2006390:	94800044 	addi	r18,r18,1
 2006394:	8c400044 	addi	r17,r17,1
 2006398:	a8800015 	stw	r2,0(r21)
 200639c:	00c00044 	movi	r3,1
 20063a0:	008001c4 	movi	r2,7
 20063a4:	a8c00115 	stw	r3,4(r21)
 20063a8:	dc800e15 	stw	r18,56(sp)
 20063ac:	dc400d15 	stw	r17,52(sp)
 20063b0:	1440ca16 	blt	r2,r17,20066dc <___vfprintf_internal_r+0x1958>
 20063b4:	a8c00204 	addi	r3,r21,8
 20063b8:	2000061e 	bne	r4,zero,20063d4 <___vfprintf_internal_r+0x1650>
 20063bc:	d9414717 	ldw	r5,1308(sp)
 20063c0:	2800041e 	bne	r5,zero,20063d4 <___vfprintf_internal_r+0x1650>
 20063c4:	d9814c17 	ldw	r6,1328(sp)
 20063c8:	3080004c 	andi	r2,r6,1
 20063cc:	1005003a 	cmpeq	r2,r2,zero
 20063d0:	103bea1e 	bne	r2,zero,200537c <___vfprintf_internal_r+0x5f8>
 20063d4:	00800044 	movi	r2,1
 20063d8:	dc400d17 	ldw	r17,52(sp)
 20063dc:	18800115 	stw	r2,4(r3)
 20063e0:	d8814917 	ldw	r2,1316(sp)
 20063e4:	94800044 	addi	r18,r18,1
 20063e8:	8c400044 	addi	r17,r17,1
 20063ec:	18800015 	stw	r2,0(r3)
 20063f0:	008001c4 	movi	r2,7
 20063f4:	dc800e15 	stw	r18,56(sp)
 20063f8:	dc400d15 	stw	r17,52(sp)
 20063fc:	1440ca16 	blt	r2,r17,2006728 <___vfprintf_internal_r+0x19a4>
 2006400:	18c00204 	addi	r3,r3,8
 2006404:	0121c83a 	sub	r16,zero,r4
 2006408:	0400500e 	bge	zero,r16,200654c <___vfprintf_internal_r+0x17c8>
 200640c:	00800404 	movi	r2,16
 2006410:	1400800e 	bge	r2,r16,2006614 <___vfprintf_internal_r+0x1890>
 2006414:	1027883a 	mov	r19,r2
 2006418:	07008074 	movhi	fp,513
 200641c:	e7028284 	addi	fp,fp,2570
 2006420:	050001c4 	movi	r20,7
 2006424:	00000306 	br	2006434 <___vfprintf_internal_r+0x16b0>
 2006428:	18c00204 	addi	r3,r3,8
 200642c:	843ffc04 	addi	r16,r16,-16
 2006430:	9c007a0e 	bge	r19,r16,200661c <___vfprintf_internal_r+0x1898>
 2006434:	94800404 	addi	r18,r18,16
 2006438:	8c400044 	addi	r17,r17,1
 200643c:	1f000015 	stw	fp,0(r3)
 2006440:	1cc00115 	stw	r19,4(r3)
 2006444:	dc800e15 	stw	r18,56(sp)
 2006448:	dc400d15 	stw	r17,52(sp)
 200644c:	a47ff60e 	bge	r20,r17,2006428 <___vfprintf_internal_r+0x16a4>
 2006450:	d9014f17 	ldw	r4,1340(sp)
 2006454:	b00b883a 	mov	r5,r22
 2006458:	d9800c04 	addi	r6,sp,48
 200645c:	2004d2c0 	call	2004d2c <__sprint_r>
 2006460:	103c001e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 2006464:	dc800e17 	ldw	r18,56(sp)
 2006468:	dc400d17 	ldw	r17,52(sp)
 200646c:	d8c01904 	addi	r3,sp,100
 2006470:	003fee06 	br	200642c <___vfprintf_internal_r+0x16a8>
 2006474:	3c000017 	ldw	r16,0(r7)
 2006478:	0023883a 	mov	r17,zero
 200647c:	39c00104 	addi	r7,r7,4
 2006480:	d9c14015 	stw	r7,1280(sp)
 2006484:	003e8c06 	br	2005eb8 <___vfprintf_internal_r+0x1134>
 2006488:	d9401904 	addi	r5,sp,100
 200648c:	dd000f04 	addi	r20,sp,60
 2006490:	d9414115 	stw	r5,1284(sp)
 2006494:	d9814417 	ldw	r6,1296(sp)
 2006498:	880a973a 	slli	r5,r17,28
 200649c:	8004d13a 	srli	r2,r16,4
 20064a0:	810003cc 	andi	r4,r16,15
 20064a4:	3109883a 	add	r4,r6,r4
 20064a8:	2884b03a 	or	r2,r5,r2
 20064ac:	21400003 	ldbu	r5,0(r4)
 20064b0:	d9014117 	ldw	r4,1284(sp)
 20064b4:	8806d13a 	srli	r3,r17,4
 20064b8:	1021883a 	mov	r16,r2
 20064bc:	213fffc4 	addi	r4,r4,-1
 20064c0:	d9014115 	stw	r4,1284(sp)
 20064c4:	d9814117 	ldw	r6,1284(sp)
 20064c8:	10c8b03a 	or	r4,r2,r3
 20064cc:	1823883a 	mov	r17,r3
 20064d0:	31400005 	stb	r5,0(r6)
 20064d4:	203fef1e 	bne	r4,zero,2006494 <___vfprintf_internal_r+0x1710>
 20064d8:	003cc506 	br	20057f0 <___vfprintf_internal_r+0xa6c>
 20064dc:	00800c04 	movi	r2,48
 20064e0:	d98018c4 	addi	r6,sp,99
 20064e4:	dd000f04 	addi	r20,sp,60
 20064e8:	d88018c5 	stb	r2,99(sp)
 20064ec:	d9814115 	stw	r6,1284(sp)
 20064f0:	003cbf06 	br	20057f0 <___vfprintf_internal_r+0xa6c>
 20064f4:	dc400d17 	ldw	r17,52(sp)
 20064f8:	07008074 	movhi	fp,513
 20064fc:	e7028684 	addi	fp,fp,2586
 2006500:	003bc106 	br	2005408 <___vfprintf_internal_r+0x684>
 2006504:	d9414c17 	ldw	r5,1328(sp)
 2006508:	2880040c 	andi	r2,r5,16
 200650c:	10007c26 	beq	r2,zero,2006700 <___vfprintf_internal_r+0x197c>
 2006510:	38800017 	ldw	r2,0(r7)
 2006514:	39c00104 	addi	r7,r7,4
 2006518:	d9c14015 	stw	r7,1280(sp)
 200651c:	d9814b17 	ldw	r6,1324(sp)
 2006520:	d9c14017 	ldw	r7,1280(sp)
 2006524:	11800015 	stw	r6,0(r2)
 2006528:	003a7206 	br	2004ef4 <___vfprintf_internal_r+0x170>
 200652c:	d9014f17 	ldw	r4,1340(sp)
 2006530:	b00b883a 	mov	r5,r22
 2006534:	d9800c04 	addi	r6,sp,48
 2006538:	2004d2c0 	call	2004d2c <__sprint_r>
 200653c:	103bc91e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 2006540:	dc800e17 	ldw	r18,56(sp)
 2006544:	dc400d17 	ldw	r17,52(sp)
 2006548:	d8c01904 	addi	r3,sp,100
 200654c:	d9014717 	ldw	r4,1308(sp)
 2006550:	d9414117 	ldw	r5,1284(sp)
 2006554:	8c400044 	addi	r17,r17,1
 2006558:	9125883a 	add	r18,r18,r4
 200655c:	008001c4 	movi	r2,7
 2006560:	19400015 	stw	r5,0(r3)
 2006564:	19000115 	stw	r4,4(r3)
 2006568:	dc800e15 	stw	r18,56(sp)
 200656c:	dc400d15 	stw	r17,52(sp)
 2006570:	147ce816 	blt	r2,r17,2005914 <___vfprintf_internal_r+0xb90>
 2006574:	18c00204 	addi	r3,r3,8
 2006578:	003b8006 	br	200537c <___vfprintf_internal_r+0x5f8>
 200657c:	38c00017 	ldw	r3,0(r7)
 2006580:	39000204 	addi	r4,r7,8
 2006584:	d9014015 	stw	r4,1280(sp)
 2006588:	d8c14215 	stw	r3,1288(sp)
 200658c:	39c00117 	ldw	r7,4(r7)
 2006590:	d9c14315 	stw	r7,1292(sp)
 2006594:	003e1a06 	br	2005e00 <___vfprintf_internal_r+0x107c>
 2006598:	0005883a 	mov	r2,zero
 200659c:	1409c83a 	sub	r4,r2,r16
 20065a0:	1105803a 	cmpltu	r2,r2,r4
 20065a4:	044bc83a 	sub	r5,zero,r17
 20065a8:	2885c83a 	sub	r2,r5,r2
 20065ac:	2021883a 	mov	r16,r4
 20065b0:	1023883a 	mov	r17,r2
 20065b4:	01000044 	movi	r4,1
 20065b8:	00800b44 	movi	r2,45
 20065bc:	d8800405 	stb	r2,16(sp)
 20065c0:	003c7e06 	br	20057bc <___vfprintf_internal_r+0xa38>
 20065c4:	d9014f17 	ldw	r4,1340(sp)
 20065c8:	b00b883a 	mov	r5,r22
 20065cc:	d9800c04 	addi	r6,sp,48
 20065d0:	2004d2c0 	call	2004d2c <__sprint_r>
 20065d4:	103ba31e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 20065d8:	dc800e17 	ldw	r18,56(sp)
 20065dc:	dc400d17 	ldw	r17,52(sp)
 20065e0:	d9000517 	ldw	r4,20(sp)
 20065e4:	d9401904 	addi	r5,sp,100
 20065e8:	003da106 	br	2005c70 <___vfprintf_internal_r+0xeec>
 20065ec:	d9014f17 	ldw	r4,1340(sp)
 20065f0:	b00b883a 	mov	r5,r22
 20065f4:	d9800c04 	addi	r6,sp,48
 20065f8:	2004d2c0 	call	2004d2c <__sprint_r>
 20065fc:	103b991e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 2006600:	dc800e17 	ldw	r18,56(sp)
 2006604:	dc400d17 	ldw	r17,52(sp)
 2006608:	d9000517 	ldw	r4,20(sp)
 200660c:	d8c01904 	addi	r3,sp,100
 2006610:	003d8b06 	br	2005c40 <___vfprintf_internal_r+0xebc>
 2006614:	07008074 	movhi	fp,513
 2006618:	e7028284 	addi	fp,fp,2570
 200661c:	9425883a 	add	r18,r18,r16
 2006620:	8c400044 	addi	r17,r17,1
 2006624:	008001c4 	movi	r2,7
 2006628:	1f000015 	stw	fp,0(r3)
 200662c:	1c000115 	stw	r16,4(r3)
 2006630:	dc800e15 	stw	r18,56(sp)
 2006634:	dc400d15 	stw	r17,52(sp)
 2006638:	147fbc16 	blt	r2,r17,200652c <___vfprintf_internal_r+0x17a8>
 200663c:	18c00204 	addi	r3,r3,8
 2006640:	003fc206 	br	200654c <___vfprintf_internal_r+0x17c8>
 2006644:	d9014f17 	ldw	r4,1340(sp)
 2006648:	b00b883a 	mov	r5,r22
 200664c:	d9800c04 	addi	r6,sp,48
 2006650:	2004d2c0 	call	2004d2c <__sprint_r>
 2006654:	103b831e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 2006658:	dc800e17 	ldw	r18,56(sp)
 200665c:	d9000517 	ldw	r4,20(sp)
 2006660:	d8c01904 	addi	r3,sp,100
 2006664:	003cfc06 	br	2005a58 <___vfprintf_internal_r+0xcd4>
 2006668:	07008074 	movhi	fp,513
 200666c:	e7028284 	addi	fp,fp,2570
 2006670:	003bde06 	br	20055ec <___vfprintf_internal_r+0x868>
 2006674:	00808074 	movhi	r2,513
 2006678:	10827104 	addi	r2,r2,2500
 200667c:	d8814115 	stw	r2,1284(sp)
 2006680:	003def06 	br	2005e40 <___vfprintf_internal_r+0x10bc>
 2006684:	d9014217 	ldw	r4,1288(sp)
 2006688:	d9414317 	ldw	r5,1292(sp)
 200668c:	200b1340 	call	200b134 <__isnand>
 2006690:	10003926 	beq	r2,zero,2006778 <___vfprintf_internal_r+0x19f4>
 2006694:	d9414d17 	ldw	r5,1332(sp)
 2006698:	008011c4 	movi	r2,71
 200669c:	1140ce16 	blt	r2,r5,20069d8 <___vfprintf_internal_r+0x1c54>
 20066a0:	01808074 	movhi	r6,513
 20066a4:	31827204 	addi	r6,r6,2504
 20066a8:	d9814115 	stw	r6,1284(sp)
 20066ac:	003de406 	br	2005e40 <___vfprintf_internal_r+0x10bc>
 20066b0:	d9014c17 	ldw	r4,1328(sp)
 20066b4:	bdc00044 	addi	r23,r23,1
 20066b8:	b8c00007 	ldb	r3,0(r23)
 20066bc:	21000814 	ori	r4,r4,32
 20066c0:	d9014c15 	stw	r4,1328(sp)
 20066c4:	003a2e06 	br	2004f80 <___vfprintf_internal_r+0x1fc>
 20066c8:	dcc14515 	stw	r19,1300(sp)
 20066cc:	98011016 	blt	r19,zero,2006b10 <___vfprintf_internal_r+0x1d8c>
 20066d0:	980f883a 	mov	r7,r19
 20066d4:	d8014615 	stw	zero,1304(sp)
 20066d8:	003c4c06 	br	200580c <___vfprintf_internal_r+0xa88>
 20066dc:	d9014f17 	ldw	r4,1340(sp)
 20066e0:	b00b883a 	mov	r5,r22
 20066e4:	d9800c04 	addi	r6,sp,48
 20066e8:	2004d2c0 	call	2004d2c <__sprint_r>
 20066ec:	103b5d1e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 20066f0:	dc800e17 	ldw	r18,56(sp)
 20066f4:	d9000517 	ldw	r4,20(sp)
 20066f8:	d8c01904 	addi	r3,sp,100
 20066fc:	003f2e06 	br	20063b8 <___vfprintf_internal_r+0x1634>
 2006700:	d8c14c17 	ldw	r3,1328(sp)
 2006704:	1880100c 	andi	r2,r3,64
 2006708:	1000a026 	beq	r2,zero,200698c <___vfprintf_internal_r+0x1c08>
 200670c:	38800017 	ldw	r2,0(r7)
 2006710:	39c00104 	addi	r7,r7,4
 2006714:	d9c14015 	stw	r7,1280(sp)
 2006718:	d9014b17 	ldw	r4,1324(sp)
 200671c:	d9c14017 	ldw	r7,1280(sp)
 2006720:	1100000d 	sth	r4,0(r2)
 2006724:	0039f306 	br	2004ef4 <___vfprintf_internal_r+0x170>
 2006728:	d9014f17 	ldw	r4,1340(sp)
 200672c:	b00b883a 	mov	r5,r22
 2006730:	d9800c04 	addi	r6,sp,48
 2006734:	2004d2c0 	call	2004d2c <__sprint_r>
 2006738:	103b4a1e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 200673c:	dc800e17 	ldw	r18,56(sp)
 2006740:	dc400d17 	ldw	r17,52(sp)
 2006744:	d9000517 	ldw	r4,20(sp)
 2006748:	d8c01904 	addi	r3,sp,100
 200674c:	003f2d06 	br	2006404 <___vfprintf_internal_r+0x1680>
 2006750:	00800184 	movi	r2,6
 2006754:	14c09a36 	bltu	r2,r19,20069c0 <___vfprintf_internal_r+0x1c3c>
 2006758:	dcc14515 	stw	r19,1300(sp)
 200675c:	9800010e 	bge	r19,zero,2006764 <___vfprintf_internal_r+0x19e0>
 2006760:	d8014515 	stw	zero,1300(sp)
 2006764:	00808074 	movhi	r2,513
 2006768:	10827404 	addi	r2,r2,2512
 200676c:	980f883a 	mov	r7,r19
 2006770:	d8814115 	stw	r2,1284(sp)
 2006774:	003a7206 	br	2005140 <___vfprintf_internal_r+0x3bc>
 2006778:	00bfffc4 	movi	r2,-1
 200677c:	9880e226 	beq	r19,r2,2006b08 <___vfprintf_internal_r+0x1d84>
 2006780:	d9414d17 	ldw	r5,1332(sp)
 2006784:	008019c4 	movi	r2,103
 2006788:	2880dc26 	beq	r5,r2,2006afc <___vfprintf_internal_r+0x1d78>
 200678c:	008011c4 	movi	r2,71
 2006790:	2880da26 	beq	r5,r2,2006afc <___vfprintf_internal_r+0x1d78>
 2006794:	d9414c17 	ldw	r5,1328(sp)
 2006798:	d9014317 	ldw	r4,1292(sp)
 200679c:	d9814217 	ldw	r6,1288(sp)
 20067a0:	29404014 	ori	r5,r5,256
 20067a4:	d9414c15 	stw	r5,1328(sp)
 20067a8:	2000cc16 	blt	r4,zero,2006adc <___vfprintf_internal_r+0x1d58>
 20067ac:	3021883a 	mov	r16,r6
 20067b0:	2023883a 	mov	r17,r4
 20067b4:	0039883a 	mov	fp,zero
 20067b8:	d9414d17 	ldw	r5,1332(sp)
 20067bc:	00801984 	movi	r2,102
 20067c0:	2880b726 	beq	r5,r2,2006aa0 <___vfprintf_internal_r+0x1d1c>
 20067c4:	00801184 	movi	r2,70
 20067c8:	2880b526 	beq	r5,r2,2006aa0 <___vfprintf_internal_r+0x1d1c>
 20067cc:	00801944 	movi	r2,101
 20067d0:	2880c826 	beq	r5,r2,2006af4 <___vfprintf_internal_r+0x1d70>
 20067d4:	00801144 	movi	r2,69
 20067d8:	2880c626 	beq	r5,r2,2006af4 <___vfprintf_internal_r+0x1d70>
 20067dc:	9829883a 	mov	r20,r19
 20067e0:	d9014f17 	ldw	r4,1340(sp)
 20067e4:	d8800504 	addi	r2,sp,20
 20067e8:	880d883a 	mov	r6,r17
 20067ec:	d8800115 	stw	r2,4(sp)
 20067f0:	d8c00604 	addi	r3,sp,24
 20067f4:	d8800704 	addi	r2,sp,28
 20067f8:	800b883a 	mov	r5,r16
 20067fc:	01c00084 	movi	r7,2
 2006800:	d8c00215 	stw	r3,8(sp)
 2006804:	d8800315 	stw	r2,12(sp)
 2006808:	dd000015 	stw	r20,0(sp)
 200680c:	2006fec0 	call	2006fec <_dtoa_r>
 2006810:	d9814d17 	ldw	r6,1332(sp)
 2006814:	d8814115 	stw	r2,1284(sp)
 2006818:	008019c4 	movi	r2,103
 200681c:	30809526 	beq	r6,r2,2006a74 <___vfprintf_internal_r+0x1cf0>
 2006820:	d8c14d17 	ldw	r3,1332(sp)
 2006824:	008011c4 	movi	r2,71
 2006828:	18809226 	beq	r3,r2,2006a74 <___vfprintf_internal_r+0x1cf0>
 200682c:	d9414117 	ldw	r5,1284(sp)
 2006830:	d9814d17 	ldw	r6,1332(sp)
 2006834:	00801984 	movi	r2,102
 2006838:	2d25883a 	add	r18,r5,r20
 200683c:	30808626 	beq	r6,r2,2006a58 <___vfprintf_internal_r+0x1cd4>
 2006840:	00801184 	movi	r2,70
 2006844:	30808426 	beq	r6,r2,2006a58 <___vfprintf_internal_r+0x1cd4>
 2006848:	000d883a 	mov	r6,zero
 200684c:	000f883a 	mov	r7,zero
 2006850:	880b883a 	mov	r5,r17
 2006854:	8009883a 	mov	r4,r16
 2006858:	200c9e40 	call	200c9e4 <__eqdf2>
 200685c:	1000751e 	bne	r2,zero,2006a34 <___vfprintf_internal_r+0x1cb0>
 2006860:	9005883a 	mov	r2,r18
 2006864:	dc800715 	stw	r18,28(sp)
 2006868:	d9014117 	ldw	r4,1284(sp)
 200686c:	d9414d17 	ldw	r5,1332(sp)
 2006870:	00c019c4 	movi	r3,103
 2006874:	1125c83a 	sub	r18,r2,r4
 2006878:	28c06826 	beq	r5,r3,2006a1c <___vfprintf_internal_r+0x1c98>
 200687c:	008011c4 	movi	r2,71
 2006880:	28806626 	beq	r5,r2,2006a1c <___vfprintf_internal_r+0x1c98>
 2006884:	d9000517 	ldw	r4,20(sp)
 2006888:	d8c14d17 	ldw	r3,1332(sp)
 200688c:	00801944 	movi	r2,101
 2006890:	10c05516 	blt	r2,r3,20069e8 <___vfprintf_internal_r+0x1c64>
 2006894:	213fffc4 	addi	r4,r4,-1
 2006898:	d9000515 	stw	r4,20(sp)
 200689c:	d8c00805 	stb	r3,32(sp)
 20068a0:	2021883a 	mov	r16,r4
 20068a4:	2000c116 	blt	r4,zero,2006bac <___vfprintf_internal_r+0x1e28>
 20068a8:	00800ac4 	movi	r2,43
 20068ac:	d8800845 	stb	r2,33(sp)
 20068b0:	00800244 	movi	r2,9
 20068b4:	1400af0e 	bge	r2,r16,2006b74 <___vfprintf_internal_r+0x1df0>
 20068b8:	1027883a 	mov	r19,r2
 20068bc:	dc400b84 	addi	r17,sp,46
 20068c0:	8009883a 	mov	r4,r16
 20068c4:	01400284 	movi	r5,10
 20068c8:	2003ac80 	call	2003ac8 <__modsi3>
 20068cc:	10800c04 	addi	r2,r2,48
 20068d0:	8c7fffc4 	addi	r17,r17,-1
 20068d4:	8009883a 	mov	r4,r16
 20068d8:	01400284 	movi	r5,10
 20068dc:	88800005 	stb	r2,0(r17)
 20068e0:	2003a680 	call	2003a68 <__divsi3>
 20068e4:	1021883a 	mov	r16,r2
 20068e8:	98bff516 	blt	r19,r2,20068c0 <___vfprintf_internal_r+0x1b3c>
 20068ec:	10c00c04 	addi	r3,r2,48
 20068f0:	d88009c4 	addi	r2,sp,39
 20068f4:	108001c4 	addi	r2,r2,7
 20068f8:	897fffc4 	addi	r5,r17,-1
 20068fc:	88ffffc5 	stb	r3,-1(r17)
 2006900:	2880a72e 	bgeu	r5,r2,2006ba0 <___vfprintf_internal_r+0x1e1c>
 2006904:	1009883a 	mov	r4,r2
 2006908:	d9800804 	addi	r6,sp,32
 200690c:	d8c00884 	addi	r3,sp,34
 2006910:	28800003 	ldbu	r2,0(r5)
 2006914:	29400044 	addi	r5,r5,1
 2006918:	18800005 	stb	r2,0(r3)
 200691c:	18c00044 	addi	r3,r3,1
 2006920:	293ffb36 	bltu	r5,r4,2006910 <___vfprintf_internal_r+0x1b8c>
 2006924:	1987c83a 	sub	r3,r3,r6
 2006928:	00800044 	movi	r2,1
 200692c:	d8c14815 	stw	r3,1312(sp)
 2006930:	90cf883a 	add	r7,r18,r3
 2006934:	1480960e 	bge	r2,r18,2006b90 <___vfprintf_internal_r+0x1e0c>
 2006938:	39c00044 	addi	r7,r7,1
 200693c:	d9c14515 	stw	r7,1300(sp)
 2006940:	38003416 	blt	r7,zero,2006a14 <___vfprintf_internal_r+0x1c90>
 2006944:	e0803fcc 	andi	r2,fp,255
 2006948:	1080201c 	xori	r2,r2,128
 200694c:	10bfe004 	addi	r2,r2,-128
 2006950:	10004e26 	beq	r2,zero,2006a8c <___vfprintf_internal_r+0x1d08>
 2006954:	00800b44 	movi	r2,45
 2006958:	dc814715 	stw	r18,1308(sp)
 200695c:	d8014615 	stw	zero,1304(sp)
 2006960:	d8800405 	stb	r2,16(sp)
 2006964:	003bab06 	br	2005814 <___vfprintf_internal_r+0xa90>
 2006968:	00800b44 	movi	r2,45
 200696c:	d8800405 	stb	r2,16(sp)
 2006970:	003d2d06 	br	2005e28 <___vfprintf_internal_r+0x10a4>
 2006974:	d9014f17 	ldw	r4,1340(sp)
 2006978:	b00b883a 	mov	r5,r22
 200697c:	d9800c04 	addi	r6,sp,48
 2006980:	2004d2c0 	call	2004d2c <__sprint_r>
 2006984:	103ab71e 	bne	r2,zero,2005464 <___vfprintf_internal_r+0x6e0>
 2006988:	003ab506 	br	2005460 <___vfprintf_internal_r+0x6dc>
 200698c:	38800017 	ldw	r2,0(r7)
 2006990:	39c00104 	addi	r7,r7,4
 2006994:	d9c14015 	stw	r7,1280(sp)
 2006998:	d9414b17 	ldw	r5,1324(sp)
 200699c:	d9c14017 	ldw	r7,1280(sp)
 20069a0:	11400015 	stw	r5,0(r2)
 20069a4:	00395306 	br	2004ef4 <___vfprintf_internal_r+0x170>
 20069a8:	980f883a 	mov	r7,r19
 20069ac:	dcc14515 	stw	r19,1300(sp)
 20069b0:	d8014615 	stw	zero,1304(sp)
 20069b4:	003b9506 	br	200580c <___vfprintf_internal_r+0xa88>
 20069b8:	0027883a 	mov	r19,zero
 20069bc:	00397206 	br	2004f88 <___vfprintf_internal_r+0x204>
 20069c0:	00c08074 	movhi	r3,513
 20069c4:	18c27404 	addi	r3,r3,2512
 20069c8:	100f883a 	mov	r7,r2
 20069cc:	d8814515 	stw	r2,1300(sp)
 20069d0:	d8c14115 	stw	r3,1284(sp)
 20069d4:	0039da06 	br	2005140 <___vfprintf_internal_r+0x3bc>
 20069d8:	00808074 	movhi	r2,513
 20069dc:	10827304 	addi	r2,r2,2508
 20069e0:	d8814115 	stw	r2,1284(sp)
 20069e4:	003d1606 	br	2005e40 <___vfprintf_internal_r+0x10bc>
 20069e8:	d9414d17 	ldw	r5,1332(sp)
 20069ec:	00801984 	movi	r2,102
 20069f0:	28804926 	beq	r5,r2,2006b18 <___vfprintf_internal_r+0x1d94>
 20069f4:	200f883a 	mov	r7,r4
 20069f8:	24805716 	blt	r4,r18,2006b58 <___vfprintf_internal_r+0x1dd4>
 20069fc:	d9414c17 	ldw	r5,1328(sp)
 2006a00:	2880004c 	andi	r2,r5,1
 2006a04:	10000126 	beq	r2,zero,2006a0c <___vfprintf_internal_r+0x1c88>
 2006a08:	21c00044 	addi	r7,r4,1
 2006a0c:	d9c14515 	stw	r7,1300(sp)
 2006a10:	383fcc0e 	bge	r7,zero,2006944 <___vfprintf_internal_r+0x1bc0>
 2006a14:	d8014515 	stw	zero,1300(sp)
 2006a18:	003fca06 	br	2006944 <___vfprintf_internal_r+0x1bc0>
 2006a1c:	d9000517 	ldw	r4,20(sp)
 2006a20:	00bfff04 	movi	r2,-4
 2006a24:	1100480e 	bge	r2,r4,2006b48 <___vfprintf_internal_r+0x1dc4>
 2006a28:	99004716 	blt	r19,r4,2006b48 <___vfprintf_internal_r+0x1dc4>
 2006a2c:	d8c14d15 	stw	r3,1332(sp)
 2006a30:	003ff006 	br	20069f4 <___vfprintf_internal_r+0x1c70>
 2006a34:	d8800717 	ldw	r2,28(sp)
 2006a38:	14bf8b2e 	bgeu	r2,r18,2006868 <___vfprintf_internal_r+0x1ae4>
 2006a3c:	9007883a 	mov	r3,r18
 2006a40:	01000c04 	movi	r4,48
 2006a44:	11000005 	stb	r4,0(r2)
 2006a48:	10800044 	addi	r2,r2,1
 2006a4c:	d8800715 	stw	r2,28(sp)
 2006a50:	18bffc1e 	bne	r3,r2,2006a44 <___vfprintf_internal_r+0x1cc0>
 2006a54:	003f8406 	br	2006868 <___vfprintf_internal_r+0x1ae4>
 2006a58:	d8814117 	ldw	r2,1284(sp)
 2006a5c:	10c00007 	ldb	r3,0(r2)
 2006a60:	00800c04 	movi	r2,48
 2006a64:	18805b26 	beq	r3,r2,2006bd4 <___vfprintf_internal_r+0x1e50>
 2006a68:	d9000517 	ldw	r4,20(sp)
 2006a6c:	9125883a 	add	r18,r18,r4
 2006a70:	003f7506 	br	2006848 <___vfprintf_internal_r+0x1ac4>
 2006a74:	d9014c17 	ldw	r4,1328(sp)
 2006a78:	2080004c 	andi	r2,r4,1
 2006a7c:	1005003a 	cmpeq	r2,r2,zero
 2006a80:	103f6a26 	beq	r2,zero,200682c <___vfprintf_internal_r+0x1aa8>
 2006a84:	d8800717 	ldw	r2,28(sp)
 2006a88:	003f7706 	br	2006868 <___vfprintf_internal_r+0x1ae4>
 2006a8c:	d9c14515 	stw	r7,1300(sp)
 2006a90:	38004d16 	blt	r7,zero,2006bc8 <___vfprintf_internal_r+0x1e44>
 2006a94:	dc814715 	stw	r18,1308(sp)
 2006a98:	d8014615 	stw	zero,1304(sp)
 2006a9c:	003b5b06 	br	200580c <___vfprintf_internal_r+0xa88>
 2006aa0:	d9014f17 	ldw	r4,1340(sp)
 2006aa4:	d8800504 	addi	r2,sp,20
 2006aa8:	d8800115 	stw	r2,4(sp)
 2006aac:	d8c00604 	addi	r3,sp,24
 2006ab0:	d8800704 	addi	r2,sp,28
 2006ab4:	800b883a 	mov	r5,r16
 2006ab8:	880d883a 	mov	r6,r17
 2006abc:	01c000c4 	movi	r7,3
 2006ac0:	d8c00215 	stw	r3,8(sp)
 2006ac4:	d8800315 	stw	r2,12(sp)
 2006ac8:	dcc00015 	stw	r19,0(sp)
 2006acc:	9829883a 	mov	r20,r19
 2006ad0:	2006fec0 	call	2006fec <_dtoa_r>
 2006ad4:	d8814115 	stw	r2,1284(sp)
 2006ad8:	003f5106 	br	2006820 <___vfprintf_internal_r+0x1a9c>
 2006adc:	d8c14217 	ldw	r3,1288(sp)
 2006ae0:	d9014317 	ldw	r4,1292(sp)
 2006ae4:	07000b44 	movi	fp,45
 2006ae8:	1821883a 	mov	r16,r3
 2006aec:	2460003c 	xorhi	r17,r4,32768
 2006af0:	003f3106 	br	20067b8 <___vfprintf_internal_r+0x1a34>
 2006af4:	9d000044 	addi	r20,r19,1
 2006af8:	003f3906 	br	20067e0 <___vfprintf_internal_r+0x1a5c>
 2006afc:	983f251e 	bne	r19,zero,2006794 <___vfprintf_internal_r+0x1a10>
 2006b00:	04c00044 	movi	r19,1
 2006b04:	003f2306 	br	2006794 <___vfprintf_internal_r+0x1a10>
 2006b08:	04c00184 	movi	r19,6
 2006b0c:	003f2106 	br	2006794 <___vfprintf_internal_r+0x1a10>
 2006b10:	d8014515 	stw	zero,1300(sp)
 2006b14:	003eee06 	br	20066d0 <___vfprintf_internal_r+0x194c>
 2006b18:	200f883a 	mov	r7,r4
 2006b1c:	0100370e 	bge	zero,r4,2006bfc <___vfprintf_internal_r+0x1e78>
 2006b20:	9800031e 	bne	r19,zero,2006b30 <___vfprintf_internal_r+0x1dac>
 2006b24:	d9814c17 	ldw	r6,1328(sp)
 2006b28:	3080004c 	andi	r2,r6,1
 2006b2c:	103fb726 	beq	r2,zero,2006a0c <___vfprintf_internal_r+0x1c88>
 2006b30:	20800044 	addi	r2,r4,1
 2006b34:	98a7883a 	add	r19,r19,r2
 2006b38:	dcc14515 	stw	r19,1300(sp)
 2006b3c:	980f883a 	mov	r7,r19
 2006b40:	983f800e 	bge	r19,zero,2006944 <___vfprintf_internal_r+0x1bc0>
 2006b44:	003fb306 	br	2006a14 <___vfprintf_internal_r+0x1c90>
 2006b48:	d9814d17 	ldw	r6,1332(sp)
 2006b4c:	31bfff84 	addi	r6,r6,-2
 2006b50:	d9814d15 	stw	r6,1332(sp)
 2006b54:	003f4c06 	br	2006888 <___vfprintf_internal_r+0x1b04>
 2006b58:	0100180e 	bge	zero,r4,2006bbc <___vfprintf_internal_r+0x1e38>
 2006b5c:	00800044 	movi	r2,1
 2006b60:	1485883a 	add	r2,r2,r18
 2006b64:	d8814515 	stw	r2,1300(sp)
 2006b68:	100f883a 	mov	r7,r2
 2006b6c:	103f750e 	bge	r2,zero,2006944 <___vfprintf_internal_r+0x1bc0>
 2006b70:	003fa806 	br	2006a14 <___vfprintf_internal_r+0x1c90>
 2006b74:	80c00c04 	addi	r3,r16,48
 2006b78:	00800c04 	movi	r2,48
 2006b7c:	d8c008c5 	stb	r3,35(sp)
 2006b80:	d9800804 	addi	r6,sp,32
 2006b84:	d8c00904 	addi	r3,sp,36
 2006b88:	d8800885 	stb	r2,34(sp)
 2006b8c:	003f6506 	br	2006924 <___vfprintf_internal_r+0x1ba0>
 2006b90:	d9014c17 	ldw	r4,1328(sp)
 2006b94:	2084703a 	and	r2,r4,r2
 2006b98:	103f9c26 	beq	r2,zero,2006a0c <___vfprintf_internal_r+0x1c88>
 2006b9c:	003f6606 	br	2006938 <___vfprintf_internal_r+0x1bb4>
 2006ba0:	d9800804 	addi	r6,sp,32
 2006ba4:	d8c00884 	addi	r3,sp,34
 2006ba8:	003f5e06 	br	2006924 <___vfprintf_internal_r+0x1ba0>
 2006bac:	00800b44 	movi	r2,45
 2006bb0:	0121c83a 	sub	r16,zero,r4
 2006bb4:	d8800845 	stb	r2,33(sp)
 2006bb8:	003f3d06 	br	20068b0 <___vfprintf_internal_r+0x1b2c>
 2006bbc:	00800084 	movi	r2,2
 2006bc0:	1105c83a 	sub	r2,r2,r4
 2006bc4:	003fe606 	br	2006b60 <___vfprintf_internal_r+0x1ddc>
 2006bc8:	d8014515 	stw	zero,1300(sp)
 2006bcc:	dc814715 	stw	r18,1308(sp)
 2006bd0:	003fb106 	br	2006a98 <___vfprintf_internal_r+0x1d14>
 2006bd4:	000d883a 	mov	r6,zero
 2006bd8:	000f883a 	mov	r7,zero
 2006bdc:	8009883a 	mov	r4,r16
 2006be0:	880b883a 	mov	r5,r17
 2006be4:	200ca6c0 	call	200ca6c <__nedf2>
 2006be8:	103f9f26 	beq	r2,zero,2006a68 <___vfprintf_internal_r+0x1ce4>
 2006bec:	00800044 	movi	r2,1
 2006bf0:	1509c83a 	sub	r4,r2,r20
 2006bf4:	d9000515 	stw	r4,20(sp)
 2006bf8:	003f9b06 	br	2006a68 <___vfprintf_internal_r+0x1ce4>
 2006bfc:	98000d1e 	bne	r19,zero,2006c34 <___vfprintf_internal_r+0x1eb0>
 2006c00:	d8c14c17 	ldw	r3,1328(sp)
 2006c04:	1880004c 	andi	r2,r3,1
 2006c08:	10000a1e 	bne	r2,zero,2006c34 <___vfprintf_internal_r+0x1eb0>
 2006c0c:	01000044 	movi	r4,1
 2006c10:	200f883a 	mov	r7,r4
 2006c14:	d9014515 	stw	r4,1300(sp)
 2006c18:	003f4a06 	br	2006944 <___vfprintf_internal_r+0x1bc0>
 2006c1c:	3cc00017 	ldw	r19,0(r7)
 2006c20:	39c00104 	addi	r7,r7,4
 2006c24:	983d0e0e 	bge	r19,zero,2006060 <___vfprintf_internal_r+0x12dc>
 2006c28:	b8c00007 	ldb	r3,0(r23)
 2006c2c:	04ffffc4 	movi	r19,-1
 2006c30:	0038d306 	br	2004f80 <___vfprintf_internal_r+0x1fc>
 2006c34:	9cc00084 	addi	r19,r19,2
 2006c38:	dcc14515 	stw	r19,1300(sp)
 2006c3c:	980f883a 	mov	r7,r19
 2006c40:	983f400e 	bge	r19,zero,2006944 <___vfprintf_internal_r+0x1bc0>
 2006c44:	003f7306 	br	2006a14 <___vfprintf_internal_r+0x1c90>

02006c48 <__vfprintf_internal>:
 2006c48:	00808074 	movhi	r2,513
 2006c4c:	1085b404 	addi	r2,r2,5840
 2006c50:	2013883a 	mov	r9,r4
 2006c54:	11000017 	ldw	r4,0(r2)
 2006c58:	2805883a 	mov	r2,r5
 2006c5c:	300f883a 	mov	r7,r6
 2006c60:	480b883a 	mov	r5,r9
 2006c64:	100d883a 	mov	r6,r2
 2006c68:	2004d841 	jmpi	2004d84 <___vfprintf_internal_r>

02006c6c <__swsetup_r>:
 2006c6c:	00808074 	movhi	r2,513
 2006c70:	1085b404 	addi	r2,r2,5840
 2006c74:	10c00017 	ldw	r3,0(r2)
 2006c78:	defffd04 	addi	sp,sp,-12
 2006c7c:	dc400115 	stw	r17,4(sp)
 2006c80:	dc000015 	stw	r16,0(sp)
 2006c84:	dfc00215 	stw	ra,8(sp)
 2006c88:	2023883a 	mov	r17,r4
 2006c8c:	2821883a 	mov	r16,r5
 2006c90:	18000226 	beq	r3,zero,2006c9c <__swsetup_r+0x30>
 2006c94:	18800e17 	ldw	r2,56(r3)
 2006c98:	10001f26 	beq	r2,zero,2006d18 <__swsetup_r+0xac>
 2006c9c:	8100030b 	ldhu	r4,12(r16)
 2006ca0:	2080020c 	andi	r2,r4,8
 2006ca4:	10002826 	beq	r2,zero,2006d48 <__swsetup_r+0xdc>
 2006ca8:	81400417 	ldw	r5,16(r16)
 2006cac:	28001d26 	beq	r5,zero,2006d24 <__swsetup_r+0xb8>
 2006cb0:	2080004c 	andi	r2,r4,1
 2006cb4:	1005003a 	cmpeq	r2,r2,zero
 2006cb8:	10000b26 	beq	r2,zero,2006ce8 <__swsetup_r+0x7c>
 2006cbc:	2080008c 	andi	r2,r4,2
 2006cc0:	10001226 	beq	r2,zero,2006d0c <__swsetup_r+0xa0>
 2006cc4:	0005883a 	mov	r2,zero
 2006cc8:	80800215 	stw	r2,8(r16)
 2006ccc:	28000b26 	beq	r5,zero,2006cfc <__swsetup_r+0x90>
 2006cd0:	0005883a 	mov	r2,zero
 2006cd4:	dfc00217 	ldw	ra,8(sp)
 2006cd8:	dc400117 	ldw	r17,4(sp)
 2006cdc:	dc000017 	ldw	r16,0(sp)
 2006ce0:	dec00304 	addi	sp,sp,12
 2006ce4:	f800283a 	ret
 2006ce8:	80800517 	ldw	r2,20(r16)
 2006cec:	80000215 	stw	zero,8(r16)
 2006cf0:	0085c83a 	sub	r2,zero,r2
 2006cf4:	80800615 	stw	r2,24(r16)
 2006cf8:	283ff51e 	bne	r5,zero,2006cd0 <__swsetup_r+0x64>
 2006cfc:	2080200c 	andi	r2,r4,128
 2006d00:	103ff326 	beq	r2,zero,2006cd0 <__swsetup_r+0x64>
 2006d04:	00bfffc4 	movi	r2,-1
 2006d08:	003ff206 	br	2006cd4 <__swsetup_r+0x68>
 2006d0c:	80800517 	ldw	r2,20(r16)
 2006d10:	80800215 	stw	r2,8(r16)
 2006d14:	003fed06 	br	2006ccc <__swsetup_r+0x60>
 2006d18:	1809883a 	mov	r4,r3
 2006d1c:	20088380 	call	2008838 <__sinit>
 2006d20:	003fde06 	br	2006c9c <__swsetup_r+0x30>
 2006d24:	20c0a00c 	andi	r3,r4,640
 2006d28:	00808004 	movi	r2,512
 2006d2c:	18bfe026 	beq	r3,r2,2006cb0 <__swsetup_r+0x44>
 2006d30:	8809883a 	mov	r4,r17
 2006d34:	800b883a 	mov	r5,r16
 2006d38:	20095e40 	call	20095e4 <__smakebuf_r>
 2006d3c:	8100030b 	ldhu	r4,12(r16)
 2006d40:	81400417 	ldw	r5,16(r16)
 2006d44:	003fda06 	br	2006cb0 <__swsetup_r+0x44>
 2006d48:	2080040c 	andi	r2,r4,16
 2006d4c:	103fed26 	beq	r2,zero,2006d04 <__swsetup_r+0x98>
 2006d50:	2080010c 	andi	r2,r4,4
 2006d54:	10001226 	beq	r2,zero,2006da0 <__swsetup_r+0x134>
 2006d58:	81400c17 	ldw	r5,48(r16)
 2006d5c:	28000526 	beq	r5,zero,2006d74 <__swsetup_r+0x108>
 2006d60:	80801004 	addi	r2,r16,64
 2006d64:	28800226 	beq	r5,r2,2006d70 <__swsetup_r+0x104>
 2006d68:	8809883a 	mov	r4,r17
 2006d6c:	2008bf00 	call	2008bf0 <_free_r>
 2006d70:	80000c15 	stw	zero,48(r16)
 2006d74:	8080030b 	ldhu	r2,12(r16)
 2006d78:	81400417 	ldw	r5,16(r16)
 2006d7c:	80000115 	stw	zero,4(r16)
 2006d80:	10bff6cc 	andi	r2,r2,65499
 2006d84:	8080030d 	sth	r2,12(r16)
 2006d88:	81400015 	stw	r5,0(r16)
 2006d8c:	8080030b 	ldhu	r2,12(r16)
 2006d90:	10800214 	ori	r2,r2,8
 2006d94:	113fffcc 	andi	r4,r2,65535
 2006d98:	8080030d 	sth	r2,12(r16)
 2006d9c:	003fc306 	br	2006cac <__swsetup_r+0x40>
 2006da0:	81400417 	ldw	r5,16(r16)
 2006da4:	003ff906 	br	2006d8c <__swsetup_r+0x120>

02006da8 <quorem>:
 2006da8:	28c00417 	ldw	r3,16(r5)
 2006dac:	20800417 	ldw	r2,16(r4)
 2006db0:	defff104 	addi	sp,sp,-60
 2006db4:	dfc00e15 	stw	ra,56(sp)
 2006db8:	df000d15 	stw	fp,52(sp)
 2006dbc:	ddc00c15 	stw	r23,48(sp)
 2006dc0:	dd800b15 	stw	r22,44(sp)
 2006dc4:	dd400a15 	stw	r21,40(sp)
 2006dc8:	dd000915 	stw	r20,36(sp)
 2006dcc:	dcc00815 	stw	r19,32(sp)
 2006dd0:	dc800715 	stw	r18,28(sp)
 2006dd4:	dc400615 	stw	r17,24(sp)
 2006dd8:	dc000515 	stw	r16,20(sp)
 2006ddc:	d9000315 	stw	r4,12(sp)
 2006de0:	d9400415 	stw	r5,16(sp)
 2006de4:	10c07f16 	blt	r2,r3,2006fe4 <quorem+0x23c>
 2006de8:	1d3fffc4 	addi	r20,r3,-1
 2006dec:	d8c00417 	ldw	r3,16(sp)
 2006df0:	d9000317 	ldw	r4,12(sp)
 2006df4:	a505883a 	add	r2,r20,r20
 2006df8:	1085883a 	add	r2,r2,r2
 2006dfc:	1cc00504 	addi	r19,r3,20
 2006e00:	25c00504 	addi	r23,r4,20
 2006e04:	98ad883a 	add	r22,r19,r2
 2006e08:	15c7883a 	add	r3,r2,r23
 2006e0c:	b1400017 	ldw	r5,0(r22)
 2006e10:	19000017 	ldw	r4,0(r3)
 2006e14:	d8c00015 	stw	r3,0(sp)
 2006e18:	29400044 	addi	r5,r5,1
 2006e1c:	d9000215 	stw	r4,8(sp)
 2006e20:	2003b280 	call	2003b28 <__udivsi3>
 2006e24:	1039883a 	mov	fp,r2
 2006e28:	10003d1e 	bne	r2,zero,2006f20 <quorem+0x178>
 2006e2c:	d9400417 	ldw	r5,16(sp)
 2006e30:	d9000317 	ldw	r4,12(sp)
 2006e34:	2009bd00 	call	2009bd0 <__mcmp>
 2006e38:	10002c16 	blt	r2,zero,2006eec <quorem+0x144>
 2006e3c:	e7000044 	addi	fp,fp,1
 2006e40:	b80f883a 	mov	r7,r23
 2006e44:	0011883a 	mov	r8,zero
 2006e48:	0009883a 	mov	r4,zero
 2006e4c:	99400017 	ldw	r5,0(r19)
 2006e50:	38c00017 	ldw	r3,0(r7)
 2006e54:	9cc00104 	addi	r19,r19,4
 2006e58:	28bfffcc 	andi	r2,r5,65535
 2006e5c:	2085883a 	add	r2,r4,r2
 2006e60:	11bfffcc 	andi	r6,r2,65535
 2006e64:	193fffcc 	andi	r4,r3,65535
 2006e68:	1004d43a 	srli	r2,r2,16
 2006e6c:	280ad43a 	srli	r5,r5,16
 2006e70:	2189c83a 	sub	r4,r4,r6
 2006e74:	2209883a 	add	r4,r4,r8
 2006e78:	1806d43a 	srli	r3,r3,16
 2006e7c:	288b883a 	add	r5,r5,r2
 2006e80:	200dd43a 	srai	r6,r4,16
 2006e84:	28bfffcc 	andi	r2,r5,65535
 2006e88:	1887c83a 	sub	r3,r3,r2
 2006e8c:	1987883a 	add	r3,r3,r6
 2006e90:	3900000d 	sth	r4,0(r7)
 2006e94:	38c0008d 	sth	r3,2(r7)
 2006e98:	2808d43a 	srli	r4,r5,16
 2006e9c:	39c00104 	addi	r7,r7,4
 2006ea0:	1811d43a 	srai	r8,r3,16
 2006ea4:	b4ffe92e 	bgeu	r22,r19,2006e4c <quorem+0xa4>
 2006ea8:	a505883a 	add	r2,r20,r20
 2006eac:	1085883a 	add	r2,r2,r2
 2006eb0:	b885883a 	add	r2,r23,r2
 2006eb4:	10c00017 	ldw	r3,0(r2)
 2006eb8:	18000c1e 	bne	r3,zero,2006eec <quorem+0x144>
 2006ebc:	113fff04 	addi	r4,r2,-4
 2006ec0:	b900082e 	bgeu	r23,r4,2006ee4 <quorem+0x13c>
 2006ec4:	10bfff17 	ldw	r2,-4(r2)
 2006ec8:	10000326 	beq	r2,zero,2006ed8 <quorem+0x130>
 2006ecc:	00000506 	br	2006ee4 <quorem+0x13c>
 2006ed0:	20800017 	ldw	r2,0(r4)
 2006ed4:	1000031e 	bne	r2,zero,2006ee4 <quorem+0x13c>
 2006ed8:	213fff04 	addi	r4,r4,-4
 2006edc:	a53fffc4 	addi	r20,r20,-1
 2006ee0:	b93ffb36 	bltu	r23,r4,2006ed0 <quorem+0x128>
 2006ee4:	d9000317 	ldw	r4,12(sp)
 2006ee8:	25000415 	stw	r20,16(r4)
 2006eec:	e005883a 	mov	r2,fp
 2006ef0:	dfc00e17 	ldw	ra,56(sp)
 2006ef4:	df000d17 	ldw	fp,52(sp)
 2006ef8:	ddc00c17 	ldw	r23,48(sp)
 2006efc:	dd800b17 	ldw	r22,44(sp)
 2006f00:	dd400a17 	ldw	r21,40(sp)
 2006f04:	dd000917 	ldw	r20,36(sp)
 2006f08:	dcc00817 	ldw	r19,32(sp)
 2006f0c:	dc800717 	ldw	r18,28(sp)
 2006f10:	dc400617 	ldw	r17,24(sp)
 2006f14:	dc000517 	ldw	r16,20(sp)
 2006f18:	dec00f04 	addi	sp,sp,60
 2006f1c:	f800283a 	ret
 2006f20:	b823883a 	mov	r17,r23
 2006f24:	9825883a 	mov	r18,r19
 2006f28:	d8000115 	stw	zero,4(sp)
 2006f2c:	002b883a 	mov	r21,zero
 2006f30:	94000017 	ldw	r16,0(r18)
 2006f34:	e009883a 	mov	r4,fp
 2006f38:	94800104 	addi	r18,r18,4
 2006f3c:	817fffcc 	andi	r5,r16,65535
 2006f40:	2003b380 	call	2003b38 <__mulsi3>
 2006f44:	800ad43a 	srli	r5,r16,16
 2006f48:	e009883a 	mov	r4,fp
 2006f4c:	a8a1883a 	add	r16,r21,r2
 2006f50:	2003b380 	call	2003b38 <__mulsi3>
 2006f54:	89000017 	ldw	r4,0(r17)
 2006f58:	80ffffcc 	andi	r3,r16,65535
 2006f5c:	8020d43a 	srli	r16,r16,16
 2006f60:	217fffcc 	andi	r5,r4,65535
 2006f64:	28cbc83a 	sub	r5,r5,r3
 2006f68:	d8c00117 	ldw	r3,4(sp)
 2006f6c:	2008d43a 	srli	r4,r4,16
 2006f70:	1405883a 	add	r2,r2,r16
 2006f74:	28cb883a 	add	r5,r5,r3
 2006f78:	280dd43a 	srai	r6,r5,16
 2006f7c:	10ffffcc 	andi	r3,r2,65535
 2006f80:	20c9c83a 	sub	r4,r4,r3
 2006f84:	2189883a 	add	r4,r4,r6
 2006f88:	8900008d 	sth	r4,2(r17)
 2006f8c:	2009d43a 	srai	r4,r4,16
 2006f90:	8940000d 	sth	r5,0(r17)
 2006f94:	102ad43a 	srli	r21,r2,16
 2006f98:	8c400104 	addi	r17,r17,4
 2006f9c:	d9000115 	stw	r4,4(sp)
 2006fa0:	b4bfe32e 	bgeu	r22,r18,2006f30 <quorem+0x188>
 2006fa4:	d9000217 	ldw	r4,8(sp)
 2006fa8:	203fa01e 	bne	r4,zero,2006e2c <quorem+0x84>
 2006fac:	d8800017 	ldw	r2,0(sp)
 2006fb0:	10ffff04 	addi	r3,r2,-4
 2006fb4:	b8c0082e 	bgeu	r23,r3,2006fd8 <quorem+0x230>
 2006fb8:	10bfff17 	ldw	r2,-4(r2)
 2006fbc:	10000326 	beq	r2,zero,2006fcc <quorem+0x224>
 2006fc0:	00000506 	br	2006fd8 <quorem+0x230>
 2006fc4:	18800017 	ldw	r2,0(r3)
 2006fc8:	1000031e 	bne	r2,zero,2006fd8 <quorem+0x230>
 2006fcc:	18ffff04 	addi	r3,r3,-4
 2006fd0:	a53fffc4 	addi	r20,r20,-1
 2006fd4:	b8fffb36 	bltu	r23,r3,2006fc4 <quorem+0x21c>
 2006fd8:	d8c00317 	ldw	r3,12(sp)
 2006fdc:	1d000415 	stw	r20,16(r3)
 2006fe0:	003f9206 	br	2006e2c <quorem+0x84>
 2006fe4:	0005883a 	mov	r2,zero
 2006fe8:	003fc106 	br	2006ef0 <quorem+0x148>

02006fec <_dtoa_r>:
 2006fec:	22001017 	ldw	r8,64(r4)
 2006ff0:	deffda04 	addi	sp,sp,-152
 2006ff4:	dd402115 	stw	r21,132(sp)
 2006ff8:	dd002015 	stw	r20,128(sp)
 2006ffc:	dc801e15 	stw	r18,120(sp)
 2007000:	dc401d15 	stw	r17,116(sp)
 2007004:	dfc02515 	stw	ra,148(sp)
 2007008:	df002415 	stw	fp,144(sp)
 200700c:	ddc02315 	stw	r23,140(sp)
 2007010:	dd802215 	stw	r22,136(sp)
 2007014:	dcc01f15 	stw	r19,124(sp)
 2007018:	dc001c15 	stw	r16,112(sp)
 200701c:	d9001615 	stw	r4,88(sp)
 2007020:	3023883a 	mov	r17,r6
 2007024:	2829883a 	mov	r20,r5
 2007028:	d9c01715 	stw	r7,92(sp)
 200702c:	dc802817 	ldw	r18,160(sp)
 2007030:	302b883a 	mov	r21,r6
 2007034:	40000a26 	beq	r8,zero,2007060 <_dtoa_r+0x74>
 2007038:	20801117 	ldw	r2,68(r4)
 200703c:	400b883a 	mov	r5,r8
 2007040:	40800115 	stw	r2,4(r8)
 2007044:	20c01117 	ldw	r3,68(r4)
 2007048:	00800044 	movi	r2,1
 200704c:	10c4983a 	sll	r2,r2,r3
 2007050:	40800215 	stw	r2,8(r8)
 2007054:	2009a740 	call	2009a74 <_Bfree>
 2007058:	d8c01617 	ldw	r3,88(sp)
 200705c:	18001015 	stw	zero,64(r3)
 2007060:	8800a316 	blt	r17,zero,20072f0 <_dtoa_r+0x304>
 2007064:	90000015 	stw	zero,0(r18)
 2007068:	a8dffc2c 	andhi	r3,r21,32752
 200706c:	009ffc34 	movhi	r2,32752
 2007070:	18809126 	beq	r3,r2,20072b8 <_dtoa_r+0x2cc>
 2007074:	000d883a 	mov	r6,zero
 2007078:	000f883a 	mov	r7,zero
 200707c:	a009883a 	mov	r4,r20
 2007080:	a80b883a 	mov	r5,r21
 2007084:	dd001215 	stw	r20,72(sp)
 2007088:	dd401315 	stw	r21,76(sp)
 200708c:	200ca6c0 	call	200ca6c <__nedf2>
 2007090:	1000171e 	bne	r2,zero,20070f0 <_dtoa_r+0x104>
 2007094:	d9802717 	ldw	r6,156(sp)
 2007098:	00800044 	movi	r2,1
 200709c:	30800015 	stw	r2,0(r6)
 20070a0:	d8802917 	ldw	r2,164(sp)
 20070a4:	10029b26 	beq	r2,zero,2007b14 <_dtoa_r+0xb28>
 20070a8:	d9002917 	ldw	r4,164(sp)
 20070ac:	00808074 	movhi	r2,513
 20070b0:	10828244 	addi	r2,r2,2569
 20070b4:	10ffffc4 	addi	r3,r2,-1
 20070b8:	20800015 	stw	r2,0(r4)
 20070bc:	1805883a 	mov	r2,r3
 20070c0:	dfc02517 	ldw	ra,148(sp)
 20070c4:	df002417 	ldw	fp,144(sp)
 20070c8:	ddc02317 	ldw	r23,140(sp)
 20070cc:	dd802217 	ldw	r22,136(sp)
 20070d0:	dd402117 	ldw	r21,132(sp)
 20070d4:	dd002017 	ldw	r20,128(sp)
 20070d8:	dcc01f17 	ldw	r19,124(sp)
 20070dc:	dc801e17 	ldw	r18,120(sp)
 20070e0:	dc401d17 	ldw	r17,116(sp)
 20070e4:	dc001c17 	ldw	r16,112(sp)
 20070e8:	dec02604 	addi	sp,sp,152
 20070ec:	f800283a 	ret
 20070f0:	d9001617 	ldw	r4,88(sp)
 20070f4:	d9401217 	ldw	r5,72(sp)
 20070f8:	d8800104 	addi	r2,sp,4
 20070fc:	a80d883a 	mov	r6,r21
 2007100:	d9c00204 	addi	r7,sp,8
 2007104:	d8800015 	stw	r2,0(sp)
 2007108:	200a0b00 	call	200a0b0 <__d2b>
 200710c:	d8800715 	stw	r2,28(sp)
 2007110:	a804d53a 	srli	r2,r21,20
 2007114:	1101ffcc 	andi	r4,r2,2047
 2007118:	20008626 	beq	r4,zero,2007334 <_dtoa_r+0x348>
 200711c:	d8c01217 	ldw	r3,72(sp)
 2007120:	00800434 	movhi	r2,16
 2007124:	10bfffc4 	addi	r2,r2,-1
 2007128:	ddc00117 	ldw	r23,4(sp)
 200712c:	a884703a 	and	r2,r21,r2
 2007130:	1811883a 	mov	r8,r3
 2007134:	124ffc34 	orhi	r9,r2,16368
 2007138:	25bf0044 	addi	r22,r4,-1023
 200713c:	d8000815 	stw	zero,32(sp)
 2007140:	0005883a 	mov	r2,zero
 2007144:	00cffe34 	movhi	r3,16376
 2007148:	480b883a 	mov	r5,r9
 200714c:	4009883a 	mov	r4,r8
 2007150:	180f883a 	mov	r7,r3
 2007154:	100d883a 	mov	r6,r2
 2007158:	200c8f00 	call	200c8f0 <__subdf3>
 200715c:	0218dbf4 	movhi	r8,25455
 2007160:	4210d844 	addi	r8,r8,17249
 2007164:	024ff4f4 	movhi	r9,16339
 2007168:	4a61e9c4 	addi	r9,r9,-30809
 200716c:	480f883a 	mov	r7,r9
 2007170:	400d883a 	mov	r6,r8
 2007174:	180b883a 	mov	r5,r3
 2007178:	1009883a 	mov	r4,r2
 200717c:	20030d00 	call	20030d0 <__muldf3>
 2007180:	0222d874 	movhi	r8,35681
 2007184:	42322cc4 	addi	r8,r8,-14157
 2007188:	024ff1f4 	movhi	r9,16327
 200718c:	4a628a04 	addi	r9,r9,-30168
 2007190:	480f883a 	mov	r7,r9
 2007194:	400d883a 	mov	r6,r8
 2007198:	180b883a 	mov	r5,r3
 200719c:	1009883a 	mov	r4,r2
 20071a0:	200c9700 	call	200c970 <__adddf3>
 20071a4:	b009883a 	mov	r4,r22
 20071a8:	1021883a 	mov	r16,r2
 20071ac:	1823883a 	mov	r17,r3
 20071b0:	20036ec0 	call	20036ec <__floatsidf>
 20071b4:	021427f4 	movhi	r8,20639
 20071b8:	421e7ec4 	addi	r8,r8,31227
 20071bc:	024ff4f4 	movhi	r9,16339
 20071c0:	4a5104c4 	addi	r9,r9,17427
 20071c4:	480f883a 	mov	r7,r9
 20071c8:	400d883a 	mov	r6,r8
 20071cc:	180b883a 	mov	r5,r3
 20071d0:	1009883a 	mov	r4,r2
 20071d4:	20030d00 	call	20030d0 <__muldf3>
 20071d8:	180f883a 	mov	r7,r3
 20071dc:	880b883a 	mov	r5,r17
 20071e0:	100d883a 	mov	r6,r2
 20071e4:	8009883a 	mov	r4,r16
 20071e8:	200c9700 	call	200c970 <__adddf3>
 20071ec:	1009883a 	mov	r4,r2
 20071f0:	180b883a 	mov	r5,r3
 20071f4:	1021883a 	mov	r16,r2
 20071f8:	1823883a 	mov	r17,r3
 20071fc:	200cc8c0 	call	200cc8c <__fixdfsi>
 2007200:	000d883a 	mov	r6,zero
 2007204:	000f883a 	mov	r7,zero
 2007208:	8009883a 	mov	r4,r16
 200720c:	880b883a 	mov	r5,r17
 2007210:	d8800d15 	stw	r2,52(sp)
 2007214:	200cc040 	call	200cc04 <__ltdf2>
 2007218:	10031716 	blt	r2,zero,2007e78 <_dtoa_r+0xe8c>
 200721c:	d8c00d17 	ldw	r3,52(sp)
 2007220:	00800584 	movi	r2,22
 2007224:	10c1482e 	bgeu	r2,r3,2007748 <_dtoa_r+0x75c>
 2007228:	01000044 	movi	r4,1
 200722c:	d9000c15 	stw	r4,48(sp)
 2007230:	bd85c83a 	sub	r2,r23,r22
 2007234:	11bfffc4 	addi	r6,r2,-1
 2007238:	30030b16 	blt	r6,zero,2007e68 <_dtoa_r+0xe7c>
 200723c:	d9800a15 	stw	r6,40(sp)
 2007240:	d8001115 	stw	zero,68(sp)
 2007244:	d8c00d17 	ldw	r3,52(sp)
 2007248:	1802ff16 	blt	r3,zero,2007e48 <_dtoa_r+0xe5c>
 200724c:	d9000a17 	ldw	r4,40(sp)
 2007250:	d8c00915 	stw	r3,36(sp)
 2007254:	d8001015 	stw	zero,64(sp)
 2007258:	20c9883a 	add	r4,r4,r3
 200725c:	d9000a15 	stw	r4,40(sp)
 2007260:	d9001717 	ldw	r4,92(sp)
 2007264:	00800244 	movi	r2,9
 2007268:	11004636 	bltu	r2,r4,2007384 <_dtoa_r+0x398>
 200726c:	00800144 	movi	r2,5
 2007270:	11020416 	blt	r2,r4,2007a84 <_dtoa_r+0xa98>
 2007274:	04400044 	movi	r17,1
 2007278:	d8c01717 	ldw	r3,92(sp)
 200727c:	00800144 	movi	r2,5
 2007280:	10c1ed36 	bltu	r2,r3,2007a38 <_dtoa_r+0xa4c>
 2007284:	18c5883a 	add	r2,r3,r3
 2007288:	1085883a 	add	r2,r2,r2
 200728c:	00c08034 	movhi	r3,512
 2007290:	18dca804 	addi	r3,r3,29344
 2007294:	10c5883a 	add	r2,r2,r3
 2007298:	11000017 	ldw	r4,0(r2)
 200729c:	2000683a 	jmp	r4
 20072a0:	0200738c 	andi	r8,zero,462
 20072a4:	0200738c 	andi	r8,zero,462
 20072a8:	02007d8c 	andi	r8,zero,502
 20072ac:	02007d64 	muli	r8,zero,501
 20072b0:	02007da8 	cmpgeui	r8,zero,502
 20072b4:	02007db4 	movhi	r8,502
 20072b8:	d9002717 	ldw	r4,156(sp)
 20072bc:	0089c3c4 	movi	r2,9999
 20072c0:	20800015 	stw	r2,0(r4)
 20072c4:	a0001026 	beq	r20,zero,2007308 <_dtoa_r+0x31c>
 20072c8:	00c08074 	movhi	r3,513
 20072cc:	18c28e04 	addi	r3,r3,2616
 20072d0:	d9802917 	ldw	r6,164(sp)
 20072d4:	303f7926 	beq	r6,zero,20070bc <_dtoa_r+0xd0>
 20072d8:	188000c7 	ldb	r2,3(r3)
 20072dc:	190000c4 	addi	r4,r3,3
 20072e0:	1000101e 	bne	r2,zero,2007324 <_dtoa_r+0x338>
 20072e4:	d8802917 	ldw	r2,164(sp)
 20072e8:	11000015 	stw	r4,0(r2)
 20072ec:	003f7306 	br	20070bc <_dtoa_r+0xd0>
 20072f0:	00a00034 	movhi	r2,32768
 20072f4:	10bfffc4 	addi	r2,r2,-1
 20072f8:	00c00044 	movi	r3,1
 20072fc:	88aa703a 	and	r21,r17,r2
 2007300:	90c00015 	stw	r3,0(r18)
 2007304:	003f5806 	br	2007068 <_dtoa_r+0x7c>
 2007308:	00800434 	movhi	r2,16
 200730c:	10bfffc4 	addi	r2,r2,-1
 2007310:	a884703a 	and	r2,r21,r2
 2007314:	103fec1e 	bne	r2,zero,20072c8 <_dtoa_r+0x2dc>
 2007318:	00c08074 	movhi	r3,513
 200731c:	18c28b04 	addi	r3,r3,2604
 2007320:	003feb06 	br	20072d0 <_dtoa_r+0x2e4>
 2007324:	d8802917 	ldw	r2,164(sp)
 2007328:	19000204 	addi	r4,r3,8
 200732c:	11000015 	stw	r4,0(r2)
 2007330:	003f6206 	br	20070bc <_dtoa_r+0xd0>
 2007334:	ddc00117 	ldw	r23,4(sp)
 2007338:	d8800217 	ldw	r2,8(sp)
 200733c:	01000804 	movi	r4,32
 2007340:	b8c10c84 	addi	r3,r23,1074
 2007344:	18a3883a 	add	r17,r3,r2
 2007348:	2441b80e 	bge	r4,r17,2007a2c <_dtoa_r+0xa40>
 200734c:	00c01004 	movi	r3,64
 2007350:	1c47c83a 	sub	r3,r3,r17
 2007354:	88bff804 	addi	r2,r17,-32
 2007358:	a8c6983a 	sll	r3,r21,r3
 200735c:	a084d83a 	srl	r2,r20,r2
 2007360:	1888b03a 	or	r4,r3,r2
 2007364:	20038580 	call	2003858 <__floatunsidf>
 2007368:	1011883a 	mov	r8,r2
 200736c:	00bf8434 	movhi	r2,65040
 2007370:	01000044 	movi	r4,1
 2007374:	10d3883a 	add	r9,r2,r3
 2007378:	8dbef344 	addi	r22,r17,-1075
 200737c:	d9000815 	stw	r4,32(sp)
 2007380:	003f6f06 	br	2007140 <_dtoa_r+0x154>
 2007384:	d8001715 	stw	zero,92(sp)
 2007388:	04400044 	movi	r17,1
 200738c:	00bfffc4 	movi	r2,-1
 2007390:	00c00044 	movi	r3,1
 2007394:	d8800e15 	stw	r2,56(sp)
 2007398:	d8002615 	stw	zero,152(sp)
 200739c:	d8800f15 	stw	r2,60(sp)
 20073a0:	d8c00b15 	stw	r3,44(sp)
 20073a4:	1021883a 	mov	r16,r2
 20073a8:	d8801617 	ldw	r2,88(sp)
 20073ac:	10001115 	stw	zero,68(r2)
 20073b0:	d8801617 	ldw	r2,88(sp)
 20073b4:	11401117 	ldw	r5,68(r2)
 20073b8:	1009883a 	mov	r4,r2
 20073bc:	2009ff40 	call	2009ff4 <_Balloc>
 20073c0:	d8c01617 	ldw	r3,88(sp)
 20073c4:	d8800515 	stw	r2,20(sp)
 20073c8:	18801015 	stw	r2,64(r3)
 20073cc:	00800384 	movi	r2,14
 20073d0:	14006836 	bltu	r2,r16,2007574 <_dtoa_r+0x588>
 20073d4:	8805003a 	cmpeq	r2,r17,zero
 20073d8:	1000661e 	bne	r2,zero,2007574 <_dtoa_r+0x588>
 20073dc:	d9000d17 	ldw	r4,52(sp)
 20073e0:	0102300e 	bge	zero,r4,2007ca4 <_dtoa_r+0xcb8>
 20073e4:	208003cc 	andi	r2,r4,15
 20073e8:	100490fa 	slli	r2,r2,3
 20073ec:	2025d13a 	srai	r18,r4,4
 20073f0:	00c08074 	movhi	r3,513
 20073f4:	18c2a004 	addi	r3,r3,2688
 20073f8:	10c5883a 	add	r2,r2,r3
 20073fc:	90c0040c 	andi	r3,r18,16
 2007400:	14000017 	ldw	r16,0(r2)
 2007404:	14400117 	ldw	r17,4(r2)
 2007408:	18036a1e 	bne	r3,zero,20081b4 <_dtoa_r+0x11c8>
 200740c:	05800084 	movi	r22,2
 2007410:	90001026 	beq	r18,zero,2007454 <_dtoa_r+0x468>
 2007414:	04c08074 	movhi	r19,513
 2007418:	9cc2d204 	addi	r19,r19,2888
 200741c:	9080004c 	andi	r2,r18,1
 2007420:	1005003a 	cmpeq	r2,r2,zero
 2007424:	1000081e 	bne	r2,zero,2007448 <_dtoa_r+0x45c>
 2007428:	99800017 	ldw	r6,0(r19)
 200742c:	99c00117 	ldw	r7,4(r19)
 2007430:	880b883a 	mov	r5,r17
 2007434:	8009883a 	mov	r4,r16
 2007438:	20030d00 	call	20030d0 <__muldf3>
 200743c:	1021883a 	mov	r16,r2
 2007440:	b5800044 	addi	r22,r22,1
 2007444:	1823883a 	mov	r17,r3
 2007448:	9025d07a 	srai	r18,r18,1
 200744c:	9cc00204 	addi	r19,r19,8
 2007450:	903ff21e 	bne	r18,zero,200741c <_dtoa_r+0x430>
 2007454:	a80b883a 	mov	r5,r21
 2007458:	a009883a 	mov	r4,r20
 200745c:	880f883a 	mov	r7,r17
 2007460:	800d883a 	mov	r6,r16
 2007464:	20034940 	call	2003494 <__divdf3>
 2007468:	1029883a 	mov	r20,r2
 200746c:	182b883a 	mov	r21,r3
 2007470:	d8c00c17 	ldw	r3,48(sp)
 2007474:	1805003a 	cmpeq	r2,r3,zero
 2007478:	1000081e 	bne	r2,zero,200749c <_dtoa_r+0x4b0>
 200747c:	0005883a 	mov	r2,zero
 2007480:	00cffc34 	movhi	r3,16368
 2007484:	180f883a 	mov	r7,r3
 2007488:	a009883a 	mov	r4,r20
 200748c:	a80b883a 	mov	r5,r21
 2007490:	100d883a 	mov	r6,r2
 2007494:	200cc040 	call	200cc04 <__ltdf2>
 2007498:	1003fe16 	blt	r2,zero,2008494 <_dtoa_r+0x14a8>
 200749c:	b009883a 	mov	r4,r22
 20074a0:	20036ec0 	call	20036ec <__floatsidf>
 20074a4:	180b883a 	mov	r5,r3
 20074a8:	1009883a 	mov	r4,r2
 20074ac:	a00d883a 	mov	r6,r20
 20074b0:	a80f883a 	mov	r7,r21
 20074b4:	20030d00 	call	20030d0 <__muldf3>
 20074b8:	0011883a 	mov	r8,zero
 20074bc:	02500734 	movhi	r9,16412
 20074c0:	1009883a 	mov	r4,r2
 20074c4:	180b883a 	mov	r5,r3
 20074c8:	480f883a 	mov	r7,r9
 20074cc:	400d883a 	mov	r6,r8
 20074d0:	200c9700 	call	200c970 <__adddf3>
 20074d4:	d9000f17 	ldw	r4,60(sp)
 20074d8:	102d883a 	mov	r22,r2
 20074dc:	00bf3034 	movhi	r2,64704
 20074e0:	18b9883a 	add	fp,r3,r2
 20074e4:	e02f883a 	mov	r23,fp
 20074e8:	20028f1e 	bne	r4,zero,2007f28 <_dtoa_r+0xf3c>
 20074ec:	0005883a 	mov	r2,zero
 20074f0:	00d00534 	movhi	r3,16404
 20074f4:	a009883a 	mov	r4,r20
 20074f8:	a80b883a 	mov	r5,r21
 20074fc:	180f883a 	mov	r7,r3
 2007500:	100d883a 	mov	r6,r2
 2007504:	200c8f00 	call	200c8f0 <__subdf3>
 2007508:	1009883a 	mov	r4,r2
 200750c:	e00f883a 	mov	r7,fp
 2007510:	180b883a 	mov	r5,r3
 2007514:	b00d883a 	mov	r6,r22
 2007518:	1025883a 	mov	r18,r2
 200751c:	1827883a 	mov	r19,r3
 2007520:	200caf40 	call	200caf4 <__gtdf2>
 2007524:	00834f16 	blt	zero,r2,2008264 <_dtoa_r+0x1278>
 2007528:	e0e0003c 	xorhi	r3,fp,32768
 200752c:	9009883a 	mov	r4,r18
 2007530:	980b883a 	mov	r5,r19
 2007534:	180f883a 	mov	r7,r3
 2007538:	b00d883a 	mov	r6,r22
 200753c:	200cc040 	call	200cc04 <__ltdf2>
 2007540:	1000080e 	bge	r2,zero,2007564 <_dtoa_r+0x578>
 2007544:	0027883a 	mov	r19,zero
 2007548:	0025883a 	mov	r18,zero
 200754c:	d8802617 	ldw	r2,152(sp)
 2007550:	df000517 	ldw	fp,20(sp)
 2007554:	d8000615 	stw	zero,24(sp)
 2007558:	0084303a 	nor	r2,zero,r2
 200755c:	d8800d15 	stw	r2,52(sp)
 2007560:	00019b06 	br	2007bd0 <_dtoa_r+0xbe4>
 2007564:	d9801217 	ldw	r6,72(sp)
 2007568:	d8801317 	ldw	r2,76(sp)
 200756c:	3029883a 	mov	r20,r6
 2007570:	102b883a 	mov	r21,r2
 2007574:	d8c00217 	ldw	r3,8(sp)
 2007578:	18008516 	blt	r3,zero,2007790 <_dtoa_r+0x7a4>
 200757c:	d9000d17 	ldw	r4,52(sp)
 2007580:	00800384 	movi	r2,14
 2007584:	11008216 	blt	r2,r4,2007790 <_dtoa_r+0x7a4>
 2007588:	200490fa 	slli	r2,r4,3
 200758c:	d9802617 	ldw	r6,152(sp)
 2007590:	00c08074 	movhi	r3,513
 2007594:	18c2a004 	addi	r3,r3,2688
 2007598:	10c5883a 	add	r2,r2,r3
 200759c:	14800017 	ldw	r18,0(r2)
 20075a0:	14c00117 	ldw	r19,4(r2)
 20075a4:	30031e16 	blt	r6,zero,2008220 <_dtoa_r+0x1234>
 20075a8:	d9000517 	ldw	r4,20(sp)
 20075ac:	d8c00f17 	ldw	r3,60(sp)
 20075b0:	a823883a 	mov	r17,r21
 20075b4:	a021883a 	mov	r16,r20
 20075b8:	192b883a 	add	r21,r3,r4
 20075bc:	2039883a 	mov	fp,r4
 20075c0:	00000f06 	br	2007600 <_dtoa_r+0x614>
 20075c4:	0005883a 	mov	r2,zero
 20075c8:	00d00934 	movhi	r3,16420
 20075cc:	5009883a 	mov	r4,r10
 20075d0:	580b883a 	mov	r5,r11
 20075d4:	180f883a 	mov	r7,r3
 20075d8:	100d883a 	mov	r6,r2
 20075dc:	20030d00 	call	20030d0 <__muldf3>
 20075e0:	180b883a 	mov	r5,r3
 20075e4:	000d883a 	mov	r6,zero
 20075e8:	000f883a 	mov	r7,zero
 20075ec:	1009883a 	mov	r4,r2
 20075f0:	1021883a 	mov	r16,r2
 20075f4:	1823883a 	mov	r17,r3
 20075f8:	200ca6c0 	call	200ca6c <__nedf2>
 20075fc:	10004526 	beq	r2,zero,2007714 <_dtoa_r+0x728>
 2007600:	900d883a 	mov	r6,r18
 2007604:	980f883a 	mov	r7,r19
 2007608:	8009883a 	mov	r4,r16
 200760c:	880b883a 	mov	r5,r17
 2007610:	20034940 	call	2003494 <__divdf3>
 2007614:	180b883a 	mov	r5,r3
 2007618:	1009883a 	mov	r4,r2
 200761c:	200cc8c0 	call	200cc8c <__fixdfsi>
 2007620:	1009883a 	mov	r4,r2
 2007624:	1029883a 	mov	r20,r2
 2007628:	20036ec0 	call	20036ec <__floatsidf>
 200762c:	180f883a 	mov	r7,r3
 2007630:	9009883a 	mov	r4,r18
 2007634:	980b883a 	mov	r5,r19
 2007638:	100d883a 	mov	r6,r2
 200763c:	20030d00 	call	20030d0 <__muldf3>
 2007640:	180f883a 	mov	r7,r3
 2007644:	880b883a 	mov	r5,r17
 2007648:	8009883a 	mov	r4,r16
 200764c:	100d883a 	mov	r6,r2
 2007650:	200c8f00 	call	200c8f0 <__subdf3>
 2007654:	1015883a 	mov	r10,r2
 2007658:	a0800c04 	addi	r2,r20,48
 200765c:	e0800005 	stb	r2,0(fp)
 2007660:	e7000044 	addi	fp,fp,1
 2007664:	1817883a 	mov	r11,r3
 2007668:	e57fd61e 	bne	fp,r21,20075c4 <_dtoa_r+0x5d8>
 200766c:	500d883a 	mov	r6,r10
 2007670:	180f883a 	mov	r7,r3
 2007674:	5009883a 	mov	r4,r10
 2007678:	180b883a 	mov	r5,r3
 200767c:	200c9700 	call	200c970 <__adddf3>
 2007680:	100d883a 	mov	r6,r2
 2007684:	9009883a 	mov	r4,r18
 2007688:	980b883a 	mov	r5,r19
 200768c:	180f883a 	mov	r7,r3
 2007690:	1021883a 	mov	r16,r2
 2007694:	1823883a 	mov	r17,r3
 2007698:	200cc040 	call	200cc04 <__ltdf2>
 200769c:	10000816 	blt	r2,zero,20076c0 <_dtoa_r+0x6d4>
 20076a0:	980b883a 	mov	r5,r19
 20076a4:	800d883a 	mov	r6,r16
 20076a8:	880f883a 	mov	r7,r17
 20076ac:	9009883a 	mov	r4,r18
 20076b0:	200c9e40 	call	200c9e4 <__eqdf2>
 20076b4:	1000171e 	bne	r2,zero,2007714 <_dtoa_r+0x728>
 20076b8:	a080004c 	andi	r2,r20,1
 20076bc:	10001526 	beq	r2,zero,2007714 <_dtoa_r+0x728>
 20076c0:	d8800d17 	ldw	r2,52(sp)
 20076c4:	d8800415 	stw	r2,16(sp)
 20076c8:	e009883a 	mov	r4,fp
 20076cc:	213fffc4 	addi	r4,r4,-1
 20076d0:	20c00007 	ldb	r3,0(r4)
 20076d4:	00800e44 	movi	r2,57
 20076d8:	1880081e 	bne	r3,r2,20076fc <_dtoa_r+0x710>
 20076dc:	d8800517 	ldw	r2,20(sp)
 20076e0:	113ffa1e 	bne	r2,r4,20076cc <_dtoa_r+0x6e0>
 20076e4:	d8c00417 	ldw	r3,16(sp)
 20076e8:	d9800517 	ldw	r6,20(sp)
 20076ec:	00800c04 	movi	r2,48
 20076f0:	18c00044 	addi	r3,r3,1
 20076f4:	d8c00415 	stw	r3,16(sp)
 20076f8:	30800005 	stb	r2,0(r6)
 20076fc:	20800003 	ldbu	r2,0(r4)
 2007700:	d8c00417 	ldw	r3,16(sp)
 2007704:	27000044 	addi	fp,r4,1
 2007708:	10800044 	addi	r2,r2,1
 200770c:	d8c00d15 	stw	r3,52(sp)
 2007710:	20800005 	stb	r2,0(r4)
 2007714:	d9001617 	ldw	r4,88(sp)
 2007718:	d9400717 	ldw	r5,28(sp)
 200771c:	2009a740 	call	2009a74 <_Bfree>
 2007720:	e0000005 	stb	zero,0(fp)
 2007724:	d9800d17 	ldw	r6,52(sp)
 2007728:	d8c02717 	ldw	r3,156(sp)
 200772c:	d9002917 	ldw	r4,164(sp)
 2007730:	30800044 	addi	r2,r6,1
 2007734:	18800015 	stw	r2,0(r3)
 2007738:	20029c26 	beq	r4,zero,20081ac <_dtoa_r+0x11c0>
 200773c:	d8c00517 	ldw	r3,20(sp)
 2007740:	27000015 	stw	fp,0(r4)
 2007744:	003e5d06 	br	20070bc <_dtoa_r+0xd0>
 2007748:	d9800d17 	ldw	r6,52(sp)
 200774c:	00c08074 	movhi	r3,513
 2007750:	18c2a004 	addi	r3,r3,2688
 2007754:	d9001217 	ldw	r4,72(sp)
 2007758:	300490fa 	slli	r2,r6,3
 200775c:	d9401317 	ldw	r5,76(sp)
 2007760:	10c5883a 	add	r2,r2,r3
 2007764:	12000017 	ldw	r8,0(r2)
 2007768:	12400117 	ldw	r9,4(r2)
 200776c:	400d883a 	mov	r6,r8
 2007770:	480f883a 	mov	r7,r9
 2007774:	200cc040 	call	200cc04 <__ltdf2>
 2007778:	1000030e 	bge	r2,zero,2007788 <_dtoa_r+0x79c>
 200777c:	d8800d17 	ldw	r2,52(sp)
 2007780:	10bfffc4 	addi	r2,r2,-1
 2007784:	d8800d15 	stw	r2,52(sp)
 2007788:	d8000c15 	stw	zero,48(sp)
 200778c:	003ea806 	br	2007230 <_dtoa_r+0x244>
 2007790:	d9000b17 	ldw	r4,44(sp)
 2007794:	202cc03a 	cmpne	r22,r4,zero
 2007798:	b000c71e 	bne	r22,zero,2007ab8 <_dtoa_r+0xacc>
 200779c:	dc001117 	ldw	r16,68(sp)
 20077a0:	dc801017 	ldw	r18,64(sp)
 20077a4:	0027883a 	mov	r19,zero
 20077a8:	04000b0e 	bge	zero,r16,20077d8 <_dtoa_r+0x7ec>
 20077ac:	d8c00a17 	ldw	r3,40(sp)
 20077b0:	00c0090e 	bge	zero,r3,20077d8 <_dtoa_r+0x7ec>
 20077b4:	8005883a 	mov	r2,r16
 20077b8:	1c011316 	blt	r3,r16,2007c08 <_dtoa_r+0xc1c>
 20077bc:	d9000a17 	ldw	r4,40(sp)
 20077c0:	d9801117 	ldw	r6,68(sp)
 20077c4:	80a1c83a 	sub	r16,r16,r2
 20077c8:	2089c83a 	sub	r4,r4,r2
 20077cc:	308dc83a 	sub	r6,r6,r2
 20077d0:	d9000a15 	stw	r4,40(sp)
 20077d4:	d9801115 	stw	r6,68(sp)
 20077d8:	d8801017 	ldw	r2,64(sp)
 20077dc:	0080150e 	bge	zero,r2,2007834 <_dtoa_r+0x848>
 20077e0:	d8c00b17 	ldw	r3,44(sp)
 20077e4:	1805003a 	cmpeq	r2,r3,zero
 20077e8:	1001c91e 	bne	r2,zero,2007f10 <_dtoa_r+0xf24>
 20077ec:	04800e0e 	bge	zero,r18,2007828 <_dtoa_r+0x83c>
 20077f0:	d9001617 	ldw	r4,88(sp)
 20077f4:	980b883a 	mov	r5,r19
 20077f8:	900d883a 	mov	r6,r18
 20077fc:	200a8c00 	call	200a8c0 <__pow5mult>
 2007800:	d9001617 	ldw	r4,88(sp)
 2007804:	d9800717 	ldw	r6,28(sp)
 2007808:	100b883a 	mov	r5,r2
 200780c:	1027883a 	mov	r19,r2
 2007810:	200a5040 	call	200a504 <__multiply>
 2007814:	d9001617 	ldw	r4,88(sp)
 2007818:	d9400717 	ldw	r5,28(sp)
 200781c:	1023883a 	mov	r17,r2
 2007820:	2009a740 	call	2009a74 <_Bfree>
 2007824:	dc400715 	stw	r17,28(sp)
 2007828:	d9001017 	ldw	r4,64(sp)
 200782c:	248dc83a 	sub	r6,r4,r18
 2007830:	30010e1e 	bne	r6,zero,2007c6c <_dtoa_r+0xc80>
 2007834:	d9001617 	ldw	r4,88(sp)
 2007838:	04400044 	movi	r17,1
 200783c:	880b883a 	mov	r5,r17
 2007840:	200a7580 	call	200a758 <__i2b>
 2007844:	d9800917 	ldw	r6,36(sp)
 2007848:	1025883a 	mov	r18,r2
 200784c:	0180040e 	bge	zero,r6,2007860 <_dtoa_r+0x874>
 2007850:	d9001617 	ldw	r4,88(sp)
 2007854:	100b883a 	mov	r5,r2
 2007858:	200a8c00 	call	200a8c0 <__pow5mult>
 200785c:	1025883a 	mov	r18,r2
 2007860:	d8801717 	ldw	r2,92(sp)
 2007864:	8880f30e 	bge	r17,r2,2007c34 <_dtoa_r+0xc48>
 2007868:	0023883a 	mov	r17,zero
 200786c:	d9800917 	ldw	r6,36(sp)
 2007870:	30019e1e 	bne	r6,zero,2007eec <_dtoa_r+0xf00>
 2007874:	00c00044 	movi	r3,1
 2007878:	d9000a17 	ldw	r4,40(sp)
 200787c:	20c5883a 	add	r2,r4,r3
 2007880:	10c007cc 	andi	r3,r2,31
 2007884:	1800841e 	bne	r3,zero,2007a98 <_dtoa_r+0xaac>
 2007888:	00800704 	movi	r2,28
 200788c:	d9000a17 	ldw	r4,40(sp)
 2007890:	d9801117 	ldw	r6,68(sp)
 2007894:	80a1883a 	add	r16,r16,r2
 2007898:	2089883a 	add	r4,r4,r2
 200789c:	308d883a 	add	r6,r6,r2
 20078a0:	d9000a15 	stw	r4,40(sp)
 20078a4:	d9801115 	stw	r6,68(sp)
 20078a8:	d8801117 	ldw	r2,68(sp)
 20078ac:	0080050e 	bge	zero,r2,20078c4 <_dtoa_r+0x8d8>
 20078b0:	d9400717 	ldw	r5,28(sp)
 20078b4:	d9001617 	ldw	r4,88(sp)
 20078b8:	100d883a 	mov	r6,r2
 20078bc:	200a3b80 	call	200a3b8 <__lshift>
 20078c0:	d8800715 	stw	r2,28(sp)
 20078c4:	d8c00a17 	ldw	r3,40(sp)
 20078c8:	00c0050e 	bge	zero,r3,20078e0 <_dtoa_r+0x8f4>
 20078cc:	d9001617 	ldw	r4,88(sp)
 20078d0:	900b883a 	mov	r5,r18
 20078d4:	180d883a 	mov	r6,r3
 20078d8:	200a3b80 	call	200a3b8 <__lshift>
 20078dc:	1025883a 	mov	r18,r2
 20078e0:	d9000c17 	ldw	r4,48(sp)
 20078e4:	2005003a 	cmpeq	r2,r4,zero
 20078e8:	10016f26 	beq	r2,zero,2007ea8 <_dtoa_r+0xebc>
 20078ec:	d9000f17 	ldw	r4,60(sp)
 20078f0:	0102170e 	bge	zero,r4,2008150 <_dtoa_r+0x1164>
 20078f4:	d9800b17 	ldw	r6,44(sp)
 20078f8:	3005003a 	cmpeq	r2,r6,zero
 20078fc:	1000881e 	bne	r2,zero,2007b20 <_dtoa_r+0xb34>
 2007900:	0400050e 	bge	zero,r16,2007918 <_dtoa_r+0x92c>
 2007904:	d9001617 	ldw	r4,88(sp)
 2007908:	980b883a 	mov	r5,r19
 200790c:	800d883a 	mov	r6,r16
 2007910:	200a3b80 	call	200a3b8 <__lshift>
 2007914:	1027883a 	mov	r19,r2
 2007918:	8804c03a 	cmpne	r2,r17,zero
 200791c:	1002541e 	bne	r2,zero,2008270 <_dtoa_r+0x1284>
 2007920:	980b883a 	mov	r5,r19
 2007924:	dd800517 	ldw	r22,20(sp)
 2007928:	dcc00615 	stw	r19,24(sp)
 200792c:	a700004c 	andi	fp,r20,1
 2007930:	2827883a 	mov	r19,r5
 2007934:	d9000717 	ldw	r4,28(sp)
 2007938:	900b883a 	mov	r5,r18
 200793c:	2006da80 	call	2006da8 <quorem>
 2007940:	d9000717 	ldw	r4,28(sp)
 2007944:	d9400617 	ldw	r5,24(sp)
 2007948:	1023883a 	mov	r17,r2
 200794c:	8dc00c04 	addi	r23,r17,48
 2007950:	2009bd00 	call	2009bd0 <__mcmp>
 2007954:	d9001617 	ldw	r4,88(sp)
 2007958:	900b883a 	mov	r5,r18
 200795c:	980d883a 	mov	r6,r19
 2007960:	1029883a 	mov	r20,r2
 2007964:	200a22c0 	call	200a22c <__mdiff>
 2007968:	102b883a 	mov	r21,r2
 200796c:	10800317 	ldw	r2,12(r2)
 2007970:	1001281e 	bne	r2,zero,2007e14 <_dtoa_r+0xe28>
 2007974:	d9000717 	ldw	r4,28(sp)
 2007978:	a80b883a 	mov	r5,r21
 200797c:	2009bd00 	call	2009bd0 <__mcmp>
 2007980:	d9001617 	ldw	r4,88(sp)
 2007984:	1021883a 	mov	r16,r2
 2007988:	a80b883a 	mov	r5,r21
 200798c:	2009a740 	call	2009a74 <_Bfree>
 2007990:	8000041e 	bne	r16,zero,20079a4 <_dtoa_r+0x9b8>
 2007994:	d8801717 	ldw	r2,92(sp)
 2007998:	1000021e 	bne	r2,zero,20079a4 <_dtoa_r+0x9b8>
 200799c:	e004c03a 	cmpne	r2,fp,zero
 20079a0:	10011726 	beq	r2,zero,2007e00 <_dtoa_r+0xe14>
 20079a4:	a0010616 	blt	r20,zero,2007dc0 <_dtoa_r+0xdd4>
 20079a8:	a000041e 	bne	r20,zero,20079bc <_dtoa_r+0x9d0>
 20079ac:	d8c01717 	ldw	r3,92(sp)
 20079b0:	1800021e 	bne	r3,zero,20079bc <_dtoa_r+0x9d0>
 20079b4:	e004c03a 	cmpne	r2,fp,zero
 20079b8:	10010126 	beq	r2,zero,2007dc0 <_dtoa_r+0xdd4>
 20079bc:	04023d16 	blt	zero,r16,20082b4 <_dtoa_r+0x12c8>
 20079c0:	b5c00005 	stb	r23,0(r22)
 20079c4:	d9800517 	ldw	r6,20(sp)
 20079c8:	d9000f17 	ldw	r4,60(sp)
 20079cc:	b5800044 	addi	r22,r22,1
 20079d0:	3105883a 	add	r2,r6,r4
 20079d4:	b0806526 	beq	r22,r2,2007b6c <_dtoa_r+0xb80>
 20079d8:	d9400717 	ldw	r5,28(sp)
 20079dc:	d9001617 	ldw	r4,88(sp)
 20079e0:	01800284 	movi	r6,10
 20079e4:	000f883a 	mov	r7,zero
 20079e8:	200a7940 	call	200a794 <__multadd>
 20079ec:	d8800715 	stw	r2,28(sp)
 20079f0:	d8800617 	ldw	r2,24(sp)
 20079f4:	14c10c26 	beq	r2,r19,2007e28 <_dtoa_r+0xe3c>
 20079f8:	d9400617 	ldw	r5,24(sp)
 20079fc:	d9001617 	ldw	r4,88(sp)
 2007a00:	01800284 	movi	r6,10
 2007a04:	000f883a 	mov	r7,zero
 2007a08:	200a7940 	call	200a794 <__multadd>
 2007a0c:	d9001617 	ldw	r4,88(sp)
 2007a10:	980b883a 	mov	r5,r19
 2007a14:	01800284 	movi	r6,10
 2007a18:	000f883a 	mov	r7,zero
 2007a1c:	d8800615 	stw	r2,24(sp)
 2007a20:	200a7940 	call	200a794 <__multadd>
 2007a24:	1027883a 	mov	r19,r2
 2007a28:	003fc206 	br	2007934 <_dtoa_r+0x948>
 2007a2c:	2445c83a 	sub	r2,r4,r17
 2007a30:	a088983a 	sll	r4,r20,r2
 2007a34:	003e4b06 	br	2007364 <_dtoa_r+0x378>
 2007a38:	01bfffc4 	movi	r6,-1
 2007a3c:	00800044 	movi	r2,1
 2007a40:	d9800e15 	stw	r6,56(sp)
 2007a44:	d9800f15 	stw	r6,60(sp)
 2007a48:	d8800b15 	stw	r2,44(sp)
 2007a4c:	d8c01617 	ldw	r3,88(sp)
 2007a50:	008005c4 	movi	r2,23
 2007a54:	18001115 	stw	zero,68(r3)
 2007a58:	1580082e 	bgeu	r2,r22,2007a7c <_dtoa_r+0xa90>
 2007a5c:	00c00104 	movi	r3,4
 2007a60:	0009883a 	mov	r4,zero
 2007a64:	18c7883a 	add	r3,r3,r3
 2007a68:	18800504 	addi	r2,r3,20
 2007a6c:	21000044 	addi	r4,r4,1
 2007a70:	b0bffc2e 	bgeu	r22,r2,2007a64 <_dtoa_r+0xa78>
 2007a74:	d9801617 	ldw	r6,88(sp)
 2007a78:	31001115 	stw	r4,68(r6)
 2007a7c:	dc000f17 	ldw	r16,60(sp)
 2007a80:	003e4b06 	br	20073b0 <_dtoa_r+0x3c4>
 2007a84:	d9801717 	ldw	r6,92(sp)
 2007a88:	0023883a 	mov	r17,zero
 2007a8c:	31bfff04 	addi	r6,r6,-4
 2007a90:	d9801715 	stw	r6,92(sp)
 2007a94:	003df806 	br	2007278 <_dtoa_r+0x28c>
 2007a98:	00800804 	movi	r2,32
 2007a9c:	10c9c83a 	sub	r4,r2,r3
 2007aa0:	00c00104 	movi	r3,4
 2007aa4:	19005a16 	blt	r3,r4,2007c10 <_dtoa_r+0xc24>
 2007aa8:	008000c4 	movi	r2,3
 2007aac:	113f7e16 	blt	r2,r4,20078a8 <_dtoa_r+0x8bc>
 2007ab0:	20800704 	addi	r2,r4,28
 2007ab4:	003f7506 	br	200788c <_dtoa_r+0x8a0>
 2007ab8:	d9801717 	ldw	r6,92(sp)
 2007abc:	00800044 	movi	r2,1
 2007ac0:	1180a10e 	bge	r2,r6,2007d48 <_dtoa_r+0xd5c>
 2007ac4:	d9800f17 	ldw	r6,60(sp)
 2007ac8:	d8c01017 	ldw	r3,64(sp)
 2007acc:	30bfffc4 	addi	r2,r6,-1
 2007ad0:	1881c616 	blt	r3,r2,20081ec <_dtoa_r+0x1200>
 2007ad4:	18a5c83a 	sub	r18,r3,r2
 2007ad8:	d8800f17 	ldw	r2,60(sp)
 2007adc:	10026216 	blt	r2,zero,2008468 <_dtoa_r+0x147c>
 2007ae0:	dc001117 	ldw	r16,68(sp)
 2007ae4:	1007883a 	mov	r3,r2
 2007ae8:	d9800a17 	ldw	r6,40(sp)
 2007aec:	d8801117 	ldw	r2,68(sp)
 2007af0:	d9001617 	ldw	r4,88(sp)
 2007af4:	30cd883a 	add	r6,r6,r3
 2007af8:	10c5883a 	add	r2,r2,r3
 2007afc:	01400044 	movi	r5,1
 2007b00:	d9800a15 	stw	r6,40(sp)
 2007b04:	d8801115 	stw	r2,68(sp)
 2007b08:	200a7580 	call	200a758 <__i2b>
 2007b0c:	1027883a 	mov	r19,r2
 2007b10:	003f2506 	br	20077a8 <_dtoa_r+0x7bc>
 2007b14:	00c08074 	movhi	r3,513
 2007b18:	18c28204 	addi	r3,r3,2568
 2007b1c:	003d6706 	br	20070bc <_dtoa_r+0xd0>
 2007b20:	dd800517 	ldw	r22,20(sp)
 2007b24:	04000044 	movi	r16,1
 2007b28:	00000706 	br	2007b48 <_dtoa_r+0xb5c>
 2007b2c:	d9400717 	ldw	r5,28(sp)
 2007b30:	d9001617 	ldw	r4,88(sp)
 2007b34:	01800284 	movi	r6,10
 2007b38:	000f883a 	mov	r7,zero
 2007b3c:	200a7940 	call	200a794 <__multadd>
 2007b40:	d8800715 	stw	r2,28(sp)
 2007b44:	84000044 	addi	r16,r16,1
 2007b48:	d9000717 	ldw	r4,28(sp)
 2007b4c:	900b883a 	mov	r5,r18
 2007b50:	2006da80 	call	2006da8 <quorem>
 2007b54:	15c00c04 	addi	r23,r2,48
 2007b58:	b5c00005 	stb	r23,0(r22)
 2007b5c:	d8c00f17 	ldw	r3,60(sp)
 2007b60:	b5800044 	addi	r22,r22,1
 2007b64:	80fff116 	blt	r16,r3,2007b2c <_dtoa_r+0xb40>
 2007b68:	d8000615 	stw	zero,24(sp)
 2007b6c:	d9400717 	ldw	r5,28(sp)
 2007b70:	d9001617 	ldw	r4,88(sp)
 2007b74:	01800044 	movi	r6,1
 2007b78:	200a3b80 	call	200a3b8 <__lshift>
 2007b7c:	1009883a 	mov	r4,r2
 2007b80:	900b883a 	mov	r5,r18
 2007b84:	d8800715 	stw	r2,28(sp)
 2007b88:	2009bd00 	call	2009bd0 <__mcmp>
 2007b8c:	00803c0e 	bge	zero,r2,2007c80 <_dtoa_r+0xc94>
 2007b90:	b009883a 	mov	r4,r22
 2007b94:	213fffc4 	addi	r4,r4,-1
 2007b98:	21400003 	ldbu	r5,0(r4)
 2007b9c:	00800e44 	movi	r2,57
 2007ba0:	28c03fcc 	andi	r3,r5,255
 2007ba4:	18c0201c 	xori	r3,r3,128
 2007ba8:	18ffe004 	addi	r3,r3,-128
 2007bac:	1881981e 	bne	r3,r2,2008210 <_dtoa_r+0x1224>
 2007bb0:	d9800517 	ldw	r6,20(sp)
 2007bb4:	21bff71e 	bne	r4,r6,2007b94 <_dtoa_r+0xba8>
 2007bb8:	d8800d17 	ldw	r2,52(sp)
 2007bbc:	37000044 	addi	fp,r6,1
 2007bc0:	10800044 	addi	r2,r2,1
 2007bc4:	d8800d15 	stw	r2,52(sp)
 2007bc8:	00800c44 	movi	r2,49
 2007bcc:	30800005 	stb	r2,0(r6)
 2007bd0:	d9001617 	ldw	r4,88(sp)
 2007bd4:	900b883a 	mov	r5,r18
 2007bd8:	2009a740 	call	2009a74 <_Bfree>
 2007bdc:	983ecd26 	beq	r19,zero,2007714 <_dtoa_r+0x728>
 2007be0:	d8c00617 	ldw	r3,24(sp)
 2007be4:	18000426 	beq	r3,zero,2007bf8 <_dtoa_r+0xc0c>
 2007be8:	1cc00326 	beq	r3,r19,2007bf8 <_dtoa_r+0xc0c>
 2007bec:	d9001617 	ldw	r4,88(sp)
 2007bf0:	180b883a 	mov	r5,r3
 2007bf4:	2009a740 	call	2009a74 <_Bfree>
 2007bf8:	d9001617 	ldw	r4,88(sp)
 2007bfc:	980b883a 	mov	r5,r19
 2007c00:	2009a740 	call	2009a74 <_Bfree>
 2007c04:	003ec306 	br	2007714 <_dtoa_r+0x728>
 2007c08:	1805883a 	mov	r2,r3
 2007c0c:	003eeb06 	br	20077bc <_dtoa_r+0x7d0>
 2007c10:	d9800a17 	ldw	r6,40(sp)
 2007c14:	d8c01117 	ldw	r3,68(sp)
 2007c18:	20bfff04 	addi	r2,r4,-4
 2007c1c:	308d883a 	add	r6,r6,r2
 2007c20:	1887883a 	add	r3,r3,r2
 2007c24:	80a1883a 	add	r16,r16,r2
 2007c28:	d9800a15 	stw	r6,40(sp)
 2007c2c:	d8c01115 	stw	r3,68(sp)
 2007c30:	003f1d06 	br	20078a8 <_dtoa_r+0x8bc>
 2007c34:	a03f0c1e 	bne	r20,zero,2007868 <_dtoa_r+0x87c>
 2007c38:	00800434 	movhi	r2,16
 2007c3c:	10bfffc4 	addi	r2,r2,-1
 2007c40:	a884703a 	and	r2,r21,r2
 2007c44:	103f081e 	bne	r2,zero,2007868 <_dtoa_r+0x87c>
 2007c48:	a89ffc2c 	andhi	r2,r21,32752
 2007c4c:	103f0626 	beq	r2,zero,2007868 <_dtoa_r+0x87c>
 2007c50:	d8c01117 	ldw	r3,68(sp)
 2007c54:	d9000a17 	ldw	r4,40(sp)
 2007c58:	18c00044 	addi	r3,r3,1
 2007c5c:	21000044 	addi	r4,r4,1
 2007c60:	d8c01115 	stw	r3,68(sp)
 2007c64:	d9000a15 	stw	r4,40(sp)
 2007c68:	003f0006 	br	200786c <_dtoa_r+0x880>
 2007c6c:	d9400717 	ldw	r5,28(sp)
 2007c70:	d9001617 	ldw	r4,88(sp)
 2007c74:	200a8c00 	call	200a8c0 <__pow5mult>
 2007c78:	d8800715 	stw	r2,28(sp)
 2007c7c:	003eed06 	br	2007834 <_dtoa_r+0x848>
 2007c80:	1000021e 	bne	r2,zero,2007c8c <_dtoa_r+0xca0>
 2007c84:	b880004c 	andi	r2,r23,1
 2007c88:	103fc11e 	bne	r2,zero,2007b90 <_dtoa_r+0xba4>
 2007c8c:	b5bfffc4 	addi	r22,r22,-1
 2007c90:	b0c00007 	ldb	r3,0(r22)
 2007c94:	00800c04 	movi	r2,48
 2007c98:	18bffc26 	beq	r3,r2,2007c8c <_dtoa_r+0xca0>
 2007c9c:	b7000044 	addi	fp,r22,1
 2007ca0:	003fcb06 	br	2007bd0 <_dtoa_r+0xbe4>
 2007ca4:	d9800d17 	ldw	r6,52(sp)
 2007ca8:	018fc83a 	sub	r7,zero,r6
 2007cac:	3801f726 	beq	r7,zero,200848c <_dtoa_r+0x14a0>
 2007cb0:	398003cc 	andi	r6,r7,15
 2007cb4:	300c90fa 	slli	r6,r6,3
 2007cb8:	01408074 	movhi	r5,513
 2007cbc:	2942a004 	addi	r5,r5,2688
 2007cc0:	d9001217 	ldw	r4,72(sp)
 2007cc4:	314d883a 	add	r6,r6,r5
 2007cc8:	30c00117 	ldw	r3,4(r6)
 2007ccc:	30800017 	ldw	r2,0(r6)
 2007cd0:	d9401317 	ldw	r5,76(sp)
 2007cd4:	3821d13a 	srai	r16,r7,4
 2007cd8:	100d883a 	mov	r6,r2
 2007cdc:	180f883a 	mov	r7,r3
 2007ce0:	20030d00 	call	20030d0 <__muldf3>
 2007ce4:	1011883a 	mov	r8,r2
 2007ce8:	1813883a 	mov	r9,r3
 2007cec:	1029883a 	mov	r20,r2
 2007cf0:	182b883a 	mov	r21,r3
 2007cf4:	8001e526 	beq	r16,zero,200848c <_dtoa_r+0x14a0>
 2007cf8:	05800084 	movi	r22,2
 2007cfc:	04408074 	movhi	r17,513
 2007d00:	8c42d204 	addi	r17,r17,2888
 2007d04:	8080004c 	andi	r2,r16,1
 2007d08:	1005003a 	cmpeq	r2,r2,zero
 2007d0c:	1000081e 	bne	r2,zero,2007d30 <_dtoa_r+0xd44>
 2007d10:	89800017 	ldw	r6,0(r17)
 2007d14:	89c00117 	ldw	r7,4(r17)
 2007d18:	480b883a 	mov	r5,r9
 2007d1c:	4009883a 	mov	r4,r8
 2007d20:	20030d00 	call	20030d0 <__muldf3>
 2007d24:	1011883a 	mov	r8,r2
 2007d28:	b5800044 	addi	r22,r22,1
 2007d2c:	1813883a 	mov	r9,r3
 2007d30:	8021d07a 	srai	r16,r16,1
 2007d34:	8c400204 	addi	r17,r17,8
 2007d38:	803ff21e 	bne	r16,zero,2007d04 <_dtoa_r+0xd18>
 2007d3c:	4029883a 	mov	r20,r8
 2007d40:	482b883a 	mov	r21,r9
 2007d44:	003dca06 	br	2007470 <_dtoa_r+0x484>
 2007d48:	d9000817 	ldw	r4,32(sp)
 2007d4c:	2005003a 	cmpeq	r2,r4,zero
 2007d50:	1001f61e 	bne	r2,zero,200852c <_dtoa_r+0x1540>
 2007d54:	dc001117 	ldw	r16,68(sp)
 2007d58:	dc801017 	ldw	r18,64(sp)
 2007d5c:	18c10cc4 	addi	r3,r3,1075
 2007d60:	003f6106 	br	2007ae8 <_dtoa_r+0xafc>
 2007d64:	d8000b15 	stw	zero,44(sp)
 2007d68:	d9802617 	ldw	r6,152(sp)
 2007d6c:	d8c00d17 	ldw	r3,52(sp)
 2007d70:	30800044 	addi	r2,r6,1
 2007d74:	18ad883a 	add	r22,r3,r2
 2007d78:	b13fffc4 	addi	r4,r22,-1
 2007d7c:	d9000e15 	stw	r4,56(sp)
 2007d80:	0581f60e 	bge	zero,r22,200855c <_dtoa_r+0x1570>
 2007d84:	dd800f15 	stw	r22,60(sp)
 2007d88:	003f3006 	br	2007a4c <_dtoa_r+0xa60>
 2007d8c:	d8000b15 	stw	zero,44(sp)
 2007d90:	d9002617 	ldw	r4,152(sp)
 2007d94:	0101eb0e 	bge	zero,r4,2008544 <_dtoa_r+0x1558>
 2007d98:	202d883a 	mov	r22,r4
 2007d9c:	d9000e15 	stw	r4,56(sp)
 2007da0:	d9000f15 	stw	r4,60(sp)
 2007da4:	003f2906 	br	2007a4c <_dtoa_r+0xa60>
 2007da8:	01800044 	movi	r6,1
 2007dac:	d9800b15 	stw	r6,44(sp)
 2007db0:	003ff706 	br	2007d90 <_dtoa_r+0xda4>
 2007db4:	01000044 	movi	r4,1
 2007db8:	d9000b15 	stw	r4,44(sp)
 2007dbc:	003fea06 	br	2007d68 <_dtoa_r+0xd7c>
 2007dc0:	04000c0e 	bge	zero,r16,2007df4 <_dtoa_r+0xe08>
 2007dc4:	d9400717 	ldw	r5,28(sp)
 2007dc8:	d9001617 	ldw	r4,88(sp)
 2007dcc:	01800044 	movi	r6,1
 2007dd0:	200a3b80 	call	200a3b8 <__lshift>
 2007dd4:	1009883a 	mov	r4,r2
 2007dd8:	900b883a 	mov	r5,r18
 2007ddc:	d8800715 	stw	r2,28(sp)
 2007de0:	2009bd00 	call	2009bd0 <__mcmp>
 2007de4:	0081e00e 	bge	zero,r2,2008568 <_dtoa_r+0x157c>
 2007de8:	bdc00044 	addi	r23,r23,1
 2007dec:	00800e84 	movi	r2,58
 2007df0:	b881a226 	beq	r23,r2,200847c <_dtoa_r+0x1490>
 2007df4:	b7000044 	addi	fp,r22,1
 2007df8:	b5c00005 	stb	r23,0(r22)
 2007dfc:	003f7406 	br	2007bd0 <_dtoa_r+0xbe4>
 2007e00:	00800e44 	movi	r2,57
 2007e04:	b8819d26 	beq	r23,r2,200847c <_dtoa_r+0x1490>
 2007e08:	053ffa0e 	bge	zero,r20,2007df4 <_dtoa_r+0xe08>
 2007e0c:	8dc00c44 	addi	r23,r17,49
 2007e10:	003ff806 	br	2007df4 <_dtoa_r+0xe08>
 2007e14:	d9001617 	ldw	r4,88(sp)
 2007e18:	a80b883a 	mov	r5,r21
 2007e1c:	04000044 	movi	r16,1
 2007e20:	2009a740 	call	2009a74 <_Bfree>
 2007e24:	003edf06 	br	20079a4 <_dtoa_r+0x9b8>
 2007e28:	d9001617 	ldw	r4,88(sp)
 2007e2c:	980b883a 	mov	r5,r19
 2007e30:	01800284 	movi	r6,10
 2007e34:	000f883a 	mov	r7,zero
 2007e38:	200a7940 	call	200a794 <__multadd>
 2007e3c:	1027883a 	mov	r19,r2
 2007e40:	d8800615 	stw	r2,24(sp)
 2007e44:	003ebb06 	br	2007934 <_dtoa_r+0x948>
 2007e48:	d9801117 	ldw	r6,68(sp)
 2007e4c:	d8800d17 	ldw	r2,52(sp)
 2007e50:	d8000915 	stw	zero,36(sp)
 2007e54:	308dc83a 	sub	r6,r6,r2
 2007e58:	0087c83a 	sub	r3,zero,r2
 2007e5c:	d9801115 	stw	r6,68(sp)
 2007e60:	d8c01015 	stw	r3,64(sp)
 2007e64:	003cfe06 	br	2007260 <_dtoa_r+0x274>
 2007e68:	018dc83a 	sub	r6,zero,r6
 2007e6c:	d9801115 	stw	r6,68(sp)
 2007e70:	d8000a15 	stw	zero,40(sp)
 2007e74:	003cf306 	br	2007244 <_dtoa_r+0x258>
 2007e78:	d9000d17 	ldw	r4,52(sp)
 2007e7c:	20036ec0 	call	20036ec <__floatsidf>
 2007e80:	880b883a 	mov	r5,r17
 2007e84:	8009883a 	mov	r4,r16
 2007e88:	180f883a 	mov	r7,r3
 2007e8c:	100d883a 	mov	r6,r2
 2007e90:	200ca6c0 	call	200ca6c <__nedf2>
 2007e94:	103ce126 	beq	r2,zero,200721c <_dtoa_r+0x230>
 2007e98:	d9800d17 	ldw	r6,52(sp)
 2007e9c:	31bfffc4 	addi	r6,r6,-1
 2007ea0:	d9800d15 	stw	r6,52(sp)
 2007ea4:	003cdd06 	br	200721c <_dtoa_r+0x230>
 2007ea8:	d9000717 	ldw	r4,28(sp)
 2007eac:	900b883a 	mov	r5,r18
 2007eb0:	2009bd00 	call	2009bd0 <__mcmp>
 2007eb4:	103e8d0e 	bge	r2,zero,20078ec <_dtoa_r+0x900>
 2007eb8:	d9400717 	ldw	r5,28(sp)
 2007ebc:	d9001617 	ldw	r4,88(sp)
 2007ec0:	01800284 	movi	r6,10
 2007ec4:	000f883a 	mov	r7,zero
 2007ec8:	200a7940 	call	200a794 <__multadd>
 2007ecc:	d9800d17 	ldw	r6,52(sp)
 2007ed0:	d8800715 	stw	r2,28(sp)
 2007ed4:	31bfffc4 	addi	r6,r6,-1
 2007ed8:	d9800d15 	stw	r6,52(sp)
 2007edc:	b001a71e 	bne	r22,zero,200857c <_dtoa_r+0x1590>
 2007ee0:	d8800e17 	ldw	r2,56(sp)
 2007ee4:	d8800f15 	stw	r2,60(sp)
 2007ee8:	003e8006 	br	20078ec <_dtoa_r+0x900>
 2007eec:	90800417 	ldw	r2,16(r18)
 2007ef0:	1085883a 	add	r2,r2,r2
 2007ef4:	1085883a 	add	r2,r2,r2
 2007ef8:	1485883a 	add	r2,r2,r18
 2007efc:	11000417 	ldw	r4,16(r2)
 2007f00:	2009a9c0 	call	2009a9c <__hi0bits>
 2007f04:	00c00804 	movi	r3,32
 2007f08:	1887c83a 	sub	r3,r3,r2
 2007f0c:	003e5a06 	br	2007878 <_dtoa_r+0x88c>
 2007f10:	d9400717 	ldw	r5,28(sp)
 2007f14:	d9801017 	ldw	r6,64(sp)
 2007f18:	d9001617 	ldw	r4,88(sp)
 2007f1c:	200a8c00 	call	200a8c0 <__pow5mult>
 2007f20:	d8800715 	stw	r2,28(sp)
 2007f24:	003e4306 	br	2007834 <_dtoa_r+0x848>
 2007f28:	d9800f17 	ldw	r6,60(sp)
 2007f2c:	d8800d17 	ldw	r2,52(sp)
 2007f30:	d9800315 	stw	r6,12(sp)
 2007f34:	d8800415 	stw	r2,16(sp)
 2007f38:	d8c00b17 	ldw	r3,44(sp)
 2007f3c:	1805003a 	cmpeq	r2,r3,zero
 2007f40:	1000e21e 	bne	r2,zero,20082cc <_dtoa_r+0x12e0>
 2007f44:	d9000317 	ldw	r4,12(sp)
 2007f48:	0005883a 	mov	r2,zero
 2007f4c:	00cff834 	movhi	r3,16352
 2007f50:	200c90fa 	slli	r6,r4,3
 2007f54:	01008074 	movhi	r4,513
 2007f58:	2102a004 	addi	r4,r4,2688
 2007f5c:	180b883a 	mov	r5,r3
 2007f60:	310d883a 	add	r6,r6,r4
 2007f64:	327fff17 	ldw	r9,-4(r6)
 2007f68:	323ffe17 	ldw	r8,-8(r6)
 2007f6c:	1009883a 	mov	r4,r2
 2007f70:	480f883a 	mov	r7,r9
 2007f74:	400d883a 	mov	r6,r8
 2007f78:	20034940 	call	2003494 <__divdf3>
 2007f7c:	180b883a 	mov	r5,r3
 2007f80:	b00d883a 	mov	r6,r22
 2007f84:	b80f883a 	mov	r7,r23
 2007f88:	1009883a 	mov	r4,r2
 2007f8c:	200c8f00 	call	200c8f0 <__subdf3>
 2007f90:	a80b883a 	mov	r5,r21
 2007f94:	a009883a 	mov	r4,r20
 2007f98:	d8c01915 	stw	r3,100(sp)
 2007f9c:	d8801815 	stw	r2,96(sp)
 2007fa0:	200cc8c0 	call	200cc8c <__fixdfsi>
 2007fa4:	1009883a 	mov	r4,r2
 2007fa8:	1027883a 	mov	r19,r2
 2007fac:	20036ec0 	call	20036ec <__floatsidf>
 2007fb0:	a80b883a 	mov	r5,r21
 2007fb4:	a009883a 	mov	r4,r20
 2007fb8:	180f883a 	mov	r7,r3
 2007fbc:	100d883a 	mov	r6,r2
 2007fc0:	200c8f00 	call	200c8f0 <__subdf3>
 2007fc4:	d9801817 	ldw	r6,96(sp)
 2007fc8:	1823883a 	mov	r17,r3
 2007fcc:	d8801415 	stw	r2,80(sp)
 2007fd0:	302d883a 	mov	r22,r6
 2007fd4:	d9800517 	ldw	r6,20(sp)
 2007fd8:	9cc00c04 	addi	r19,r19,48
 2007fdc:	dc401515 	stw	r17,84(sp)
 2007fe0:	d8c01917 	ldw	r3,100(sp)
 2007fe4:	34c00005 	stb	r19,0(r6)
 2007fe8:	d8800517 	ldw	r2,20(sp)
 2007fec:	d9401917 	ldw	r5,100(sp)
 2007ff0:	d9801417 	ldw	r6,80(sp)
 2007ff4:	b009883a 	mov	r4,r22
 2007ff8:	880f883a 	mov	r7,r17
 2007ffc:	182f883a 	mov	r23,r3
 2008000:	17000044 	addi	fp,r2,1
 2008004:	200caf40 	call	200caf4 <__gtdf2>
 2008008:	00804e16 	blt	zero,r2,2008144 <_dtoa_r+0x1158>
 200800c:	d9801417 	ldw	r6,80(sp)
 2008010:	0005883a 	mov	r2,zero
 2008014:	00cffc34 	movhi	r3,16368
 2008018:	180b883a 	mov	r5,r3
 200801c:	880f883a 	mov	r7,r17
 2008020:	1009883a 	mov	r4,r2
 2008024:	200c8f00 	call	200c8f0 <__subdf3>
 2008028:	d9401917 	ldw	r5,100(sp)
 200802c:	180f883a 	mov	r7,r3
 2008030:	b009883a 	mov	r4,r22
 2008034:	100d883a 	mov	r6,r2
 2008038:	200caf40 	call	200caf4 <__gtdf2>
 200803c:	00bda216 	blt	zero,r2,20076c8 <_dtoa_r+0x6dc>
 2008040:	d8c00317 	ldw	r3,12(sp)
 2008044:	00800044 	movi	r2,1
 2008048:	10c01216 	blt	r2,r3,2008094 <_dtoa_r+0x10a8>
 200804c:	003d4506 	br	2007564 <_dtoa_r+0x578>
 2008050:	d9801417 	ldw	r6,80(sp)
 2008054:	0005883a 	mov	r2,zero
 2008058:	00cffc34 	movhi	r3,16368
 200805c:	180b883a 	mov	r5,r3
 2008060:	880f883a 	mov	r7,r17
 2008064:	1009883a 	mov	r4,r2
 2008068:	200c8f00 	call	200c8f0 <__subdf3>
 200806c:	d9c01b17 	ldw	r7,108(sp)
 2008070:	180b883a 	mov	r5,r3
 2008074:	1009883a 	mov	r4,r2
 2008078:	b00d883a 	mov	r6,r22
 200807c:	200cc040 	call	200cc04 <__ltdf2>
 2008080:	103d9116 	blt	r2,zero,20076c8 <_dtoa_r+0x6dc>
 2008084:	d9800517 	ldw	r6,20(sp)
 2008088:	d9000317 	ldw	r4,12(sp)
 200808c:	3105883a 	add	r2,r6,r4
 2008090:	e0bd3426 	beq	fp,r2,2007564 <_dtoa_r+0x578>
 2008094:	04500934 	movhi	r17,16420
 2008098:	0021883a 	mov	r16,zero
 200809c:	b80b883a 	mov	r5,r23
 20080a0:	b009883a 	mov	r4,r22
 20080a4:	800d883a 	mov	r6,r16
 20080a8:	880f883a 	mov	r7,r17
 20080ac:	20030d00 	call	20030d0 <__muldf3>
 20080b0:	d9401517 	ldw	r5,84(sp)
 20080b4:	d9001417 	ldw	r4,80(sp)
 20080b8:	880f883a 	mov	r7,r17
 20080bc:	000d883a 	mov	r6,zero
 20080c0:	d8801a15 	stw	r2,104(sp)
 20080c4:	d8c01b15 	stw	r3,108(sp)
 20080c8:	20030d00 	call	20030d0 <__muldf3>
 20080cc:	180b883a 	mov	r5,r3
 20080d0:	1009883a 	mov	r4,r2
 20080d4:	1823883a 	mov	r17,r3
 20080d8:	1021883a 	mov	r16,r2
 20080dc:	200cc8c0 	call	200cc8c <__fixdfsi>
 20080e0:	1009883a 	mov	r4,r2
 20080e4:	102b883a 	mov	r21,r2
 20080e8:	20036ec0 	call	20036ec <__floatsidf>
 20080ec:	880b883a 	mov	r5,r17
 20080f0:	8009883a 	mov	r4,r16
 20080f4:	180f883a 	mov	r7,r3
 20080f8:	100d883a 	mov	r6,r2
 20080fc:	200c8f00 	call	200c8f0 <__subdf3>
 2008100:	1021883a 	mov	r16,r2
 2008104:	d9001b17 	ldw	r4,108(sp)
 2008108:	1823883a 	mov	r17,r3
 200810c:	dc001415 	stw	r16,80(sp)
 2008110:	ad400c04 	addi	r21,r21,48
 2008114:	dc401515 	stw	r17,84(sp)
 2008118:	d8801a17 	ldw	r2,104(sp)
 200811c:	e5400005 	stb	r21,0(fp)
 2008120:	202f883a 	mov	r23,r4
 2008124:	d9c01b17 	ldw	r7,108(sp)
 2008128:	d9001417 	ldw	r4,80(sp)
 200812c:	880b883a 	mov	r5,r17
 2008130:	100d883a 	mov	r6,r2
 2008134:	102d883a 	mov	r22,r2
 2008138:	e7000044 	addi	fp,fp,1
 200813c:	200cc040 	call	200cc04 <__ltdf2>
 2008140:	103fc30e 	bge	r2,zero,2008050 <_dtoa_r+0x1064>
 2008144:	d9000417 	ldw	r4,16(sp)
 2008148:	d9000d15 	stw	r4,52(sp)
 200814c:	003d7106 	br	2007714 <_dtoa_r+0x728>
 2008150:	d9801717 	ldw	r6,92(sp)
 2008154:	00800084 	movi	r2,2
 2008158:	11bde60e 	bge	r2,r6,20078f4 <_dtoa_r+0x908>
 200815c:	203cfb1e 	bne	r4,zero,200754c <_dtoa_r+0x560>
 2008160:	d9001617 	ldw	r4,88(sp)
 2008164:	900b883a 	mov	r5,r18
 2008168:	01800144 	movi	r6,5
 200816c:	000f883a 	mov	r7,zero
 2008170:	200a7940 	call	200a794 <__multadd>
 2008174:	d9000717 	ldw	r4,28(sp)
 2008178:	100b883a 	mov	r5,r2
 200817c:	1025883a 	mov	r18,r2
 2008180:	2009bd00 	call	2009bd0 <__mcmp>
 2008184:	00bcf10e 	bge	zero,r2,200754c <_dtoa_r+0x560>
 2008188:	d8c00d17 	ldw	r3,52(sp)
 200818c:	d9000517 	ldw	r4,20(sp)
 2008190:	d8000615 	stw	zero,24(sp)
 2008194:	18c00044 	addi	r3,r3,1
 2008198:	d8c00d15 	stw	r3,52(sp)
 200819c:	00800c44 	movi	r2,49
 20081a0:	27000044 	addi	fp,r4,1
 20081a4:	20800005 	stb	r2,0(r4)
 20081a8:	003e8906 	br	2007bd0 <_dtoa_r+0xbe4>
 20081ac:	d8c00517 	ldw	r3,20(sp)
 20081b0:	003bc206 	br	20070bc <_dtoa_r+0xd0>
 20081b4:	01808074 	movhi	r6,513
 20081b8:	3182d204 	addi	r6,r6,2888
 20081bc:	30c00917 	ldw	r3,36(r6)
 20081c0:	30800817 	ldw	r2,32(r6)
 20081c4:	d9001217 	ldw	r4,72(sp)
 20081c8:	d9401317 	ldw	r5,76(sp)
 20081cc:	180f883a 	mov	r7,r3
 20081d0:	100d883a 	mov	r6,r2
 20081d4:	20034940 	call	2003494 <__divdf3>
 20081d8:	948003cc 	andi	r18,r18,15
 20081dc:	058000c4 	movi	r22,3
 20081e0:	1029883a 	mov	r20,r2
 20081e4:	182b883a 	mov	r21,r3
 20081e8:	003c8906 	br	2007410 <_dtoa_r+0x424>
 20081ec:	d9001017 	ldw	r4,64(sp)
 20081f0:	d9800917 	ldw	r6,36(sp)
 20081f4:	0025883a 	mov	r18,zero
 20081f8:	1105c83a 	sub	r2,r2,r4
 20081fc:	2089883a 	add	r4,r4,r2
 2008200:	308d883a 	add	r6,r6,r2
 2008204:	d9001015 	stw	r4,64(sp)
 2008208:	d9800915 	stw	r6,36(sp)
 200820c:	003e3206 	br	2007ad8 <_dtoa_r+0xaec>
 2008210:	28800044 	addi	r2,r5,1
 2008214:	27000044 	addi	fp,r4,1
 2008218:	20800005 	stb	r2,0(r4)
 200821c:	003e6c06 	br	2007bd0 <_dtoa_r+0xbe4>
 2008220:	d8800f17 	ldw	r2,60(sp)
 2008224:	00bce016 	blt	zero,r2,20075a8 <_dtoa_r+0x5bc>
 2008228:	d9800f17 	ldw	r6,60(sp)
 200822c:	303cc51e 	bne	r6,zero,2007544 <_dtoa_r+0x558>
 2008230:	0005883a 	mov	r2,zero
 2008234:	00d00534 	movhi	r3,16404
 2008238:	980b883a 	mov	r5,r19
 200823c:	180f883a 	mov	r7,r3
 2008240:	9009883a 	mov	r4,r18
 2008244:	100d883a 	mov	r6,r2
 2008248:	20030d00 	call	20030d0 <__muldf3>
 200824c:	180b883a 	mov	r5,r3
 2008250:	a80f883a 	mov	r7,r21
 2008254:	1009883a 	mov	r4,r2
 2008258:	a00d883a 	mov	r6,r20
 200825c:	200cb7c0 	call	200cb7c <__gedf2>
 2008260:	103cb80e 	bge	r2,zero,2007544 <_dtoa_r+0x558>
 2008264:	0027883a 	mov	r19,zero
 2008268:	0025883a 	mov	r18,zero
 200826c:	003fc606 	br	2008188 <_dtoa_r+0x119c>
 2008270:	99400117 	ldw	r5,4(r19)
 2008274:	d9001617 	ldw	r4,88(sp)
 2008278:	2009ff40 	call	2009ff4 <_Balloc>
 200827c:	99800417 	ldw	r6,16(r19)
 2008280:	11000304 	addi	r4,r2,12
 2008284:	99400304 	addi	r5,r19,12
 2008288:	318d883a 	add	r6,r6,r6
 200828c:	318d883a 	add	r6,r6,r6
 2008290:	31800204 	addi	r6,r6,8
 2008294:	1023883a 	mov	r17,r2
 2008298:	200985c0 	call	200985c <memcpy>
 200829c:	d9001617 	ldw	r4,88(sp)
 20082a0:	880b883a 	mov	r5,r17
 20082a4:	01800044 	movi	r6,1
 20082a8:	200a3b80 	call	200a3b8 <__lshift>
 20082ac:	100b883a 	mov	r5,r2
 20082b0:	003d9c06 	br	2007924 <_dtoa_r+0x938>
 20082b4:	00800e44 	movi	r2,57
 20082b8:	b8807026 	beq	r23,r2,200847c <_dtoa_r+0x1490>
 20082bc:	b8800044 	addi	r2,r23,1
 20082c0:	b7000044 	addi	fp,r22,1
 20082c4:	b0800005 	stb	r2,0(r22)
 20082c8:	003e4106 	br	2007bd0 <_dtoa_r+0xbe4>
 20082cc:	d8800317 	ldw	r2,12(sp)
 20082d0:	01808074 	movhi	r6,513
 20082d4:	3182a004 	addi	r6,r6,2688
 20082d8:	b009883a 	mov	r4,r22
 20082dc:	100e90fa 	slli	r7,r2,3
 20082e0:	b80b883a 	mov	r5,r23
 20082e4:	398f883a 	add	r7,r7,r6
 20082e8:	38bffe17 	ldw	r2,-8(r7)
 20082ec:	d9800517 	ldw	r6,20(sp)
 20082f0:	38ffff17 	ldw	r3,-4(r7)
 20082f4:	37000044 	addi	fp,r6,1
 20082f8:	180f883a 	mov	r7,r3
 20082fc:	100d883a 	mov	r6,r2
 2008300:	20030d00 	call	20030d0 <__muldf3>
 2008304:	a80b883a 	mov	r5,r21
 2008308:	a009883a 	mov	r4,r20
 200830c:	182f883a 	mov	r23,r3
 2008310:	102d883a 	mov	r22,r2
 2008314:	200cc8c0 	call	200cc8c <__fixdfsi>
 2008318:	1009883a 	mov	r4,r2
 200831c:	1027883a 	mov	r19,r2
 2008320:	20036ec0 	call	20036ec <__floatsidf>
 2008324:	a80b883a 	mov	r5,r21
 2008328:	a009883a 	mov	r4,r20
 200832c:	180f883a 	mov	r7,r3
 2008330:	100d883a 	mov	r6,r2
 2008334:	200c8f00 	call	200c8f0 <__subdf3>
 2008338:	180b883a 	mov	r5,r3
 200833c:	d8c00517 	ldw	r3,20(sp)
 2008340:	9cc00c04 	addi	r19,r19,48
 2008344:	1009883a 	mov	r4,r2
 2008348:	1cc00005 	stb	r19,0(r3)
 200834c:	2021883a 	mov	r16,r4
 2008350:	d9000317 	ldw	r4,12(sp)
 2008354:	00800044 	movi	r2,1
 2008358:	2823883a 	mov	r17,r5
 200835c:	20802226 	beq	r4,r2,20083e8 <_dtoa_r+0x13fc>
 2008360:	1029883a 	mov	r20,r2
 2008364:	0005883a 	mov	r2,zero
 2008368:	00d00934 	movhi	r3,16420
 200836c:	180f883a 	mov	r7,r3
 2008370:	100d883a 	mov	r6,r2
 2008374:	880b883a 	mov	r5,r17
 2008378:	8009883a 	mov	r4,r16
 200837c:	20030d00 	call	20030d0 <__muldf3>
 2008380:	180b883a 	mov	r5,r3
 2008384:	1009883a 	mov	r4,r2
 2008388:	1823883a 	mov	r17,r3
 200838c:	1021883a 	mov	r16,r2
 2008390:	200cc8c0 	call	200cc8c <__fixdfsi>
 2008394:	1009883a 	mov	r4,r2
 2008398:	102b883a 	mov	r21,r2
 200839c:	20036ec0 	call	20036ec <__floatsidf>
 20083a0:	880b883a 	mov	r5,r17
 20083a4:	8009883a 	mov	r4,r16
 20083a8:	180f883a 	mov	r7,r3
 20083ac:	100d883a 	mov	r6,r2
 20083b0:	200c8f00 	call	200c8f0 <__subdf3>
 20083b4:	180b883a 	mov	r5,r3
 20083b8:	d8c00517 	ldw	r3,20(sp)
 20083bc:	1009883a 	mov	r4,r2
 20083c0:	ad400c04 	addi	r21,r21,48
 20083c4:	1d05883a 	add	r2,r3,r20
 20083c8:	15400005 	stb	r21,0(r2)
 20083cc:	2021883a 	mov	r16,r4
 20083d0:	d9000317 	ldw	r4,12(sp)
 20083d4:	a5000044 	addi	r20,r20,1
 20083d8:	2823883a 	mov	r17,r5
 20083dc:	a13fe11e 	bne	r20,r4,2008364 <_dtoa_r+0x1378>
 20083e0:	e505883a 	add	r2,fp,r20
 20083e4:	173fffc4 	addi	fp,r2,-1
 20083e8:	0025883a 	mov	r18,zero
 20083ec:	04cff834 	movhi	r19,16352
 20083f0:	b009883a 	mov	r4,r22
 20083f4:	b80b883a 	mov	r5,r23
 20083f8:	900d883a 	mov	r6,r18
 20083fc:	980f883a 	mov	r7,r19
 2008400:	200c9700 	call	200c970 <__adddf3>
 2008404:	180b883a 	mov	r5,r3
 2008408:	1009883a 	mov	r4,r2
 200840c:	800d883a 	mov	r6,r16
 2008410:	880f883a 	mov	r7,r17
 2008414:	200cc040 	call	200cc04 <__ltdf2>
 2008418:	103cab16 	blt	r2,zero,20076c8 <_dtoa_r+0x6dc>
 200841c:	0009883a 	mov	r4,zero
 2008420:	980b883a 	mov	r5,r19
 2008424:	b80f883a 	mov	r7,r23
 2008428:	b00d883a 	mov	r6,r22
 200842c:	200c8f00 	call	200c8f0 <__subdf3>
 2008430:	180b883a 	mov	r5,r3
 2008434:	880f883a 	mov	r7,r17
 2008438:	1009883a 	mov	r4,r2
 200843c:	800d883a 	mov	r6,r16
 2008440:	200caf40 	call	200caf4 <__gtdf2>
 2008444:	00bc470e 	bge	zero,r2,2007564 <_dtoa_r+0x578>
 2008448:	00c00c04 	movi	r3,48
 200844c:	e73fffc4 	addi	fp,fp,-1
 2008450:	e0800007 	ldb	r2,0(fp)
 2008454:	10fffd26 	beq	r2,r3,200844c <_dtoa_r+0x1460>
 2008458:	d9800417 	ldw	r6,16(sp)
 200845c:	e7000044 	addi	fp,fp,1
 2008460:	d9800d15 	stw	r6,52(sp)
 2008464:	003cab06 	br	2007714 <_dtoa_r+0x728>
 2008468:	d8c00f17 	ldw	r3,60(sp)
 200846c:	d9001117 	ldw	r4,68(sp)
 2008470:	20e1c83a 	sub	r16,r4,r3
 2008474:	0007883a 	mov	r3,zero
 2008478:	003d9b06 	br	2007ae8 <_dtoa_r+0xafc>
 200847c:	00800e44 	movi	r2,57
 2008480:	b0800005 	stb	r2,0(r22)
 2008484:	b5800044 	addi	r22,r22,1
 2008488:	003dc106 	br	2007b90 <_dtoa_r+0xba4>
 200848c:	05800084 	movi	r22,2
 2008490:	003bf706 	br	2007470 <_dtoa_r+0x484>
 2008494:	d9000f17 	ldw	r4,60(sp)
 2008498:	013c000e 	bge	zero,r4,200749c <_dtoa_r+0x4b0>
 200849c:	d9800e17 	ldw	r6,56(sp)
 20084a0:	01bc300e 	bge	zero,r6,2007564 <_dtoa_r+0x578>
 20084a4:	0005883a 	mov	r2,zero
 20084a8:	00d00934 	movhi	r3,16420
 20084ac:	a80b883a 	mov	r5,r21
 20084b0:	180f883a 	mov	r7,r3
 20084b4:	a009883a 	mov	r4,r20
 20084b8:	100d883a 	mov	r6,r2
 20084bc:	20030d00 	call	20030d0 <__muldf3>
 20084c0:	b1000044 	addi	r4,r22,1
 20084c4:	1021883a 	mov	r16,r2
 20084c8:	1823883a 	mov	r17,r3
 20084cc:	20036ec0 	call	20036ec <__floatsidf>
 20084d0:	880b883a 	mov	r5,r17
 20084d4:	8009883a 	mov	r4,r16
 20084d8:	180f883a 	mov	r7,r3
 20084dc:	100d883a 	mov	r6,r2
 20084e0:	20030d00 	call	20030d0 <__muldf3>
 20084e4:	0011883a 	mov	r8,zero
 20084e8:	02500734 	movhi	r9,16412
 20084ec:	180b883a 	mov	r5,r3
 20084f0:	480f883a 	mov	r7,r9
 20084f4:	1009883a 	mov	r4,r2
 20084f8:	400d883a 	mov	r6,r8
 20084fc:	200c9700 	call	200c970 <__adddf3>
 2008500:	102d883a 	mov	r22,r2
 2008504:	00bf3034 	movhi	r2,64704
 2008508:	10ef883a 	add	r23,r2,r3
 200850c:	d8800d17 	ldw	r2,52(sp)
 2008510:	d8c00e17 	ldw	r3,56(sp)
 2008514:	8029883a 	mov	r20,r16
 2008518:	10bfffc4 	addi	r2,r2,-1
 200851c:	882b883a 	mov	r21,r17
 2008520:	d8800415 	stw	r2,16(sp)
 2008524:	d8c00315 	stw	r3,12(sp)
 2008528:	003e8306 	br	2007f38 <_dtoa_r+0xf4c>
 200852c:	d8800117 	ldw	r2,4(sp)
 2008530:	dc001117 	ldw	r16,68(sp)
 2008534:	dc801017 	ldw	r18,64(sp)
 2008538:	00c00d84 	movi	r3,54
 200853c:	1887c83a 	sub	r3,r3,r2
 2008540:	003d6906 	br	2007ae8 <_dtoa_r+0xafc>
 2008544:	01800044 	movi	r6,1
 2008548:	3021883a 	mov	r16,r6
 200854c:	d9800f15 	stw	r6,60(sp)
 2008550:	d9802615 	stw	r6,152(sp)
 2008554:	d9800e15 	stw	r6,56(sp)
 2008558:	003b9306 	br	20073a8 <_dtoa_r+0x3bc>
 200855c:	b021883a 	mov	r16,r22
 2008560:	dd800f15 	stw	r22,60(sp)
 2008564:	003b9006 	br	20073a8 <_dtoa_r+0x3bc>
 2008568:	103e221e 	bne	r2,zero,2007df4 <_dtoa_r+0xe08>
 200856c:	b880004c 	andi	r2,r23,1
 2008570:	1005003a 	cmpeq	r2,r2,zero
 2008574:	103e1f1e 	bne	r2,zero,2007df4 <_dtoa_r+0xe08>
 2008578:	003e1b06 	br	2007de8 <_dtoa_r+0xdfc>
 200857c:	d9001617 	ldw	r4,88(sp)
 2008580:	980b883a 	mov	r5,r19
 2008584:	01800284 	movi	r6,10
 2008588:	000f883a 	mov	r7,zero
 200858c:	200a7940 	call	200a794 <__multadd>
 2008590:	d8c00e17 	ldw	r3,56(sp)
 2008594:	1027883a 	mov	r19,r2
 2008598:	d8c00f15 	stw	r3,60(sp)
 200859c:	003cd306 	br	20078ec <_dtoa_r+0x900>

020085a0 <_fflush_r>:
 20085a0:	defffb04 	addi	sp,sp,-20
 20085a4:	dcc00315 	stw	r19,12(sp)
 20085a8:	dc800215 	stw	r18,8(sp)
 20085ac:	dfc00415 	stw	ra,16(sp)
 20085b0:	dc400115 	stw	r17,4(sp)
 20085b4:	dc000015 	stw	r16,0(sp)
 20085b8:	2027883a 	mov	r19,r4
 20085bc:	2825883a 	mov	r18,r5
 20085c0:	20000226 	beq	r4,zero,20085cc <_fflush_r+0x2c>
 20085c4:	20800e17 	ldw	r2,56(r4)
 20085c8:	10005626 	beq	r2,zero,2008724 <_fflush_r+0x184>
 20085cc:	9100030b 	ldhu	r4,12(r18)
 20085d0:	20ffffcc 	andi	r3,r4,65535
 20085d4:	18e0001c 	xori	r3,r3,32768
 20085d8:	18e00004 	addi	r3,r3,-32768
 20085dc:	1880020c 	andi	r2,r3,8
 20085e0:	1000261e 	bne	r2,zero,200867c <_fflush_r+0xdc>
 20085e4:	90c00117 	ldw	r3,4(r18)
 20085e8:	20820014 	ori	r2,r4,2048
 20085ec:	9080030d 	sth	r2,12(r18)
 20085f0:	1009883a 	mov	r4,r2
 20085f4:	00c0400e 	bge	zero,r3,20086f8 <_fflush_r+0x158>
 20085f8:	92000a17 	ldw	r8,40(r18)
 20085fc:	40004026 	beq	r8,zero,2008700 <_fflush_r+0x160>
 2008600:	2084000c 	andi	r2,r4,4096
 2008604:	10005326 	beq	r2,zero,2008754 <_fflush_r+0x1b4>
 2008608:	94001417 	ldw	r16,80(r18)
 200860c:	9080030b 	ldhu	r2,12(r18)
 2008610:	1080010c 	andi	r2,r2,4
 2008614:	1000481e 	bne	r2,zero,2008738 <_fflush_r+0x198>
 2008618:	91400717 	ldw	r5,28(r18)
 200861c:	9809883a 	mov	r4,r19
 2008620:	800d883a 	mov	r6,r16
 2008624:	000f883a 	mov	r7,zero
 2008628:	403ee83a 	callr	r8
 200862c:	8080261e 	bne	r16,r2,20086c8 <_fflush_r+0x128>
 2008630:	9080030b 	ldhu	r2,12(r18)
 2008634:	91000417 	ldw	r4,16(r18)
 2008638:	90000115 	stw	zero,4(r18)
 200863c:	10bdffcc 	andi	r2,r2,63487
 2008640:	10ffffcc 	andi	r3,r2,65535
 2008644:	18c4000c 	andi	r3,r3,4096
 2008648:	9080030d 	sth	r2,12(r18)
 200864c:	91000015 	stw	r4,0(r18)
 2008650:	18002b26 	beq	r3,zero,2008700 <_fflush_r+0x160>
 2008654:	0007883a 	mov	r3,zero
 2008658:	1805883a 	mov	r2,r3
 200865c:	94001415 	stw	r16,80(r18)
 2008660:	dfc00417 	ldw	ra,16(sp)
 2008664:	dcc00317 	ldw	r19,12(sp)
 2008668:	dc800217 	ldw	r18,8(sp)
 200866c:	dc400117 	ldw	r17,4(sp)
 2008670:	dc000017 	ldw	r16,0(sp)
 2008674:	dec00504 	addi	sp,sp,20
 2008678:	f800283a 	ret
 200867c:	94400417 	ldw	r17,16(r18)
 2008680:	88001f26 	beq	r17,zero,2008700 <_fflush_r+0x160>
 2008684:	90800017 	ldw	r2,0(r18)
 2008688:	18c000cc 	andi	r3,r3,3
 200868c:	94400015 	stw	r17,0(r18)
 2008690:	1461c83a 	sub	r16,r2,r17
 2008694:	18002526 	beq	r3,zero,200872c <_fflush_r+0x18c>
 2008698:	0005883a 	mov	r2,zero
 200869c:	90800215 	stw	r2,8(r18)
 20086a0:	0400170e 	bge	zero,r16,2008700 <_fflush_r+0x160>
 20086a4:	90c00917 	ldw	r3,36(r18)
 20086a8:	91400717 	ldw	r5,28(r18)
 20086ac:	880d883a 	mov	r6,r17
 20086b0:	800f883a 	mov	r7,r16
 20086b4:	9809883a 	mov	r4,r19
 20086b8:	183ee83a 	callr	r3
 20086bc:	88a3883a 	add	r17,r17,r2
 20086c0:	80a1c83a 	sub	r16,r16,r2
 20086c4:	00bff616 	blt	zero,r2,20086a0 <_fflush_r+0x100>
 20086c8:	9080030b 	ldhu	r2,12(r18)
 20086cc:	00ffffc4 	movi	r3,-1
 20086d0:	10801014 	ori	r2,r2,64
 20086d4:	9080030d 	sth	r2,12(r18)
 20086d8:	1805883a 	mov	r2,r3
 20086dc:	dfc00417 	ldw	ra,16(sp)
 20086e0:	dcc00317 	ldw	r19,12(sp)
 20086e4:	dc800217 	ldw	r18,8(sp)
 20086e8:	dc400117 	ldw	r17,4(sp)
 20086ec:	dc000017 	ldw	r16,0(sp)
 20086f0:	dec00504 	addi	sp,sp,20
 20086f4:	f800283a 	ret
 20086f8:	90800f17 	ldw	r2,60(r18)
 20086fc:	00bfbe16 	blt	zero,r2,20085f8 <_fflush_r+0x58>
 2008700:	0007883a 	mov	r3,zero
 2008704:	1805883a 	mov	r2,r3
 2008708:	dfc00417 	ldw	ra,16(sp)
 200870c:	dcc00317 	ldw	r19,12(sp)
 2008710:	dc800217 	ldw	r18,8(sp)
 2008714:	dc400117 	ldw	r17,4(sp)
 2008718:	dc000017 	ldw	r16,0(sp)
 200871c:	dec00504 	addi	sp,sp,20
 2008720:	f800283a 	ret
 2008724:	20088380 	call	2008838 <__sinit>
 2008728:	003fa806 	br	20085cc <_fflush_r+0x2c>
 200872c:	90800517 	ldw	r2,20(r18)
 2008730:	90800215 	stw	r2,8(r18)
 2008734:	003fda06 	br	20086a0 <_fflush_r+0x100>
 2008738:	90800117 	ldw	r2,4(r18)
 200873c:	90c00c17 	ldw	r3,48(r18)
 2008740:	80a1c83a 	sub	r16,r16,r2
 2008744:	183fb426 	beq	r3,zero,2008618 <_fflush_r+0x78>
 2008748:	90800f17 	ldw	r2,60(r18)
 200874c:	80a1c83a 	sub	r16,r16,r2
 2008750:	003fb106 	br	2008618 <_fflush_r+0x78>
 2008754:	91400717 	ldw	r5,28(r18)
 2008758:	9809883a 	mov	r4,r19
 200875c:	000d883a 	mov	r6,zero
 2008760:	01c00044 	movi	r7,1
 2008764:	403ee83a 	callr	r8
 2008768:	1021883a 	mov	r16,r2
 200876c:	00bfffc4 	movi	r2,-1
 2008770:	80800226 	beq	r16,r2,200877c <_fflush_r+0x1dc>
 2008774:	92000a17 	ldw	r8,40(r18)
 2008778:	003fa406 	br	200860c <_fflush_r+0x6c>
 200877c:	98c00017 	ldw	r3,0(r19)
 2008780:	00800744 	movi	r2,29
 2008784:	18bfde26 	beq	r3,r2,2008700 <_fflush_r+0x160>
 2008788:	9080030b 	ldhu	r2,12(r18)
 200878c:	8007883a 	mov	r3,r16
 2008790:	10801014 	ori	r2,r2,64
 2008794:	9080030d 	sth	r2,12(r18)
 2008798:	003fcf06 	br	20086d8 <_fflush_r+0x138>

0200879c <fflush>:
 200879c:	01408074 	movhi	r5,513
 20087a0:	29616804 	addi	r5,r5,-31328
 20087a4:	2007883a 	mov	r3,r4
 20087a8:	20000526 	beq	r4,zero,20087c0 <fflush+0x24>
 20087ac:	00808074 	movhi	r2,513
 20087b0:	1085b404 	addi	r2,r2,5840
 20087b4:	11000017 	ldw	r4,0(r2)
 20087b8:	180b883a 	mov	r5,r3
 20087bc:	20085a01 	jmpi	20085a0 <_fflush_r>
 20087c0:	00808074 	movhi	r2,513
 20087c4:	1085b504 	addi	r2,r2,5844
 20087c8:	11000017 	ldw	r4,0(r2)
 20087cc:	20093a01 	jmpi	20093a0 <_fwalk_reent>

020087d0 <std>:
 20087d0:	00808074 	movhi	r2,513
 20087d4:	10ac5904 	addi	r2,r2,-20124
 20087d8:	20800b15 	stw	r2,44(r4)
 20087dc:	00808074 	movhi	r2,513
 20087e0:	10ac9404 	addi	r2,r2,-19888
 20087e4:	20800815 	stw	r2,32(r4)
 20087e8:	00c08074 	movhi	r3,513
 20087ec:	18ec7504 	addi	r3,r3,-20012
 20087f0:	00808074 	movhi	r2,513
 20087f4:	10ac5b04 	addi	r2,r2,-20116
 20087f8:	2140030d 	sth	r5,12(r4)
 20087fc:	2180038d 	sth	r6,14(r4)
 2008800:	20c00915 	stw	r3,36(r4)
 2008804:	20800a15 	stw	r2,40(r4)
 2008808:	20000015 	stw	zero,0(r4)
 200880c:	20000115 	stw	zero,4(r4)
 2008810:	20000215 	stw	zero,8(r4)
 2008814:	20000415 	stw	zero,16(r4)
 2008818:	20000515 	stw	zero,20(r4)
 200881c:	20000615 	stw	zero,24(r4)
 2008820:	21000715 	stw	r4,28(r4)
 2008824:	f800283a 	ret

02008828 <__sfp_lock_acquire>:
 2008828:	f800283a 	ret

0200882c <__sfp_lock_release>:
 200882c:	f800283a 	ret

02008830 <__sinit_lock_acquire>:
 2008830:	f800283a 	ret

02008834 <__sinit_lock_release>:
 2008834:	f800283a 	ret

02008838 <__sinit>:
 2008838:	20800e17 	ldw	r2,56(r4)
 200883c:	defffd04 	addi	sp,sp,-12
 2008840:	dc400115 	stw	r17,4(sp)
 2008844:	dc000015 	stw	r16,0(sp)
 2008848:	dfc00215 	stw	ra,8(sp)
 200884c:	04400044 	movi	r17,1
 2008850:	01400104 	movi	r5,4
 2008854:	000d883a 	mov	r6,zero
 2008858:	2021883a 	mov	r16,r4
 200885c:	2200bb04 	addi	r8,r4,748
 2008860:	200f883a 	mov	r7,r4
 2008864:	10000526 	beq	r2,zero,200887c <__sinit+0x44>
 2008868:	dfc00217 	ldw	ra,8(sp)
 200886c:	dc400117 	ldw	r17,4(sp)
 2008870:	dc000017 	ldw	r16,0(sp)
 2008874:	dec00304 	addi	sp,sp,12
 2008878:	f800283a 	ret
 200887c:	21000117 	ldw	r4,4(r4)
 2008880:	00808074 	movhi	r2,513
 2008884:	10a24704 	addi	r2,r2,-30436
 2008888:	00c000c4 	movi	r3,3
 200888c:	80800f15 	stw	r2,60(r16)
 2008890:	80c0b915 	stw	r3,740(r16)
 2008894:	8200ba15 	stw	r8,744(r16)
 2008898:	84400e15 	stw	r17,56(r16)
 200889c:	8000b815 	stw	zero,736(r16)
 20088a0:	20087d00 	call	20087d0 <std>
 20088a4:	81000217 	ldw	r4,8(r16)
 20088a8:	880d883a 	mov	r6,r17
 20088ac:	800f883a 	mov	r7,r16
 20088b0:	01400284 	movi	r5,10
 20088b4:	20087d00 	call	20087d0 <std>
 20088b8:	81000317 	ldw	r4,12(r16)
 20088bc:	800f883a 	mov	r7,r16
 20088c0:	01400484 	movi	r5,18
 20088c4:	01800084 	movi	r6,2
 20088c8:	dfc00217 	ldw	ra,8(sp)
 20088cc:	dc400117 	ldw	r17,4(sp)
 20088d0:	dc000017 	ldw	r16,0(sp)
 20088d4:	dec00304 	addi	sp,sp,12
 20088d8:	20087d01 	jmpi	20087d0 <std>

020088dc <__fp_lock>:
 20088dc:	0005883a 	mov	r2,zero
 20088e0:	f800283a 	ret

020088e4 <__fp_unlock>:
 20088e4:	0005883a 	mov	r2,zero
 20088e8:	f800283a 	ret

020088ec <__fp_unlock_all>:
 20088ec:	00808074 	movhi	r2,513
 20088f0:	1085b404 	addi	r2,r2,5840
 20088f4:	11000017 	ldw	r4,0(r2)
 20088f8:	01408074 	movhi	r5,513
 20088fc:	29623904 	addi	r5,r5,-30492
 2008900:	20094681 	jmpi	2009468 <_fwalk>

02008904 <__fp_lock_all>:
 2008904:	00808074 	movhi	r2,513
 2008908:	1085b404 	addi	r2,r2,5840
 200890c:	11000017 	ldw	r4,0(r2)
 2008910:	01408074 	movhi	r5,513
 2008914:	29623704 	addi	r5,r5,-30500
 2008918:	20094681 	jmpi	2009468 <_fwalk>

0200891c <_cleanup_r>:
 200891c:	01408074 	movhi	r5,513
 2008920:	296d8b04 	addi	r5,r5,-18900
 2008924:	20094681 	jmpi	2009468 <_fwalk>

02008928 <_cleanup>:
 2008928:	00808074 	movhi	r2,513
 200892c:	1085b504 	addi	r2,r2,5844
 2008930:	11000017 	ldw	r4,0(r2)
 2008934:	200891c1 	jmpi	200891c <_cleanup_r>

02008938 <__sfmoreglue>:
 2008938:	defffc04 	addi	sp,sp,-16
 200893c:	dc000015 	stw	r16,0(sp)
 2008940:	2821883a 	mov	r16,r5
 2008944:	dc400115 	stw	r17,4(sp)
 2008948:	01401704 	movi	r5,92
 200894c:	2023883a 	mov	r17,r4
 2008950:	8009883a 	mov	r4,r16
 2008954:	dfc00315 	stw	ra,12(sp)
 2008958:	dcc00215 	stw	r19,8(sp)
 200895c:	2003b380 	call	2003b38 <__mulsi3>
 2008960:	11400304 	addi	r5,r2,12
 2008964:	8809883a 	mov	r4,r17
 2008968:	1027883a 	mov	r19,r2
 200896c:	20043dc0 	call	20043dc <_malloc_r>
 2008970:	10c00304 	addi	r3,r2,12
 2008974:	1023883a 	mov	r17,r2
 2008978:	1809883a 	mov	r4,r3
 200897c:	980d883a 	mov	r6,r19
 2008980:	000b883a 	mov	r5,zero
 2008984:	10000b26 	beq	r2,zero,20089b4 <__sfmoreglue+0x7c>
 2008988:	14000115 	stw	r16,4(r2)
 200898c:	10c00215 	stw	r3,8(r2)
 2008990:	10000015 	stw	zero,0(r2)
 2008994:	20099dc0 	call	20099dc <memset>
 2008998:	8805883a 	mov	r2,r17
 200899c:	dfc00317 	ldw	ra,12(sp)
 20089a0:	dcc00217 	ldw	r19,8(sp)
 20089a4:	dc400117 	ldw	r17,4(sp)
 20089a8:	dc000017 	ldw	r16,0(sp)
 20089ac:	dec00404 	addi	sp,sp,16
 20089b0:	f800283a 	ret
 20089b4:	0023883a 	mov	r17,zero
 20089b8:	8805883a 	mov	r2,r17
 20089bc:	dfc00317 	ldw	ra,12(sp)
 20089c0:	dcc00217 	ldw	r19,8(sp)
 20089c4:	dc400117 	ldw	r17,4(sp)
 20089c8:	dc000017 	ldw	r16,0(sp)
 20089cc:	dec00404 	addi	sp,sp,16
 20089d0:	f800283a 	ret

020089d4 <__sfp>:
 20089d4:	defffd04 	addi	sp,sp,-12
 20089d8:	00808074 	movhi	r2,513
 20089dc:	1085b504 	addi	r2,r2,5844
 20089e0:	dc000015 	stw	r16,0(sp)
 20089e4:	14000017 	ldw	r16,0(r2)
 20089e8:	dc400115 	stw	r17,4(sp)
 20089ec:	dfc00215 	stw	ra,8(sp)
 20089f0:	80800e17 	ldw	r2,56(r16)
 20089f4:	2023883a 	mov	r17,r4
 20089f8:	10002626 	beq	r2,zero,2008a94 <__sfp+0xc0>
 20089fc:	8400b804 	addi	r16,r16,736
 2008a00:	80800117 	ldw	r2,4(r16)
 2008a04:	81000217 	ldw	r4,8(r16)
 2008a08:	10ffffc4 	addi	r3,r2,-1
 2008a0c:	18000916 	blt	r3,zero,2008a34 <__sfp+0x60>
 2008a10:	2080030f 	ldh	r2,12(r4)
 2008a14:	10000b26 	beq	r2,zero,2008a44 <__sfp+0x70>
 2008a18:	017fffc4 	movi	r5,-1
 2008a1c:	00000206 	br	2008a28 <__sfp+0x54>
 2008a20:	2080030f 	ldh	r2,12(r4)
 2008a24:	10000726 	beq	r2,zero,2008a44 <__sfp+0x70>
 2008a28:	18ffffc4 	addi	r3,r3,-1
 2008a2c:	21001704 	addi	r4,r4,92
 2008a30:	197ffb1e 	bne	r3,r5,2008a20 <__sfp+0x4c>
 2008a34:	80800017 	ldw	r2,0(r16)
 2008a38:	10001926 	beq	r2,zero,2008aa0 <__sfp+0xcc>
 2008a3c:	1021883a 	mov	r16,r2
 2008a40:	003fef06 	br	2008a00 <__sfp+0x2c>
 2008a44:	00bfffc4 	movi	r2,-1
 2008a48:	00c00044 	movi	r3,1
 2008a4c:	2080038d 	sth	r2,14(r4)
 2008a50:	20c0030d 	sth	r3,12(r4)
 2008a54:	20000015 	stw	zero,0(r4)
 2008a58:	20000215 	stw	zero,8(r4)
 2008a5c:	20000115 	stw	zero,4(r4)
 2008a60:	20000415 	stw	zero,16(r4)
 2008a64:	20000515 	stw	zero,20(r4)
 2008a68:	20000615 	stw	zero,24(r4)
 2008a6c:	20000c15 	stw	zero,48(r4)
 2008a70:	20000d15 	stw	zero,52(r4)
 2008a74:	20001115 	stw	zero,68(r4)
 2008a78:	20001215 	stw	zero,72(r4)
 2008a7c:	2005883a 	mov	r2,r4
 2008a80:	dfc00217 	ldw	ra,8(sp)
 2008a84:	dc400117 	ldw	r17,4(sp)
 2008a88:	dc000017 	ldw	r16,0(sp)
 2008a8c:	dec00304 	addi	sp,sp,12
 2008a90:	f800283a 	ret
 2008a94:	8009883a 	mov	r4,r16
 2008a98:	20088380 	call	2008838 <__sinit>
 2008a9c:	003fd706 	br	20089fc <__sfp+0x28>
 2008aa0:	8809883a 	mov	r4,r17
 2008aa4:	01400104 	movi	r5,4
 2008aa8:	20089380 	call	2008938 <__sfmoreglue>
 2008aac:	80800015 	stw	r2,0(r16)
 2008ab0:	103fe21e 	bne	r2,zero,2008a3c <__sfp+0x68>
 2008ab4:	00800304 	movi	r2,12
 2008ab8:	0009883a 	mov	r4,zero
 2008abc:	88800015 	stw	r2,0(r17)
 2008ac0:	003fee06 	br	2008a7c <__sfp+0xa8>

02008ac4 <_malloc_trim_r>:
 2008ac4:	defffb04 	addi	sp,sp,-20
 2008ac8:	dcc00315 	stw	r19,12(sp)
 2008acc:	04c08074 	movhi	r19,513
 2008ad0:	9cc2fa04 	addi	r19,r19,3048
 2008ad4:	dc800215 	stw	r18,8(sp)
 2008ad8:	dc400115 	stw	r17,4(sp)
 2008adc:	dc000015 	stw	r16,0(sp)
 2008ae0:	2823883a 	mov	r17,r5
 2008ae4:	2025883a 	mov	r18,r4
 2008ae8:	dfc00415 	stw	ra,16(sp)
 2008aec:	200d5d00 	call	200d5d0 <__malloc_lock>
 2008af0:	98800217 	ldw	r2,8(r19)
 2008af4:	9009883a 	mov	r4,r18
 2008af8:	000b883a 	mov	r5,zero
 2008afc:	10c00117 	ldw	r3,4(r2)
 2008b00:	00bfff04 	movi	r2,-4
 2008b04:	18a0703a 	and	r16,r3,r2
 2008b08:	8463c83a 	sub	r17,r16,r17
 2008b0c:	8c43fbc4 	addi	r17,r17,4079
 2008b10:	8822d33a 	srli	r17,r17,12
 2008b14:	0083ffc4 	movi	r2,4095
 2008b18:	8c7fffc4 	addi	r17,r17,-1
 2008b1c:	8822933a 	slli	r17,r17,12
 2008b20:	1440060e 	bge	r2,r17,2008b3c <_malloc_trim_r+0x78>
 2008b24:	2004c480 	call	2004c48 <_sbrk_r>
 2008b28:	98c00217 	ldw	r3,8(r19)
 2008b2c:	9009883a 	mov	r4,r18
 2008b30:	044bc83a 	sub	r5,zero,r17
 2008b34:	80c7883a 	add	r3,r16,r3
 2008b38:	10c00926 	beq	r2,r3,2008b60 <_malloc_trim_r+0x9c>
 2008b3c:	200d5f00 	call	200d5f0 <__malloc_unlock>
 2008b40:	0005883a 	mov	r2,zero
 2008b44:	dfc00417 	ldw	ra,16(sp)
 2008b48:	dcc00317 	ldw	r19,12(sp)
 2008b4c:	dc800217 	ldw	r18,8(sp)
 2008b50:	dc400117 	ldw	r17,4(sp)
 2008b54:	dc000017 	ldw	r16,0(sp)
 2008b58:	dec00504 	addi	sp,sp,20
 2008b5c:	f800283a 	ret
 2008b60:	9009883a 	mov	r4,r18
 2008b64:	2004c480 	call	2004c48 <_sbrk_r>
 2008b68:	844dc83a 	sub	r6,r16,r17
 2008b6c:	00ffffc4 	movi	r3,-1
 2008b70:	9009883a 	mov	r4,r18
 2008b74:	000b883a 	mov	r5,zero
 2008b78:	01c08074 	movhi	r7,513
 2008b7c:	39c8a104 	addi	r7,r7,8836
 2008b80:	31800054 	ori	r6,r6,1
 2008b84:	10c00926 	beq	r2,r3,2008bac <_malloc_trim_r+0xe8>
 2008b88:	38800017 	ldw	r2,0(r7)
 2008b8c:	98c00217 	ldw	r3,8(r19)
 2008b90:	9009883a 	mov	r4,r18
 2008b94:	1445c83a 	sub	r2,r2,r17
 2008b98:	38800015 	stw	r2,0(r7)
 2008b9c:	19800115 	stw	r6,4(r3)
 2008ba0:	200d5f00 	call	200d5f0 <__malloc_unlock>
 2008ba4:	00800044 	movi	r2,1
 2008ba8:	003fe606 	br	2008b44 <_malloc_trim_r+0x80>
 2008bac:	2004c480 	call	2004c48 <_sbrk_r>
 2008bb0:	99800217 	ldw	r6,8(r19)
 2008bb4:	100f883a 	mov	r7,r2
 2008bb8:	9009883a 	mov	r4,r18
 2008bbc:	1187c83a 	sub	r3,r2,r6
 2008bc0:	008003c4 	movi	r2,15
 2008bc4:	19400054 	ori	r5,r3,1
 2008bc8:	10ffdc0e 	bge	r2,r3,2008b3c <_malloc_trim_r+0x78>
 2008bcc:	00808074 	movhi	r2,513
 2008bd0:	1085b304 	addi	r2,r2,5836
 2008bd4:	10c00017 	ldw	r3,0(r2)
 2008bd8:	00808074 	movhi	r2,513
 2008bdc:	1088a104 	addi	r2,r2,8836
 2008be0:	31400115 	stw	r5,4(r6)
 2008be4:	38c7c83a 	sub	r3,r7,r3
 2008be8:	10c00015 	stw	r3,0(r2)
 2008bec:	003fd306 	br	2008b3c <_malloc_trim_r+0x78>

02008bf0 <_free_r>:
 2008bf0:	defffd04 	addi	sp,sp,-12
 2008bf4:	dc400115 	stw	r17,4(sp)
 2008bf8:	dc000015 	stw	r16,0(sp)
 2008bfc:	dfc00215 	stw	ra,8(sp)
 2008c00:	2821883a 	mov	r16,r5
 2008c04:	2023883a 	mov	r17,r4
 2008c08:	28005a26 	beq	r5,zero,2008d74 <_free_r+0x184>
 2008c0c:	200d5d00 	call	200d5d0 <__malloc_lock>
 2008c10:	823ffe04 	addi	r8,r16,-8
 2008c14:	41400117 	ldw	r5,4(r8)
 2008c18:	00bfff84 	movi	r2,-2
 2008c1c:	02808074 	movhi	r10,513
 2008c20:	5282fa04 	addi	r10,r10,3048
 2008c24:	288e703a 	and	r7,r5,r2
 2008c28:	41cd883a 	add	r6,r8,r7
 2008c2c:	30c00117 	ldw	r3,4(r6)
 2008c30:	51000217 	ldw	r4,8(r10)
 2008c34:	00bfff04 	movi	r2,-4
 2008c38:	1892703a 	and	r9,r3,r2
 2008c3c:	5017883a 	mov	r11,r10
 2008c40:	31006726 	beq	r6,r4,2008de0 <_free_r+0x1f0>
 2008c44:	2880004c 	andi	r2,r5,1
 2008c48:	1005003a 	cmpeq	r2,r2,zero
 2008c4c:	32400115 	stw	r9,4(r6)
 2008c50:	10001a1e 	bne	r2,zero,2008cbc <_free_r+0xcc>
 2008c54:	000b883a 	mov	r5,zero
 2008c58:	3247883a 	add	r3,r6,r9
 2008c5c:	18800117 	ldw	r2,4(r3)
 2008c60:	1080004c 	andi	r2,r2,1
 2008c64:	1000231e 	bne	r2,zero,2008cf4 <_free_r+0x104>
 2008c68:	280ac03a 	cmpne	r5,r5,zero
 2008c6c:	3a4f883a 	add	r7,r7,r9
 2008c70:	2800451e 	bne	r5,zero,2008d88 <_free_r+0x198>
 2008c74:	31000217 	ldw	r4,8(r6)
 2008c78:	00808074 	movhi	r2,513
 2008c7c:	1082fc04 	addi	r2,r2,3056
 2008c80:	20807b26 	beq	r4,r2,2008e70 <_free_r+0x280>
 2008c84:	30800317 	ldw	r2,12(r6)
 2008c88:	3a07883a 	add	r3,r7,r8
 2008c8c:	19c00015 	stw	r7,0(r3)
 2008c90:	11000215 	stw	r4,8(r2)
 2008c94:	20800315 	stw	r2,12(r4)
 2008c98:	38800054 	ori	r2,r7,1
 2008c9c:	40800115 	stw	r2,4(r8)
 2008ca0:	28001a26 	beq	r5,zero,2008d0c <_free_r+0x11c>
 2008ca4:	8809883a 	mov	r4,r17
 2008ca8:	dfc00217 	ldw	ra,8(sp)
 2008cac:	dc400117 	ldw	r17,4(sp)
 2008cb0:	dc000017 	ldw	r16,0(sp)
 2008cb4:	dec00304 	addi	sp,sp,12
 2008cb8:	200d5f01 	jmpi	200d5f0 <__malloc_unlock>
 2008cbc:	80bffe17 	ldw	r2,-8(r16)
 2008cc0:	50c00204 	addi	r3,r10,8
 2008cc4:	4091c83a 	sub	r8,r8,r2
 2008cc8:	41000217 	ldw	r4,8(r8)
 2008ccc:	388f883a 	add	r7,r7,r2
 2008cd0:	20c06126 	beq	r4,r3,2008e58 <_free_r+0x268>
 2008cd4:	40800317 	ldw	r2,12(r8)
 2008cd8:	3247883a 	add	r3,r6,r9
 2008cdc:	000b883a 	mov	r5,zero
 2008ce0:	11000215 	stw	r4,8(r2)
 2008ce4:	20800315 	stw	r2,12(r4)
 2008ce8:	18800117 	ldw	r2,4(r3)
 2008cec:	1080004c 	andi	r2,r2,1
 2008cf0:	103fdd26 	beq	r2,zero,2008c68 <_free_r+0x78>
 2008cf4:	38800054 	ori	r2,r7,1
 2008cf8:	3a07883a 	add	r3,r7,r8
 2008cfc:	280ac03a 	cmpne	r5,r5,zero
 2008d00:	40800115 	stw	r2,4(r8)
 2008d04:	19c00015 	stw	r7,0(r3)
 2008d08:	283fe61e 	bne	r5,zero,2008ca4 <_free_r+0xb4>
 2008d0c:	00807fc4 	movi	r2,511
 2008d10:	11c01f2e 	bgeu	r2,r7,2008d90 <_free_r+0x1a0>
 2008d14:	3806d27a 	srli	r3,r7,9
 2008d18:	1800481e 	bne	r3,zero,2008e3c <_free_r+0x24c>
 2008d1c:	3804d0fa 	srli	r2,r7,3
 2008d20:	100690fa 	slli	r3,r2,3
 2008d24:	1acd883a 	add	r6,r3,r11
 2008d28:	31400217 	ldw	r5,8(r6)
 2008d2c:	31405926 	beq	r6,r5,2008e94 <_free_r+0x2a4>
 2008d30:	28800117 	ldw	r2,4(r5)
 2008d34:	00ffff04 	movi	r3,-4
 2008d38:	10c4703a 	and	r2,r2,r3
 2008d3c:	3880022e 	bgeu	r7,r2,2008d48 <_free_r+0x158>
 2008d40:	29400217 	ldw	r5,8(r5)
 2008d44:	317ffa1e 	bne	r6,r5,2008d30 <_free_r+0x140>
 2008d48:	29800317 	ldw	r6,12(r5)
 2008d4c:	41800315 	stw	r6,12(r8)
 2008d50:	41400215 	stw	r5,8(r8)
 2008d54:	8809883a 	mov	r4,r17
 2008d58:	2a000315 	stw	r8,12(r5)
 2008d5c:	32000215 	stw	r8,8(r6)
 2008d60:	dfc00217 	ldw	ra,8(sp)
 2008d64:	dc400117 	ldw	r17,4(sp)
 2008d68:	dc000017 	ldw	r16,0(sp)
 2008d6c:	dec00304 	addi	sp,sp,12
 2008d70:	200d5f01 	jmpi	200d5f0 <__malloc_unlock>
 2008d74:	dfc00217 	ldw	ra,8(sp)
 2008d78:	dc400117 	ldw	r17,4(sp)
 2008d7c:	dc000017 	ldw	r16,0(sp)
 2008d80:	dec00304 	addi	sp,sp,12
 2008d84:	f800283a 	ret
 2008d88:	31000217 	ldw	r4,8(r6)
 2008d8c:	003fbd06 	br	2008c84 <_free_r+0x94>
 2008d90:	3806d0fa 	srli	r3,r7,3
 2008d94:	00800044 	movi	r2,1
 2008d98:	51400117 	ldw	r5,4(r10)
 2008d9c:	180890fa 	slli	r4,r3,3
 2008da0:	1807d0ba 	srai	r3,r3,2
 2008da4:	22c9883a 	add	r4,r4,r11
 2008da8:	21800217 	ldw	r6,8(r4)
 2008dac:	10c4983a 	sll	r2,r2,r3
 2008db0:	41000315 	stw	r4,12(r8)
 2008db4:	41800215 	stw	r6,8(r8)
 2008db8:	288ab03a 	or	r5,r5,r2
 2008dbc:	22000215 	stw	r8,8(r4)
 2008dc0:	8809883a 	mov	r4,r17
 2008dc4:	51400115 	stw	r5,4(r10)
 2008dc8:	32000315 	stw	r8,12(r6)
 2008dcc:	dfc00217 	ldw	ra,8(sp)
 2008dd0:	dc400117 	ldw	r17,4(sp)
 2008dd4:	dc000017 	ldw	r16,0(sp)
 2008dd8:	dec00304 	addi	sp,sp,12
 2008ddc:	200d5f01 	jmpi	200d5f0 <__malloc_unlock>
 2008de0:	2880004c 	andi	r2,r5,1
 2008de4:	3a4d883a 	add	r6,r7,r9
 2008de8:	1000071e 	bne	r2,zero,2008e08 <_free_r+0x218>
 2008dec:	80bffe17 	ldw	r2,-8(r16)
 2008df0:	4091c83a 	sub	r8,r8,r2
 2008df4:	41000317 	ldw	r4,12(r8)
 2008df8:	40c00217 	ldw	r3,8(r8)
 2008dfc:	308d883a 	add	r6,r6,r2
 2008e00:	20c00215 	stw	r3,8(r4)
 2008e04:	19000315 	stw	r4,12(r3)
 2008e08:	00808074 	movhi	r2,513
 2008e0c:	1085b204 	addi	r2,r2,5832
 2008e10:	11000017 	ldw	r4,0(r2)
 2008e14:	30c00054 	ori	r3,r6,1
 2008e18:	52000215 	stw	r8,8(r10)
 2008e1c:	40c00115 	stw	r3,4(r8)
 2008e20:	313fa036 	bltu	r6,r4,2008ca4 <_free_r+0xb4>
 2008e24:	00808074 	movhi	r2,513
 2008e28:	10889404 	addi	r2,r2,8784
 2008e2c:	11400017 	ldw	r5,0(r2)
 2008e30:	8809883a 	mov	r4,r17
 2008e34:	2008ac40 	call	2008ac4 <_malloc_trim_r>
 2008e38:	003f9a06 	br	2008ca4 <_free_r+0xb4>
 2008e3c:	00800104 	movi	r2,4
 2008e40:	10c0072e 	bgeu	r2,r3,2008e60 <_free_r+0x270>
 2008e44:	00800504 	movi	r2,20
 2008e48:	10c01936 	bltu	r2,r3,2008eb0 <_free_r+0x2c0>
 2008e4c:	188016c4 	addi	r2,r3,91
 2008e50:	100690fa 	slli	r3,r2,3
 2008e54:	003fb306 	br	2008d24 <_free_r+0x134>
 2008e58:	01400044 	movi	r5,1
 2008e5c:	003f7e06 	br	2008c58 <_free_r+0x68>
 2008e60:	3804d1ba 	srli	r2,r7,6
 2008e64:	10800e04 	addi	r2,r2,56
 2008e68:	100690fa 	slli	r3,r2,3
 2008e6c:	003fad06 	br	2008d24 <_free_r+0x134>
 2008e70:	22000315 	stw	r8,12(r4)
 2008e74:	22000215 	stw	r8,8(r4)
 2008e78:	3a05883a 	add	r2,r7,r8
 2008e7c:	38c00054 	ori	r3,r7,1
 2008e80:	11c00015 	stw	r7,0(r2)
 2008e84:	41000215 	stw	r4,8(r8)
 2008e88:	40c00115 	stw	r3,4(r8)
 2008e8c:	41000315 	stw	r4,12(r8)
 2008e90:	003f8406 	br	2008ca4 <_free_r+0xb4>
 2008e94:	1005d0ba 	srai	r2,r2,2
 2008e98:	00c00044 	movi	r3,1
 2008e9c:	51000117 	ldw	r4,4(r10)
 2008ea0:	1886983a 	sll	r3,r3,r2
 2008ea4:	20c8b03a 	or	r4,r4,r3
 2008ea8:	51000115 	stw	r4,4(r10)
 2008eac:	003fa706 	br	2008d4c <_free_r+0x15c>
 2008eb0:	00801504 	movi	r2,84
 2008eb4:	10c00436 	bltu	r2,r3,2008ec8 <_free_r+0x2d8>
 2008eb8:	3804d33a 	srli	r2,r7,12
 2008ebc:	10801b84 	addi	r2,r2,110
 2008ec0:	100690fa 	slli	r3,r2,3
 2008ec4:	003f9706 	br	2008d24 <_free_r+0x134>
 2008ec8:	00805504 	movi	r2,340
 2008ecc:	10c00436 	bltu	r2,r3,2008ee0 <_free_r+0x2f0>
 2008ed0:	3804d3fa 	srli	r2,r7,15
 2008ed4:	10801dc4 	addi	r2,r2,119
 2008ed8:	100690fa 	slli	r3,r2,3
 2008edc:	003f9106 	br	2008d24 <_free_r+0x134>
 2008ee0:	00815504 	movi	r2,1364
 2008ee4:	10c0032e 	bgeu	r2,r3,2008ef4 <_free_r+0x304>
 2008ee8:	00801f84 	movi	r2,126
 2008eec:	00c0fc04 	movi	r3,1008
 2008ef0:	003f8c06 	br	2008d24 <_free_r+0x134>
 2008ef4:	3804d4ba 	srli	r2,r7,18
 2008ef8:	10801f04 	addi	r2,r2,124
 2008efc:	100690fa 	slli	r3,r2,3
 2008f00:	003f8806 	br	2008d24 <_free_r+0x134>

02008f04 <__sfvwrite_r>:
 2008f04:	30800217 	ldw	r2,8(r6)
 2008f08:	defff504 	addi	sp,sp,-44
 2008f0c:	df000915 	stw	fp,36(sp)
 2008f10:	dd800715 	stw	r22,28(sp)
 2008f14:	dc800315 	stw	r18,12(sp)
 2008f18:	dfc00a15 	stw	ra,40(sp)
 2008f1c:	ddc00815 	stw	r23,32(sp)
 2008f20:	dd400615 	stw	r21,24(sp)
 2008f24:	dd000515 	stw	r20,20(sp)
 2008f28:	dcc00415 	stw	r19,16(sp)
 2008f2c:	dc400215 	stw	r17,8(sp)
 2008f30:	dc000115 	stw	r16,4(sp)
 2008f34:	302d883a 	mov	r22,r6
 2008f38:	2039883a 	mov	fp,r4
 2008f3c:	2825883a 	mov	r18,r5
 2008f40:	10001c26 	beq	r2,zero,2008fb4 <__sfvwrite_r+0xb0>
 2008f44:	29c0030b 	ldhu	r7,12(r5)
 2008f48:	3880020c 	andi	r2,r7,8
 2008f4c:	10002726 	beq	r2,zero,2008fec <__sfvwrite_r+0xe8>
 2008f50:	28800417 	ldw	r2,16(r5)
 2008f54:	10002526 	beq	r2,zero,2008fec <__sfvwrite_r+0xe8>
 2008f58:	3880008c 	andi	r2,r7,2
 2008f5c:	b5400017 	ldw	r21,0(r22)
 2008f60:	10002826 	beq	r2,zero,2009004 <__sfvwrite_r+0x100>
 2008f64:	0021883a 	mov	r16,zero
 2008f68:	0023883a 	mov	r17,zero
 2008f6c:	880d883a 	mov	r6,r17
 2008f70:	e009883a 	mov	r4,fp
 2008f74:	00810004 	movi	r2,1024
 2008f78:	80006e26 	beq	r16,zero,2009134 <__sfvwrite_r+0x230>
 2008f7c:	800f883a 	mov	r7,r16
 2008f80:	91400717 	ldw	r5,28(r18)
 2008f84:	1400012e 	bgeu	r2,r16,2008f8c <__sfvwrite_r+0x88>
 2008f88:	100f883a 	mov	r7,r2
 2008f8c:	90c00917 	ldw	r3,36(r18)
 2008f90:	183ee83a 	callr	r3
 2008f94:	1007883a 	mov	r3,r2
 2008f98:	80a1c83a 	sub	r16,r16,r2
 2008f9c:	88a3883a 	add	r17,r17,r2
 2008fa0:	00806d0e 	bge	zero,r2,2009158 <__sfvwrite_r+0x254>
 2008fa4:	b0800217 	ldw	r2,8(r22)
 2008fa8:	10c5c83a 	sub	r2,r2,r3
 2008fac:	b0800215 	stw	r2,8(r22)
 2008fb0:	103fee1e 	bne	r2,zero,2008f6c <__sfvwrite_r+0x68>
 2008fb4:	0009883a 	mov	r4,zero
 2008fb8:	2005883a 	mov	r2,r4
 2008fbc:	dfc00a17 	ldw	ra,40(sp)
 2008fc0:	df000917 	ldw	fp,36(sp)
 2008fc4:	ddc00817 	ldw	r23,32(sp)
 2008fc8:	dd800717 	ldw	r22,28(sp)
 2008fcc:	dd400617 	ldw	r21,24(sp)
 2008fd0:	dd000517 	ldw	r20,20(sp)
 2008fd4:	dcc00417 	ldw	r19,16(sp)
 2008fd8:	dc800317 	ldw	r18,12(sp)
 2008fdc:	dc400217 	ldw	r17,8(sp)
 2008fe0:	dc000117 	ldw	r16,4(sp)
 2008fe4:	dec00b04 	addi	sp,sp,44
 2008fe8:	f800283a 	ret
 2008fec:	2006c6c0 	call	2006c6c <__swsetup_r>
 2008ff0:	1000e41e 	bne	r2,zero,2009384 <__sfvwrite_r+0x480>
 2008ff4:	91c0030b 	ldhu	r7,12(r18)
 2008ff8:	b5400017 	ldw	r21,0(r22)
 2008ffc:	3880008c 	andi	r2,r7,2
 2009000:	103fd81e 	bne	r2,zero,2008f64 <__sfvwrite_r+0x60>
 2009004:	3880004c 	andi	r2,r7,1
 2009008:	1005003a 	cmpeq	r2,r2,zero
 200900c:	10005726 	beq	r2,zero,200916c <__sfvwrite_r+0x268>
 2009010:	0029883a 	mov	r20,zero
 2009014:	002f883a 	mov	r23,zero
 2009018:	a0004226 	beq	r20,zero,2009124 <__sfvwrite_r+0x220>
 200901c:	3880800c 	andi	r2,r7,512
 2009020:	94000217 	ldw	r16,8(r18)
 2009024:	10008b26 	beq	r2,zero,2009254 <__sfvwrite_r+0x350>
 2009028:	800d883a 	mov	r6,r16
 200902c:	a400a536 	bltu	r20,r16,20092c4 <__sfvwrite_r+0x3c0>
 2009030:	3881200c 	andi	r2,r7,1152
 2009034:	10002726 	beq	r2,zero,20090d4 <__sfvwrite_r+0x1d0>
 2009038:	90800517 	ldw	r2,20(r18)
 200903c:	92000417 	ldw	r8,16(r18)
 2009040:	91400017 	ldw	r5,0(r18)
 2009044:	1087883a 	add	r3,r2,r2
 2009048:	1887883a 	add	r3,r3,r2
 200904c:	1808d7fa 	srli	r4,r3,31
 2009050:	2a21c83a 	sub	r16,r5,r8
 2009054:	80800044 	addi	r2,r16,1
 2009058:	20c9883a 	add	r4,r4,r3
 200905c:	2027d07a 	srai	r19,r4,1
 2009060:	a085883a 	add	r2,r20,r2
 2009064:	980d883a 	mov	r6,r19
 2009068:	9880022e 	bgeu	r19,r2,2009074 <__sfvwrite_r+0x170>
 200906c:	1027883a 	mov	r19,r2
 2009070:	100d883a 	mov	r6,r2
 2009074:	3881000c 	andi	r2,r7,1024
 2009078:	1000b826 	beq	r2,zero,200935c <__sfvwrite_r+0x458>
 200907c:	300b883a 	mov	r5,r6
 2009080:	e009883a 	mov	r4,fp
 2009084:	20043dc0 	call	20043dc <_malloc_r>
 2009088:	10003126 	beq	r2,zero,2009150 <__sfvwrite_r+0x24c>
 200908c:	91400417 	ldw	r5,16(r18)
 2009090:	1009883a 	mov	r4,r2
 2009094:	800d883a 	mov	r6,r16
 2009098:	1023883a 	mov	r17,r2
 200909c:	200985c0 	call	200985c <memcpy>
 20090a0:	90c0030b 	ldhu	r3,12(r18)
 20090a4:	00beffc4 	movi	r2,-1025
 20090a8:	1886703a 	and	r3,r3,r2
 20090ac:	18c02014 	ori	r3,r3,128
 20090b0:	90c0030d 	sth	r3,12(r18)
 20090b4:	9c07c83a 	sub	r3,r19,r16
 20090b8:	8c05883a 	add	r2,r17,r16
 20090bc:	a00d883a 	mov	r6,r20
 20090c0:	a021883a 	mov	r16,r20
 20090c4:	90800015 	stw	r2,0(r18)
 20090c8:	90c00215 	stw	r3,8(r18)
 20090cc:	94400415 	stw	r17,16(r18)
 20090d0:	94c00515 	stw	r19,20(r18)
 20090d4:	91000017 	ldw	r4,0(r18)
 20090d8:	b80b883a 	mov	r5,r23
 20090dc:	a023883a 	mov	r17,r20
 20090e0:	20098fc0 	call	20098fc <memmove>
 20090e4:	90c00217 	ldw	r3,8(r18)
 20090e8:	90800017 	ldw	r2,0(r18)
 20090ec:	a027883a 	mov	r19,r20
 20090f0:	1c07c83a 	sub	r3,r3,r16
 20090f4:	1405883a 	add	r2,r2,r16
 20090f8:	90c00215 	stw	r3,8(r18)
 20090fc:	a021883a 	mov	r16,r20
 2009100:	90800015 	stw	r2,0(r18)
 2009104:	b0800217 	ldw	r2,8(r22)
 2009108:	1405c83a 	sub	r2,r2,r16
 200910c:	b0800215 	stw	r2,8(r22)
 2009110:	103fa826 	beq	r2,zero,2008fb4 <__sfvwrite_r+0xb0>
 2009114:	a469c83a 	sub	r20,r20,r17
 2009118:	91c0030b 	ldhu	r7,12(r18)
 200911c:	bcef883a 	add	r23,r23,r19
 2009120:	a03fbe1e 	bne	r20,zero,200901c <__sfvwrite_r+0x118>
 2009124:	adc00017 	ldw	r23,0(r21)
 2009128:	ad000117 	ldw	r20,4(r21)
 200912c:	ad400204 	addi	r21,r21,8
 2009130:	003fb906 	br	2009018 <__sfvwrite_r+0x114>
 2009134:	ac400017 	ldw	r17,0(r21)
 2009138:	ac000117 	ldw	r16,4(r21)
 200913c:	ad400204 	addi	r21,r21,8
 2009140:	003f8a06 	br	2008f6c <__sfvwrite_r+0x68>
 2009144:	91400417 	ldw	r5,16(r18)
 2009148:	e009883a 	mov	r4,fp
 200914c:	2008bf00 	call	2008bf0 <_free_r>
 2009150:	00800304 	movi	r2,12
 2009154:	e0800015 	stw	r2,0(fp)
 2009158:	9080030b 	ldhu	r2,12(r18)
 200915c:	013fffc4 	movi	r4,-1
 2009160:	10801014 	ori	r2,r2,64
 2009164:	9080030d 	sth	r2,12(r18)
 2009168:	003f9306 	br	2008fb8 <__sfvwrite_r+0xb4>
 200916c:	0027883a 	mov	r19,zero
 2009170:	002f883a 	mov	r23,zero
 2009174:	d8000015 	stw	zero,0(sp)
 2009178:	0029883a 	mov	r20,zero
 200917c:	98001e26 	beq	r19,zero,20091f8 <__sfvwrite_r+0x2f4>
 2009180:	d8c00017 	ldw	r3,0(sp)
 2009184:	1804c03a 	cmpne	r2,r3,zero
 2009188:	10005e26 	beq	r2,zero,2009304 <__sfvwrite_r+0x400>
 200918c:	9821883a 	mov	r16,r19
 2009190:	a4c0012e 	bgeu	r20,r19,2009198 <__sfvwrite_r+0x294>
 2009194:	a021883a 	mov	r16,r20
 2009198:	91000017 	ldw	r4,0(r18)
 200919c:	90800417 	ldw	r2,16(r18)
 20091a0:	91800217 	ldw	r6,8(r18)
 20091a4:	91c00517 	ldw	r7,20(r18)
 20091a8:	1100022e 	bgeu	r2,r4,20091b4 <__sfvwrite_r+0x2b0>
 20091ac:	31e3883a 	add	r17,r6,r7
 20091b0:	8c001616 	blt	r17,r16,200920c <__sfvwrite_r+0x308>
 20091b4:	81c03816 	blt	r16,r7,2009298 <__sfvwrite_r+0x394>
 20091b8:	90c00917 	ldw	r3,36(r18)
 20091bc:	91400717 	ldw	r5,28(r18)
 20091c0:	e009883a 	mov	r4,fp
 20091c4:	b80d883a 	mov	r6,r23
 20091c8:	183ee83a 	callr	r3
 20091cc:	1023883a 	mov	r17,r2
 20091d0:	00bfe10e 	bge	zero,r2,2009158 <__sfvwrite_r+0x254>
 20091d4:	a469c83a 	sub	r20,r20,r17
 20091d8:	a0001826 	beq	r20,zero,200923c <__sfvwrite_r+0x338>
 20091dc:	b0800217 	ldw	r2,8(r22)
 20091e0:	1445c83a 	sub	r2,r2,r17
 20091e4:	b0800215 	stw	r2,8(r22)
 20091e8:	103f7226 	beq	r2,zero,2008fb4 <__sfvwrite_r+0xb0>
 20091ec:	9c67c83a 	sub	r19,r19,r17
 20091f0:	bc6f883a 	add	r23,r23,r17
 20091f4:	983fe21e 	bne	r19,zero,2009180 <__sfvwrite_r+0x27c>
 20091f8:	adc00017 	ldw	r23,0(r21)
 20091fc:	acc00117 	ldw	r19,4(r21)
 2009200:	ad400204 	addi	r21,r21,8
 2009204:	d8000015 	stw	zero,0(sp)
 2009208:	003fdc06 	br	200917c <__sfvwrite_r+0x278>
 200920c:	b80b883a 	mov	r5,r23
 2009210:	880d883a 	mov	r6,r17
 2009214:	20098fc0 	call	20098fc <memmove>
 2009218:	90c00017 	ldw	r3,0(r18)
 200921c:	e009883a 	mov	r4,fp
 2009220:	900b883a 	mov	r5,r18
 2009224:	1c47883a 	add	r3,r3,r17
 2009228:	90c00015 	stw	r3,0(r18)
 200922c:	20085a00 	call	20085a0 <_fflush_r>
 2009230:	103fc91e 	bne	r2,zero,2009158 <__sfvwrite_r+0x254>
 2009234:	a469c83a 	sub	r20,r20,r17
 2009238:	a03fe81e 	bne	r20,zero,20091dc <__sfvwrite_r+0x2d8>
 200923c:	e009883a 	mov	r4,fp
 2009240:	900b883a 	mov	r5,r18
 2009244:	20085a00 	call	20085a0 <_fflush_r>
 2009248:	103fc31e 	bne	r2,zero,2009158 <__sfvwrite_r+0x254>
 200924c:	d8000015 	stw	zero,0(sp)
 2009250:	003fe206 	br	20091dc <__sfvwrite_r+0x2d8>
 2009254:	91000017 	ldw	r4,0(r18)
 2009258:	90800417 	ldw	r2,16(r18)
 200925c:	1100022e 	bgeu	r2,r4,2009268 <__sfvwrite_r+0x364>
 2009260:	8023883a 	mov	r17,r16
 2009264:	85003136 	bltu	r16,r20,200932c <__sfvwrite_r+0x428>
 2009268:	91c00517 	ldw	r7,20(r18)
 200926c:	a1c01836 	bltu	r20,r7,20092d0 <__sfvwrite_r+0x3cc>
 2009270:	90c00917 	ldw	r3,36(r18)
 2009274:	91400717 	ldw	r5,28(r18)
 2009278:	e009883a 	mov	r4,fp
 200927c:	b80d883a 	mov	r6,r23
 2009280:	183ee83a 	callr	r3
 2009284:	1021883a 	mov	r16,r2
 2009288:	00bfb30e 	bge	zero,r2,2009158 <__sfvwrite_r+0x254>
 200928c:	1023883a 	mov	r17,r2
 2009290:	1027883a 	mov	r19,r2
 2009294:	003f9b06 	br	2009104 <__sfvwrite_r+0x200>
 2009298:	b80b883a 	mov	r5,r23
 200929c:	800d883a 	mov	r6,r16
 20092a0:	20098fc0 	call	20098fc <memmove>
 20092a4:	90c00217 	ldw	r3,8(r18)
 20092a8:	90800017 	ldw	r2,0(r18)
 20092ac:	8023883a 	mov	r17,r16
 20092b0:	1c07c83a 	sub	r3,r3,r16
 20092b4:	1405883a 	add	r2,r2,r16
 20092b8:	90c00215 	stw	r3,8(r18)
 20092bc:	90800015 	stw	r2,0(r18)
 20092c0:	003fc406 	br	20091d4 <__sfvwrite_r+0x2d0>
 20092c4:	a00d883a 	mov	r6,r20
 20092c8:	a021883a 	mov	r16,r20
 20092cc:	003f8106 	br	20090d4 <__sfvwrite_r+0x1d0>
 20092d0:	b80b883a 	mov	r5,r23
 20092d4:	a00d883a 	mov	r6,r20
 20092d8:	20098fc0 	call	20098fc <memmove>
 20092dc:	90c00217 	ldw	r3,8(r18)
 20092e0:	90800017 	ldw	r2,0(r18)
 20092e4:	a021883a 	mov	r16,r20
 20092e8:	1d07c83a 	sub	r3,r3,r20
 20092ec:	1505883a 	add	r2,r2,r20
 20092f0:	a023883a 	mov	r17,r20
 20092f4:	a027883a 	mov	r19,r20
 20092f8:	90c00215 	stw	r3,8(r18)
 20092fc:	90800015 	stw	r2,0(r18)
 2009300:	003f8006 	br	2009104 <__sfvwrite_r+0x200>
 2009304:	b809883a 	mov	r4,r23
 2009308:	01400284 	movi	r5,10
 200930c:	980d883a 	mov	r6,r19
 2009310:	20097780 	call	2009778 <memchr>
 2009314:	10001726 	beq	r2,zero,2009374 <__sfvwrite_r+0x470>
 2009318:	15c5c83a 	sub	r2,r2,r23
 200931c:	15000044 	addi	r20,r2,1
 2009320:	00800044 	movi	r2,1
 2009324:	d8800015 	stw	r2,0(sp)
 2009328:	003f9806 	br	200918c <__sfvwrite_r+0x288>
 200932c:	b80b883a 	mov	r5,r23
 2009330:	800d883a 	mov	r6,r16
 2009334:	20098fc0 	call	20098fc <memmove>
 2009338:	90c00017 	ldw	r3,0(r18)
 200933c:	e009883a 	mov	r4,fp
 2009340:	900b883a 	mov	r5,r18
 2009344:	1c07883a 	add	r3,r3,r16
 2009348:	90c00015 	stw	r3,0(r18)
 200934c:	8027883a 	mov	r19,r16
 2009350:	20085a00 	call	20085a0 <_fflush_r>
 2009354:	103f6b26 	beq	r2,zero,2009104 <__sfvwrite_r+0x200>
 2009358:	003f7f06 	br	2009158 <__sfvwrite_r+0x254>
 200935c:	400b883a 	mov	r5,r8
 2009360:	e009883a 	mov	r4,fp
 2009364:	200ab000 	call	200ab00 <_realloc_r>
 2009368:	103f7626 	beq	r2,zero,2009144 <__sfvwrite_r+0x240>
 200936c:	1023883a 	mov	r17,r2
 2009370:	003f5006 	br	20090b4 <__sfvwrite_r+0x1b0>
 2009374:	00c00044 	movi	r3,1
 2009378:	9d000044 	addi	r20,r19,1
 200937c:	d8c00015 	stw	r3,0(sp)
 2009380:	003f8206 	br	200918c <__sfvwrite_r+0x288>
 2009384:	9080030b 	ldhu	r2,12(r18)
 2009388:	00c00244 	movi	r3,9
 200938c:	013fffc4 	movi	r4,-1
 2009390:	10801014 	ori	r2,r2,64
 2009394:	9080030d 	sth	r2,12(r18)
 2009398:	e0c00015 	stw	r3,0(fp)
 200939c:	003f0606 	br	2008fb8 <__sfvwrite_r+0xb4>

020093a0 <_fwalk_reent>:
 20093a0:	defff704 	addi	sp,sp,-36
 20093a4:	dcc00315 	stw	r19,12(sp)
 20093a8:	24c0b804 	addi	r19,r4,736
 20093ac:	dd800615 	stw	r22,24(sp)
 20093b0:	dd400515 	stw	r21,20(sp)
 20093b4:	dfc00815 	stw	ra,32(sp)
 20093b8:	ddc00715 	stw	r23,28(sp)
 20093bc:	dd000415 	stw	r20,16(sp)
 20093c0:	dc800215 	stw	r18,8(sp)
 20093c4:	dc400115 	stw	r17,4(sp)
 20093c8:	dc000015 	stw	r16,0(sp)
 20093cc:	202b883a 	mov	r21,r4
 20093d0:	282d883a 	mov	r22,r5
 20093d4:	20088280 	call	2008828 <__sfp_lock_acquire>
 20093d8:	98002126 	beq	r19,zero,2009460 <_fwalk_reent+0xc0>
 20093dc:	002f883a 	mov	r23,zero
 20093e0:	9c800117 	ldw	r18,4(r19)
 20093e4:	9c000217 	ldw	r16,8(r19)
 20093e8:	90bfffc4 	addi	r2,r18,-1
 20093ec:	10000d16 	blt	r2,zero,2009424 <_fwalk_reent+0x84>
 20093f0:	0023883a 	mov	r17,zero
 20093f4:	053fffc4 	movi	r20,-1
 20093f8:	8080030f 	ldh	r2,12(r16)
 20093fc:	8c400044 	addi	r17,r17,1
 2009400:	10000626 	beq	r2,zero,200941c <_fwalk_reent+0x7c>
 2009404:	8080038f 	ldh	r2,14(r16)
 2009408:	800b883a 	mov	r5,r16
 200940c:	a809883a 	mov	r4,r21
 2009410:	15000226 	beq	r2,r20,200941c <_fwalk_reent+0x7c>
 2009414:	b03ee83a 	callr	r22
 2009418:	b8aeb03a 	or	r23,r23,r2
 200941c:	84001704 	addi	r16,r16,92
 2009420:	947ff51e 	bne	r18,r17,20093f8 <_fwalk_reent+0x58>
 2009424:	9cc00017 	ldw	r19,0(r19)
 2009428:	983fed1e 	bne	r19,zero,20093e0 <_fwalk_reent+0x40>
 200942c:	200882c0 	call	200882c <__sfp_lock_release>
 2009430:	b805883a 	mov	r2,r23
 2009434:	dfc00817 	ldw	ra,32(sp)
 2009438:	ddc00717 	ldw	r23,28(sp)
 200943c:	dd800617 	ldw	r22,24(sp)
 2009440:	dd400517 	ldw	r21,20(sp)
 2009444:	dd000417 	ldw	r20,16(sp)
 2009448:	dcc00317 	ldw	r19,12(sp)
 200944c:	dc800217 	ldw	r18,8(sp)
 2009450:	dc400117 	ldw	r17,4(sp)
 2009454:	dc000017 	ldw	r16,0(sp)
 2009458:	dec00904 	addi	sp,sp,36
 200945c:	f800283a 	ret
 2009460:	002f883a 	mov	r23,zero
 2009464:	003ff106 	br	200942c <_fwalk_reent+0x8c>

02009468 <_fwalk>:
 2009468:	defff804 	addi	sp,sp,-32
 200946c:	dcc00315 	stw	r19,12(sp)
 2009470:	24c0b804 	addi	r19,r4,736
 2009474:	dd400515 	stw	r21,20(sp)
 2009478:	dfc00715 	stw	ra,28(sp)
 200947c:	dd800615 	stw	r22,24(sp)
 2009480:	dd000415 	stw	r20,16(sp)
 2009484:	dc800215 	stw	r18,8(sp)
 2009488:	dc400115 	stw	r17,4(sp)
 200948c:	dc000015 	stw	r16,0(sp)
 2009490:	282b883a 	mov	r21,r5
 2009494:	20088280 	call	2008828 <__sfp_lock_acquire>
 2009498:	98001f26 	beq	r19,zero,2009518 <_fwalk+0xb0>
 200949c:	002d883a 	mov	r22,zero
 20094a0:	9c800117 	ldw	r18,4(r19)
 20094a4:	9c000217 	ldw	r16,8(r19)
 20094a8:	90bfffc4 	addi	r2,r18,-1
 20094ac:	10000c16 	blt	r2,zero,20094e0 <_fwalk+0x78>
 20094b0:	0023883a 	mov	r17,zero
 20094b4:	053fffc4 	movi	r20,-1
 20094b8:	8080030f 	ldh	r2,12(r16)
 20094bc:	8c400044 	addi	r17,r17,1
 20094c0:	10000526 	beq	r2,zero,20094d8 <_fwalk+0x70>
 20094c4:	8080038f 	ldh	r2,14(r16)
 20094c8:	8009883a 	mov	r4,r16
 20094cc:	15000226 	beq	r2,r20,20094d8 <_fwalk+0x70>
 20094d0:	a83ee83a 	callr	r21
 20094d4:	b0acb03a 	or	r22,r22,r2
 20094d8:	84001704 	addi	r16,r16,92
 20094dc:	947ff61e 	bne	r18,r17,20094b8 <_fwalk+0x50>
 20094e0:	9cc00017 	ldw	r19,0(r19)
 20094e4:	983fee1e 	bne	r19,zero,20094a0 <_fwalk+0x38>
 20094e8:	200882c0 	call	200882c <__sfp_lock_release>
 20094ec:	b005883a 	mov	r2,r22
 20094f0:	dfc00717 	ldw	ra,28(sp)
 20094f4:	dd800617 	ldw	r22,24(sp)
 20094f8:	dd400517 	ldw	r21,20(sp)
 20094fc:	dd000417 	ldw	r20,16(sp)
 2009500:	dcc00317 	ldw	r19,12(sp)
 2009504:	dc800217 	ldw	r18,8(sp)
 2009508:	dc400117 	ldw	r17,4(sp)
 200950c:	dc000017 	ldw	r16,0(sp)
 2009510:	dec00804 	addi	sp,sp,32
 2009514:	f800283a 	ret
 2009518:	002d883a 	mov	r22,zero
 200951c:	003ff206 	br	20094e8 <_fwalk+0x80>

02009520 <__locale_charset>:
 2009520:	d0a00617 	ldw	r2,-32744(gp)
 2009524:	f800283a 	ret

02009528 <_localeconv_r>:
 2009528:	00808074 	movhi	r2,513
 200952c:	10829404 	addi	r2,r2,2640
 2009530:	f800283a 	ret

02009534 <localeconv>:
 2009534:	00808074 	movhi	r2,513
 2009538:	1085b404 	addi	r2,r2,5840
 200953c:	11000017 	ldw	r4,0(r2)
 2009540:	20095281 	jmpi	2009528 <_localeconv_r>

02009544 <_setlocale_r>:
 2009544:	defffc04 	addi	sp,sp,-16
 2009548:	00c08074 	movhi	r3,513
 200954c:	18c28f04 	addi	r3,r3,2620
 2009550:	dc800215 	stw	r18,8(sp)
 2009554:	dc400115 	stw	r17,4(sp)
 2009558:	dc000015 	stw	r16,0(sp)
 200955c:	2023883a 	mov	r17,r4
 2009560:	2825883a 	mov	r18,r5
 2009564:	dfc00315 	stw	ra,12(sp)
 2009568:	3021883a 	mov	r16,r6
 200956c:	3009883a 	mov	r4,r6
 2009570:	180b883a 	mov	r5,r3
 2009574:	30000926 	beq	r6,zero,200959c <_setlocale_r+0x58>
 2009578:	200b2b00 	call	200b2b0 <strcmp>
 200957c:	8009883a 	mov	r4,r16
 2009580:	01408074 	movhi	r5,513
 2009584:	29427a04 	addi	r5,r5,2536
 2009588:	10000b1e 	bne	r2,zero,20095b8 <_setlocale_r+0x74>
 200958c:	8c000d15 	stw	r16,52(r17)
 2009590:	8c800c15 	stw	r18,48(r17)
 2009594:	00c08074 	movhi	r3,513
 2009598:	18c28f04 	addi	r3,r3,2620
 200959c:	1805883a 	mov	r2,r3
 20095a0:	dfc00317 	ldw	ra,12(sp)
 20095a4:	dc800217 	ldw	r18,8(sp)
 20095a8:	dc400117 	ldw	r17,4(sp)
 20095ac:	dc000017 	ldw	r16,0(sp)
 20095b0:	dec00404 	addi	sp,sp,16
 20095b4:	f800283a 	ret
 20095b8:	200b2b00 	call	200b2b0 <strcmp>
 20095bc:	0007883a 	mov	r3,zero
 20095c0:	103ff226 	beq	r2,zero,200958c <_setlocale_r+0x48>
 20095c4:	003ff506 	br	200959c <_setlocale_r+0x58>

020095c8 <setlocale>:
 20095c8:	01808074 	movhi	r6,513
 20095cc:	3185b404 	addi	r6,r6,5840
 20095d0:	2007883a 	mov	r3,r4
 20095d4:	31000017 	ldw	r4,0(r6)
 20095d8:	280d883a 	mov	r6,r5
 20095dc:	180b883a 	mov	r5,r3
 20095e0:	20095441 	jmpi	2009544 <_setlocale_r>

020095e4 <__smakebuf_r>:
 20095e4:	2880030b 	ldhu	r2,12(r5)
 20095e8:	deffed04 	addi	sp,sp,-76
 20095ec:	dc401015 	stw	r17,64(sp)
 20095f0:	1080008c 	andi	r2,r2,2
 20095f4:	dc000f15 	stw	r16,60(sp)
 20095f8:	dfc01215 	stw	ra,72(sp)
 20095fc:	dc801115 	stw	r18,68(sp)
 2009600:	2821883a 	mov	r16,r5
 2009604:	2023883a 	mov	r17,r4
 2009608:	10000b26 	beq	r2,zero,2009638 <__smakebuf_r+0x54>
 200960c:	28c010c4 	addi	r3,r5,67
 2009610:	00800044 	movi	r2,1
 2009614:	28800515 	stw	r2,20(r5)
 2009618:	28c00415 	stw	r3,16(r5)
 200961c:	28c00015 	stw	r3,0(r5)
 2009620:	dfc01217 	ldw	ra,72(sp)
 2009624:	dc801117 	ldw	r18,68(sp)
 2009628:	dc401017 	ldw	r17,64(sp)
 200962c:	dc000f17 	ldw	r16,60(sp)
 2009630:	dec01304 	addi	sp,sp,76
 2009634:	f800283a 	ret
 2009638:	2940038f 	ldh	r5,14(r5)
 200963c:	28002116 	blt	r5,zero,20096c4 <__smakebuf_r+0xe0>
 2009640:	d80d883a 	mov	r6,sp
 2009644:	200b6400 	call	200b640 <_fstat_r>
 2009648:	10001e16 	blt	r2,zero,20096c4 <__smakebuf_r+0xe0>
 200964c:	d8800117 	ldw	r2,4(sp)
 2009650:	00e00014 	movui	r3,32768
 2009654:	113c000c 	andi	r4,r2,61440
 2009658:	20c03126 	beq	r4,r3,2009720 <__smakebuf_r+0x13c>
 200965c:	8080030b 	ldhu	r2,12(r16)
 2009660:	00c80004 	movi	r3,8192
 2009664:	10820014 	ori	r2,r2,2048
 2009668:	8080030d 	sth	r2,12(r16)
 200966c:	20c01e26 	beq	r4,r3,20096e8 <__smakebuf_r+0x104>
 2009670:	04810004 	movi	r18,1024
 2009674:	8809883a 	mov	r4,r17
 2009678:	900b883a 	mov	r5,r18
 200967c:	20043dc0 	call	20043dc <_malloc_r>
 2009680:	1009883a 	mov	r4,r2
 2009684:	10003126 	beq	r2,zero,200974c <__smakebuf_r+0x168>
 2009688:	80c0030b 	ldhu	r3,12(r16)
 200968c:	00808074 	movhi	r2,513
 2009690:	10a24704 	addi	r2,r2,-30436
 2009694:	88800f15 	stw	r2,60(r17)
 2009698:	18c02014 	ori	r3,r3,128
 200969c:	84800515 	stw	r18,20(r16)
 20096a0:	80c0030d 	sth	r3,12(r16)
 20096a4:	81000415 	stw	r4,16(r16)
 20096a8:	81000015 	stw	r4,0(r16)
 20096ac:	dfc01217 	ldw	ra,72(sp)
 20096b0:	dc801117 	ldw	r18,68(sp)
 20096b4:	dc401017 	ldw	r17,64(sp)
 20096b8:	dc000f17 	ldw	r16,60(sp)
 20096bc:	dec01304 	addi	sp,sp,76
 20096c0:	f800283a 	ret
 20096c4:	80c0030b 	ldhu	r3,12(r16)
 20096c8:	1880200c 	andi	r2,r3,128
 20096cc:	10000426 	beq	r2,zero,20096e0 <__smakebuf_r+0xfc>
 20096d0:	04801004 	movi	r18,64
 20096d4:	18820014 	ori	r2,r3,2048
 20096d8:	8080030d 	sth	r2,12(r16)
 20096dc:	003fe506 	br	2009674 <__smakebuf_r+0x90>
 20096e0:	04810004 	movi	r18,1024
 20096e4:	003ffb06 	br	20096d4 <__smakebuf_r+0xf0>
 20096e8:	8140038f 	ldh	r5,14(r16)
 20096ec:	8809883a 	mov	r4,r17
 20096f0:	200b6b40 	call	200b6b4 <_isatty_r>
 20096f4:	103fde26 	beq	r2,zero,2009670 <__smakebuf_r+0x8c>
 20096f8:	8080030b 	ldhu	r2,12(r16)
 20096fc:	80c010c4 	addi	r3,r16,67
 2009700:	04810004 	movi	r18,1024
 2009704:	10800054 	ori	r2,r2,1
 2009708:	8080030d 	sth	r2,12(r16)
 200970c:	00800044 	movi	r2,1
 2009710:	80c00415 	stw	r3,16(r16)
 2009714:	80800515 	stw	r2,20(r16)
 2009718:	80c00015 	stw	r3,0(r16)
 200971c:	003fd506 	br	2009674 <__smakebuf_r+0x90>
 2009720:	80c00a17 	ldw	r3,40(r16)
 2009724:	00808074 	movhi	r2,513
 2009728:	10ac5b04 	addi	r2,r2,-20116
 200972c:	18bfcb1e 	bne	r3,r2,200965c <__smakebuf_r+0x78>
 2009730:	8080030b 	ldhu	r2,12(r16)
 2009734:	00c10004 	movi	r3,1024
 2009738:	1825883a 	mov	r18,r3
 200973c:	10c4b03a 	or	r2,r2,r3
 2009740:	8080030d 	sth	r2,12(r16)
 2009744:	80c01315 	stw	r3,76(r16)
 2009748:	003fca06 	br	2009674 <__smakebuf_r+0x90>
 200974c:	8100030b 	ldhu	r4,12(r16)
 2009750:	2080800c 	andi	r2,r4,512
 2009754:	103fb21e 	bne	r2,zero,2009620 <__smakebuf_r+0x3c>
 2009758:	80c010c4 	addi	r3,r16,67
 200975c:	21000094 	ori	r4,r4,2
 2009760:	00800044 	movi	r2,1
 2009764:	80800515 	stw	r2,20(r16)
 2009768:	8100030d 	sth	r4,12(r16)
 200976c:	80c00415 	stw	r3,16(r16)
 2009770:	80c00015 	stw	r3,0(r16)
 2009774:	003faa06 	br	2009620 <__smakebuf_r+0x3c>

02009778 <memchr>:
 2009778:	008000c4 	movi	r2,3
 200977c:	29403fcc 	andi	r5,r5,255
 2009780:	2007883a 	mov	r3,r4
 2009784:	1180022e 	bgeu	r2,r6,2009790 <memchr+0x18>
 2009788:	2084703a 	and	r2,r4,r2
 200978c:	10000b26 	beq	r2,zero,20097bc <memchr+0x44>
 2009790:	313fffc4 	addi	r4,r6,-1
 2009794:	3000051e 	bne	r6,zero,20097ac <memchr+0x34>
 2009798:	00002c06 	br	200984c <memchr+0xd4>
 200979c:	213fffc4 	addi	r4,r4,-1
 20097a0:	00bfffc4 	movi	r2,-1
 20097a4:	18c00044 	addi	r3,r3,1
 20097a8:	20802826 	beq	r4,r2,200984c <memchr+0xd4>
 20097ac:	18800003 	ldbu	r2,0(r3)
 20097b0:	28bffa1e 	bne	r5,r2,200979c <memchr+0x24>
 20097b4:	1805883a 	mov	r2,r3
 20097b8:	f800283a 	ret
 20097bc:	0011883a 	mov	r8,zero
 20097c0:	0007883a 	mov	r3,zero
 20097c4:	01c00104 	movi	r7,4
 20097c8:	4004923a 	slli	r2,r8,8
 20097cc:	18c00044 	addi	r3,r3,1
 20097d0:	1151883a 	add	r8,r2,r5
 20097d4:	19fffc1e 	bne	r3,r7,20097c8 <memchr+0x50>
 20097d8:	02bfbff4 	movhi	r10,65279
 20097dc:	52bfbfc4 	addi	r10,r10,-257
 20097e0:	02602074 	movhi	r9,32897
 20097e4:	4a602004 	addi	r9,r9,-32640
 20097e8:	02c000c4 	movi	r11,3
 20097ec:	20800017 	ldw	r2,0(r4)
 20097f0:	31bfff04 	addi	r6,r6,-4
 20097f4:	200f883a 	mov	r7,r4
 20097f8:	1204f03a 	xor	r2,r2,r8
 20097fc:	1287883a 	add	r3,r2,r10
 2009800:	1a46703a 	and	r3,r3,r9
 2009804:	0084303a 	nor	r2,zero,r2
 2009808:	10c4703a 	and	r2,r2,r3
 200980c:	10000b26 	beq	r2,zero,200983c <memchr+0xc4>
 2009810:	20800003 	ldbu	r2,0(r4)
 2009814:	28800f26 	beq	r5,r2,2009854 <memchr+0xdc>
 2009818:	20800043 	ldbu	r2,1(r4)
 200981c:	21c00044 	addi	r7,r4,1
 2009820:	28800c26 	beq	r5,r2,2009854 <memchr+0xdc>
 2009824:	20800083 	ldbu	r2,2(r4)
 2009828:	21c00084 	addi	r7,r4,2
 200982c:	28800926 	beq	r5,r2,2009854 <memchr+0xdc>
 2009830:	208000c3 	ldbu	r2,3(r4)
 2009834:	21c000c4 	addi	r7,r4,3
 2009838:	28800626 	beq	r5,r2,2009854 <memchr+0xdc>
 200983c:	21000104 	addi	r4,r4,4
 2009840:	59bfea36 	bltu	r11,r6,20097ec <memchr+0x74>
 2009844:	2007883a 	mov	r3,r4
 2009848:	003fd106 	br	2009790 <memchr+0x18>
 200984c:	0005883a 	mov	r2,zero
 2009850:	f800283a 	ret
 2009854:	3805883a 	mov	r2,r7
 2009858:	f800283a 	ret

0200985c <memcpy>:
 200985c:	01c003c4 	movi	r7,15
 2009860:	2007883a 	mov	r3,r4
 2009864:	3980032e 	bgeu	r7,r6,2009874 <memcpy+0x18>
 2009868:	2904b03a 	or	r2,r5,r4
 200986c:	108000cc 	andi	r2,r2,3
 2009870:	10000926 	beq	r2,zero,2009898 <memcpy+0x3c>
 2009874:	30000626 	beq	r6,zero,2009890 <memcpy+0x34>
 2009878:	30cd883a 	add	r6,r6,r3
 200987c:	28800003 	ldbu	r2,0(r5)
 2009880:	29400044 	addi	r5,r5,1
 2009884:	18800005 	stb	r2,0(r3)
 2009888:	18c00044 	addi	r3,r3,1
 200988c:	30fffb1e 	bne	r6,r3,200987c <memcpy+0x20>
 2009890:	2005883a 	mov	r2,r4
 2009894:	f800283a 	ret
 2009898:	3811883a 	mov	r8,r7
 200989c:	200f883a 	mov	r7,r4
 20098a0:	28c00017 	ldw	r3,0(r5)
 20098a4:	31bffc04 	addi	r6,r6,-16
 20098a8:	38c00015 	stw	r3,0(r7)
 20098ac:	28800117 	ldw	r2,4(r5)
 20098b0:	38800115 	stw	r2,4(r7)
 20098b4:	28c00217 	ldw	r3,8(r5)
 20098b8:	38c00215 	stw	r3,8(r7)
 20098bc:	28800317 	ldw	r2,12(r5)
 20098c0:	29400404 	addi	r5,r5,16
 20098c4:	38800315 	stw	r2,12(r7)
 20098c8:	39c00404 	addi	r7,r7,16
 20098cc:	41bff436 	bltu	r8,r6,20098a0 <memcpy+0x44>
 20098d0:	008000c4 	movi	r2,3
 20098d4:	1180072e 	bgeu	r2,r6,20098f4 <memcpy+0x98>
 20098d8:	1007883a 	mov	r3,r2
 20098dc:	28800017 	ldw	r2,0(r5)
 20098e0:	31bfff04 	addi	r6,r6,-4
 20098e4:	29400104 	addi	r5,r5,4
 20098e8:	38800015 	stw	r2,0(r7)
 20098ec:	39c00104 	addi	r7,r7,4
 20098f0:	19bffa36 	bltu	r3,r6,20098dc <memcpy+0x80>
 20098f4:	3807883a 	mov	r3,r7
 20098f8:	003fde06 	br	2009874 <memcpy+0x18>

020098fc <memmove>:
 20098fc:	2807883a 	mov	r3,r5
 2009900:	2011883a 	mov	r8,r4
 2009904:	29000c2e 	bgeu	r5,r4,2009938 <memmove+0x3c>
 2009908:	298f883a 	add	r7,r5,r6
 200990c:	21c00a2e 	bgeu	r4,r7,2009938 <memmove+0x3c>
 2009910:	30000726 	beq	r6,zero,2009930 <memmove+0x34>
 2009914:	2187883a 	add	r3,r4,r6
 2009918:	198dc83a 	sub	r6,r3,r6
 200991c:	39ffffc4 	addi	r7,r7,-1
 2009920:	38800003 	ldbu	r2,0(r7)
 2009924:	18ffffc4 	addi	r3,r3,-1
 2009928:	18800005 	stb	r2,0(r3)
 200992c:	19bffb1e 	bne	r3,r6,200991c <memmove+0x20>
 2009930:	2005883a 	mov	r2,r4
 2009934:	f800283a 	ret
 2009938:	01c003c4 	movi	r7,15
 200993c:	39800a36 	bltu	r7,r6,2009968 <memmove+0x6c>
 2009940:	303ffb26 	beq	r6,zero,2009930 <memmove+0x34>
 2009944:	400f883a 	mov	r7,r8
 2009948:	320d883a 	add	r6,r6,r8
 200994c:	28800003 	ldbu	r2,0(r5)
 2009950:	29400044 	addi	r5,r5,1
 2009954:	38800005 	stb	r2,0(r7)
 2009958:	39c00044 	addi	r7,r7,1
 200995c:	39bffb1e 	bne	r7,r6,200994c <memmove+0x50>
 2009960:	2005883a 	mov	r2,r4
 2009964:	f800283a 	ret
 2009968:	1904b03a 	or	r2,r3,r4
 200996c:	108000cc 	andi	r2,r2,3
 2009970:	103ff31e 	bne	r2,zero,2009940 <memmove+0x44>
 2009974:	3811883a 	mov	r8,r7
 2009978:	180b883a 	mov	r5,r3
 200997c:	200f883a 	mov	r7,r4
 2009980:	28c00017 	ldw	r3,0(r5)
 2009984:	31bffc04 	addi	r6,r6,-16
 2009988:	38c00015 	stw	r3,0(r7)
 200998c:	28800117 	ldw	r2,4(r5)
 2009990:	38800115 	stw	r2,4(r7)
 2009994:	28c00217 	ldw	r3,8(r5)
 2009998:	38c00215 	stw	r3,8(r7)
 200999c:	28800317 	ldw	r2,12(r5)
 20099a0:	29400404 	addi	r5,r5,16
 20099a4:	38800315 	stw	r2,12(r7)
 20099a8:	39c00404 	addi	r7,r7,16
 20099ac:	41bff436 	bltu	r8,r6,2009980 <memmove+0x84>
 20099b0:	008000c4 	movi	r2,3
 20099b4:	1180072e 	bgeu	r2,r6,20099d4 <memmove+0xd8>
 20099b8:	1007883a 	mov	r3,r2
 20099bc:	28800017 	ldw	r2,0(r5)
 20099c0:	31bfff04 	addi	r6,r6,-4
 20099c4:	29400104 	addi	r5,r5,4
 20099c8:	38800015 	stw	r2,0(r7)
 20099cc:	39c00104 	addi	r7,r7,4
 20099d0:	19bffa36 	bltu	r3,r6,20099bc <memmove+0xc0>
 20099d4:	3811883a 	mov	r8,r7
 20099d8:	003fd906 	br	2009940 <memmove+0x44>

020099dc <memset>:
 20099dc:	008000c4 	movi	r2,3
 20099e0:	29403fcc 	andi	r5,r5,255
 20099e4:	2007883a 	mov	r3,r4
 20099e8:	1180022e 	bgeu	r2,r6,20099f4 <memset+0x18>
 20099ec:	2084703a 	and	r2,r4,r2
 20099f0:	10000826 	beq	r2,zero,2009a14 <memset+0x38>
 20099f4:	30000526 	beq	r6,zero,2009a0c <memset+0x30>
 20099f8:	2805883a 	mov	r2,r5
 20099fc:	30cd883a 	add	r6,r6,r3
 2009a00:	18800005 	stb	r2,0(r3)
 2009a04:	18c00044 	addi	r3,r3,1
 2009a08:	19bffd1e 	bne	r3,r6,2009a00 <memset+0x24>
 2009a0c:	2005883a 	mov	r2,r4
 2009a10:	f800283a 	ret
 2009a14:	2804923a 	slli	r2,r5,8
 2009a18:	020003c4 	movi	r8,15
 2009a1c:	200f883a 	mov	r7,r4
 2009a20:	2884b03a 	or	r2,r5,r2
 2009a24:	1006943a 	slli	r3,r2,16
 2009a28:	10c6b03a 	or	r3,r2,r3
 2009a2c:	41800a2e 	bgeu	r8,r6,2009a58 <memset+0x7c>
 2009a30:	4005883a 	mov	r2,r8
 2009a34:	31bffc04 	addi	r6,r6,-16
 2009a38:	38c00015 	stw	r3,0(r7)
 2009a3c:	38c00115 	stw	r3,4(r7)
 2009a40:	38c00215 	stw	r3,8(r7)
 2009a44:	38c00315 	stw	r3,12(r7)
 2009a48:	39c00404 	addi	r7,r7,16
 2009a4c:	11bff936 	bltu	r2,r6,2009a34 <memset+0x58>
 2009a50:	008000c4 	movi	r2,3
 2009a54:	1180052e 	bgeu	r2,r6,2009a6c <memset+0x90>
 2009a58:	31bfff04 	addi	r6,r6,-4
 2009a5c:	008000c4 	movi	r2,3
 2009a60:	38c00015 	stw	r3,0(r7)
 2009a64:	39c00104 	addi	r7,r7,4
 2009a68:	11bffb36 	bltu	r2,r6,2009a58 <memset+0x7c>
 2009a6c:	3807883a 	mov	r3,r7
 2009a70:	003fe006 	br	20099f4 <memset+0x18>

02009a74 <_Bfree>:
 2009a74:	28000826 	beq	r5,zero,2009a98 <_Bfree+0x24>
 2009a78:	28800117 	ldw	r2,4(r5)
 2009a7c:	21001317 	ldw	r4,76(r4)
 2009a80:	1085883a 	add	r2,r2,r2
 2009a84:	1085883a 	add	r2,r2,r2
 2009a88:	1105883a 	add	r2,r2,r4
 2009a8c:	10c00017 	ldw	r3,0(r2)
 2009a90:	28c00015 	stw	r3,0(r5)
 2009a94:	11400015 	stw	r5,0(r2)
 2009a98:	f800283a 	ret

02009a9c <__hi0bits>:
 2009a9c:	20bfffec 	andhi	r2,r4,65535
 2009aa0:	10001426 	beq	r2,zero,2009af4 <__hi0bits+0x58>
 2009aa4:	0007883a 	mov	r3,zero
 2009aa8:	20bfc02c 	andhi	r2,r4,65280
 2009aac:	1000021e 	bne	r2,zero,2009ab8 <__hi0bits+0x1c>
 2009ab0:	2008923a 	slli	r4,r4,8
 2009ab4:	18c00204 	addi	r3,r3,8
 2009ab8:	20bc002c 	andhi	r2,r4,61440
 2009abc:	1000021e 	bne	r2,zero,2009ac8 <__hi0bits+0x2c>
 2009ac0:	2008913a 	slli	r4,r4,4
 2009ac4:	18c00104 	addi	r3,r3,4
 2009ac8:	20b0002c 	andhi	r2,r4,49152
 2009acc:	1000031e 	bne	r2,zero,2009adc <__hi0bits+0x40>
 2009ad0:	2105883a 	add	r2,r4,r4
 2009ad4:	18c00084 	addi	r3,r3,2
 2009ad8:	1089883a 	add	r4,r2,r2
 2009adc:	20000316 	blt	r4,zero,2009aec <__hi0bits+0x50>
 2009ae0:	2090002c 	andhi	r2,r4,16384
 2009ae4:	10000626 	beq	r2,zero,2009b00 <__hi0bits+0x64>
 2009ae8:	18c00044 	addi	r3,r3,1
 2009aec:	1805883a 	mov	r2,r3
 2009af0:	f800283a 	ret
 2009af4:	2008943a 	slli	r4,r4,16
 2009af8:	00c00404 	movi	r3,16
 2009afc:	003fea06 	br	2009aa8 <__hi0bits+0xc>
 2009b00:	00c00804 	movi	r3,32
 2009b04:	1805883a 	mov	r2,r3
 2009b08:	f800283a 	ret

02009b0c <__lo0bits>:
 2009b0c:	20c00017 	ldw	r3,0(r4)
 2009b10:	188001cc 	andi	r2,r3,7
 2009b14:	10000a26 	beq	r2,zero,2009b40 <__lo0bits+0x34>
 2009b18:	1880004c 	andi	r2,r3,1
 2009b1c:	1005003a 	cmpeq	r2,r2,zero
 2009b20:	10002126 	beq	r2,zero,2009ba8 <__lo0bits+0x9c>
 2009b24:	1880008c 	andi	r2,r3,2
 2009b28:	1000251e 	bne	r2,zero,2009bc0 <__lo0bits+0xb4>
 2009b2c:	1804d0ba 	srli	r2,r3,2
 2009b30:	01400084 	movi	r5,2
 2009b34:	20800015 	stw	r2,0(r4)
 2009b38:	2805883a 	mov	r2,r5
 2009b3c:	f800283a 	ret
 2009b40:	18bfffcc 	andi	r2,r3,65535
 2009b44:	10001526 	beq	r2,zero,2009b9c <__lo0bits+0x90>
 2009b48:	000b883a 	mov	r5,zero
 2009b4c:	18803fcc 	andi	r2,r3,255
 2009b50:	1000021e 	bne	r2,zero,2009b5c <__lo0bits+0x50>
 2009b54:	1806d23a 	srli	r3,r3,8
 2009b58:	29400204 	addi	r5,r5,8
 2009b5c:	188003cc 	andi	r2,r3,15
 2009b60:	1000021e 	bne	r2,zero,2009b6c <__lo0bits+0x60>
 2009b64:	1806d13a 	srli	r3,r3,4
 2009b68:	29400104 	addi	r5,r5,4
 2009b6c:	188000cc 	andi	r2,r3,3
 2009b70:	1000021e 	bne	r2,zero,2009b7c <__lo0bits+0x70>
 2009b74:	1806d0ba 	srli	r3,r3,2
 2009b78:	29400084 	addi	r5,r5,2
 2009b7c:	1880004c 	andi	r2,r3,1
 2009b80:	1000031e 	bne	r2,zero,2009b90 <__lo0bits+0x84>
 2009b84:	1806d07a 	srli	r3,r3,1
 2009b88:	18000a26 	beq	r3,zero,2009bb4 <__lo0bits+0xa8>
 2009b8c:	29400044 	addi	r5,r5,1
 2009b90:	2805883a 	mov	r2,r5
 2009b94:	20c00015 	stw	r3,0(r4)
 2009b98:	f800283a 	ret
 2009b9c:	1806d43a 	srli	r3,r3,16
 2009ba0:	01400404 	movi	r5,16
 2009ba4:	003fe906 	br	2009b4c <__lo0bits+0x40>
 2009ba8:	000b883a 	mov	r5,zero
 2009bac:	2805883a 	mov	r2,r5
 2009bb0:	f800283a 	ret
 2009bb4:	01400804 	movi	r5,32
 2009bb8:	2805883a 	mov	r2,r5
 2009bbc:	f800283a 	ret
 2009bc0:	1804d07a 	srli	r2,r3,1
 2009bc4:	01400044 	movi	r5,1
 2009bc8:	20800015 	stw	r2,0(r4)
 2009bcc:	003fda06 	br	2009b38 <__lo0bits+0x2c>

02009bd0 <__mcmp>:
 2009bd0:	20800417 	ldw	r2,16(r4)
 2009bd4:	28c00417 	ldw	r3,16(r5)
 2009bd8:	10cfc83a 	sub	r7,r2,r3
 2009bdc:	38000c1e 	bne	r7,zero,2009c10 <__mcmp+0x40>
 2009be0:	18c5883a 	add	r2,r3,r3
 2009be4:	1085883a 	add	r2,r2,r2
 2009be8:	10c00504 	addi	r3,r2,20
 2009bec:	21000504 	addi	r4,r4,20
 2009bf0:	28cb883a 	add	r5,r5,r3
 2009bf4:	2085883a 	add	r2,r4,r2
 2009bf8:	10bfff04 	addi	r2,r2,-4
 2009bfc:	297fff04 	addi	r5,r5,-4
 2009c00:	11800017 	ldw	r6,0(r2)
 2009c04:	28c00017 	ldw	r3,0(r5)
 2009c08:	30c0031e 	bne	r6,r3,2009c18 <__mcmp+0x48>
 2009c0c:	20bffa36 	bltu	r4,r2,2009bf8 <__mcmp+0x28>
 2009c10:	3805883a 	mov	r2,r7
 2009c14:	f800283a 	ret
 2009c18:	30c00336 	bltu	r6,r3,2009c28 <__mcmp+0x58>
 2009c1c:	01c00044 	movi	r7,1
 2009c20:	3805883a 	mov	r2,r7
 2009c24:	f800283a 	ret
 2009c28:	01ffffc4 	movi	r7,-1
 2009c2c:	003ff806 	br	2009c10 <__mcmp+0x40>

02009c30 <__ulp>:
 2009c30:	295ffc2c 	andhi	r5,r5,32752
 2009c34:	013f3034 	movhi	r4,64704
 2009c38:	290b883a 	add	r5,r5,r4
 2009c3c:	0145c83a 	sub	r2,zero,r5
 2009c40:	1007d53a 	srai	r3,r2,20
 2009c44:	000d883a 	mov	r6,zero
 2009c48:	0140040e 	bge	zero,r5,2009c5c <__ulp+0x2c>
 2009c4c:	280f883a 	mov	r7,r5
 2009c50:	3807883a 	mov	r3,r7
 2009c54:	3005883a 	mov	r2,r6
 2009c58:	f800283a 	ret
 2009c5c:	008004c4 	movi	r2,19
 2009c60:	193ffb04 	addi	r4,r3,-20
 2009c64:	10c00c0e 	bge	r2,r3,2009c98 <__ulp+0x68>
 2009c68:	008007c4 	movi	r2,31
 2009c6c:	1107c83a 	sub	r3,r2,r4
 2009c70:	00800784 	movi	r2,30
 2009c74:	01400044 	movi	r5,1
 2009c78:	11000216 	blt	r2,r4,2009c84 <__ulp+0x54>
 2009c7c:	00800044 	movi	r2,1
 2009c80:	10ca983a 	sll	r5,r2,r3
 2009c84:	000f883a 	mov	r7,zero
 2009c88:	280d883a 	mov	r6,r5
 2009c8c:	3807883a 	mov	r3,r7
 2009c90:	3005883a 	mov	r2,r6
 2009c94:	f800283a 	ret
 2009c98:	00800234 	movhi	r2,8
 2009c9c:	10cfd83a 	sra	r7,r2,r3
 2009ca0:	000d883a 	mov	r6,zero
 2009ca4:	3005883a 	mov	r2,r6
 2009ca8:	3807883a 	mov	r3,r7
 2009cac:	f800283a 	ret

02009cb0 <__b2d>:
 2009cb0:	20800417 	ldw	r2,16(r4)
 2009cb4:	defff904 	addi	sp,sp,-28
 2009cb8:	dd000415 	stw	r20,16(sp)
 2009cbc:	1085883a 	add	r2,r2,r2
 2009cc0:	25000504 	addi	r20,r4,20
 2009cc4:	1085883a 	add	r2,r2,r2
 2009cc8:	dc000015 	stw	r16,0(sp)
 2009ccc:	a0a1883a 	add	r16,r20,r2
 2009cd0:	dd400515 	stw	r21,20(sp)
 2009cd4:	857fff17 	ldw	r21,-4(r16)
 2009cd8:	dc400115 	stw	r17,4(sp)
 2009cdc:	dfc00615 	stw	ra,24(sp)
 2009ce0:	a809883a 	mov	r4,r21
 2009ce4:	2823883a 	mov	r17,r5
 2009ce8:	dcc00315 	stw	r19,12(sp)
 2009cec:	dc800215 	stw	r18,8(sp)
 2009cf0:	2009a9c0 	call	2009a9c <__hi0bits>
 2009cf4:	100b883a 	mov	r5,r2
 2009cf8:	00800804 	movi	r2,32
 2009cfc:	1145c83a 	sub	r2,r2,r5
 2009d00:	88800015 	stw	r2,0(r17)
 2009d04:	00800284 	movi	r2,10
 2009d08:	80ffff04 	addi	r3,r16,-4
 2009d0c:	11401416 	blt	r2,r5,2009d60 <__b2d+0xb0>
 2009d10:	008002c4 	movi	r2,11
 2009d14:	1149c83a 	sub	r4,r2,r5
 2009d18:	a0c02736 	bltu	r20,r3,2009db8 <__b2d+0x108>
 2009d1c:	000d883a 	mov	r6,zero
 2009d20:	28800544 	addi	r2,r5,21
 2009d24:	a906d83a 	srl	r3,r21,r4
 2009d28:	a884983a 	sll	r2,r21,r2
 2009d2c:	1ccffc34 	orhi	r19,r3,16368
 2009d30:	11a4b03a 	or	r18,r2,r6
 2009d34:	9005883a 	mov	r2,r18
 2009d38:	9807883a 	mov	r3,r19
 2009d3c:	dfc00617 	ldw	ra,24(sp)
 2009d40:	dd400517 	ldw	r21,20(sp)
 2009d44:	dd000417 	ldw	r20,16(sp)
 2009d48:	dcc00317 	ldw	r19,12(sp)
 2009d4c:	dc800217 	ldw	r18,8(sp)
 2009d50:	dc400117 	ldw	r17,4(sp)
 2009d54:	dc000017 	ldw	r16,0(sp)
 2009d58:	dec00704 	addi	sp,sp,28
 2009d5c:	f800283a 	ret
 2009d60:	a0c00e36 	bltu	r20,r3,2009d9c <__b2d+0xec>
 2009d64:	293ffd44 	addi	r4,r5,-11
 2009d68:	000d883a 	mov	r6,zero
 2009d6c:	20000f26 	beq	r4,zero,2009dac <__b2d+0xfc>
 2009d70:	00800804 	movi	r2,32
 2009d74:	110bc83a 	sub	r5,r2,r4
 2009d78:	a0c01236 	bltu	r20,r3,2009dc4 <__b2d+0x114>
 2009d7c:	000f883a 	mov	r7,zero
 2009d80:	a904983a 	sll	r2,r21,r4
 2009d84:	3146d83a 	srl	r3,r6,r5
 2009d88:	3108983a 	sll	r4,r6,r4
 2009d8c:	108ffc34 	orhi	r2,r2,16368
 2009d90:	18a6b03a 	or	r19,r3,r2
 2009d94:	3924b03a 	or	r18,r7,r4
 2009d98:	003fe606 	br	2009d34 <__b2d+0x84>
 2009d9c:	293ffd44 	addi	r4,r5,-11
 2009da0:	81bffe17 	ldw	r6,-8(r16)
 2009da4:	80fffe04 	addi	r3,r16,-8
 2009da8:	203ff11e 	bne	r4,zero,2009d70 <__b2d+0xc0>
 2009dac:	accffc34 	orhi	r19,r21,16368
 2009db0:	3025883a 	mov	r18,r6
 2009db4:	003fdf06 	br	2009d34 <__b2d+0x84>
 2009db8:	18bfff17 	ldw	r2,-4(r3)
 2009dbc:	110cd83a 	srl	r6,r2,r4
 2009dc0:	003fd706 	br	2009d20 <__b2d+0x70>
 2009dc4:	18bfff17 	ldw	r2,-4(r3)
 2009dc8:	114ed83a 	srl	r7,r2,r5
 2009dcc:	003fec06 	br	2009d80 <__b2d+0xd0>

02009dd0 <__ratio>:
 2009dd0:	defff904 	addi	sp,sp,-28
 2009dd4:	dc400215 	stw	r17,8(sp)
 2009dd8:	2823883a 	mov	r17,r5
 2009ddc:	d80b883a 	mov	r5,sp
 2009de0:	dfc00615 	stw	ra,24(sp)
 2009de4:	dd000515 	stw	r20,20(sp)
 2009de8:	dcc00415 	stw	r19,16(sp)
 2009dec:	dc800315 	stw	r18,12(sp)
 2009df0:	2025883a 	mov	r18,r4
 2009df4:	2009cb00 	call	2009cb0 <__b2d>
 2009df8:	8809883a 	mov	r4,r17
 2009dfc:	d9400104 	addi	r5,sp,4
 2009e00:	1027883a 	mov	r19,r2
 2009e04:	1829883a 	mov	r20,r3
 2009e08:	2009cb00 	call	2009cb0 <__b2d>
 2009e0c:	89000417 	ldw	r4,16(r17)
 2009e10:	91c00417 	ldw	r7,16(r18)
 2009e14:	d9800117 	ldw	r6,4(sp)
 2009e18:	180b883a 	mov	r5,r3
 2009e1c:	390fc83a 	sub	r7,r7,r4
 2009e20:	1009883a 	mov	r4,r2
 2009e24:	d8800017 	ldw	r2,0(sp)
 2009e28:	380e917a 	slli	r7,r7,5
 2009e2c:	2011883a 	mov	r8,r4
 2009e30:	1185c83a 	sub	r2,r2,r6
 2009e34:	11c5883a 	add	r2,r2,r7
 2009e38:	1006953a 	slli	r3,r2,20
 2009e3c:	2813883a 	mov	r9,r5
 2009e40:	00800d0e 	bge	zero,r2,2009e78 <__ratio+0xa8>
 2009e44:	1d29883a 	add	r20,r3,r20
 2009e48:	a00b883a 	mov	r5,r20
 2009e4c:	480f883a 	mov	r7,r9
 2009e50:	9809883a 	mov	r4,r19
 2009e54:	400d883a 	mov	r6,r8
 2009e58:	20034940 	call	2003494 <__divdf3>
 2009e5c:	dfc00617 	ldw	ra,24(sp)
 2009e60:	dd000517 	ldw	r20,20(sp)
 2009e64:	dcc00417 	ldw	r19,16(sp)
 2009e68:	dc800317 	ldw	r18,12(sp)
 2009e6c:	dc400217 	ldw	r17,8(sp)
 2009e70:	dec00704 	addi	sp,sp,28
 2009e74:	f800283a 	ret
 2009e78:	28d3c83a 	sub	r9,r5,r3
 2009e7c:	003ff206 	br	2009e48 <__ratio+0x78>

02009e80 <_mprec_log10>:
 2009e80:	defffe04 	addi	sp,sp,-8
 2009e84:	008005c4 	movi	r2,23
 2009e88:	dc000015 	stw	r16,0(sp)
 2009e8c:	dfc00115 	stw	ra,4(sp)
 2009e90:	2021883a 	mov	r16,r4
 2009e94:	11000c16 	blt	r2,r4,2009ec8 <_mprec_log10+0x48>
 2009e98:	200490fa 	slli	r2,r4,3
 2009e9c:	00c08074 	movhi	r3,513
 2009ea0:	18c2a004 	addi	r3,r3,2688
 2009ea4:	10c5883a 	add	r2,r2,r3
 2009ea8:	12400117 	ldw	r9,4(r2)
 2009eac:	12000017 	ldw	r8,0(r2)
 2009eb0:	4807883a 	mov	r3,r9
 2009eb4:	4005883a 	mov	r2,r8
 2009eb8:	dfc00117 	ldw	ra,4(sp)
 2009ebc:	dc000017 	ldw	r16,0(sp)
 2009ec0:	dec00204 	addi	sp,sp,8
 2009ec4:	f800283a 	ret
 2009ec8:	0011883a 	mov	r8,zero
 2009ecc:	024ffc34 	movhi	r9,16368
 2009ed0:	0005883a 	mov	r2,zero
 2009ed4:	00d00934 	movhi	r3,16420
 2009ed8:	480b883a 	mov	r5,r9
 2009edc:	4009883a 	mov	r4,r8
 2009ee0:	180f883a 	mov	r7,r3
 2009ee4:	100d883a 	mov	r6,r2
 2009ee8:	20030d00 	call	20030d0 <__muldf3>
 2009eec:	843fffc4 	addi	r16,r16,-1
 2009ef0:	1011883a 	mov	r8,r2
 2009ef4:	1813883a 	mov	r9,r3
 2009ef8:	803ff51e 	bne	r16,zero,2009ed0 <_mprec_log10+0x50>
 2009efc:	4005883a 	mov	r2,r8
 2009f00:	4807883a 	mov	r3,r9
 2009f04:	dfc00117 	ldw	ra,4(sp)
 2009f08:	dc000017 	ldw	r16,0(sp)
 2009f0c:	dec00204 	addi	sp,sp,8
 2009f10:	f800283a 	ret

02009f14 <__copybits>:
 2009f14:	297fffc4 	addi	r5,r5,-1
 2009f18:	30800417 	ldw	r2,16(r6)
 2009f1c:	280bd17a 	srai	r5,r5,5
 2009f20:	31800504 	addi	r6,r6,20
 2009f24:	1085883a 	add	r2,r2,r2
 2009f28:	294b883a 	add	r5,r5,r5
 2009f2c:	294b883a 	add	r5,r5,r5
 2009f30:	1085883a 	add	r2,r2,r2
 2009f34:	290b883a 	add	r5,r5,r4
 2009f38:	3087883a 	add	r3,r6,r2
 2009f3c:	29400104 	addi	r5,r5,4
 2009f40:	30c0052e 	bgeu	r6,r3,2009f58 <__copybits+0x44>
 2009f44:	30800017 	ldw	r2,0(r6)
 2009f48:	31800104 	addi	r6,r6,4
 2009f4c:	20800015 	stw	r2,0(r4)
 2009f50:	21000104 	addi	r4,r4,4
 2009f54:	30fffb36 	bltu	r6,r3,2009f44 <__copybits+0x30>
 2009f58:	2140032e 	bgeu	r4,r5,2009f68 <__copybits+0x54>
 2009f5c:	20000015 	stw	zero,0(r4)
 2009f60:	21000104 	addi	r4,r4,4
 2009f64:	217ffd36 	bltu	r4,r5,2009f5c <__copybits+0x48>
 2009f68:	f800283a 	ret

02009f6c <__any_on>:
 2009f6c:	20800417 	ldw	r2,16(r4)
 2009f70:	2807d17a 	srai	r3,r5,5
 2009f74:	21000504 	addi	r4,r4,20
 2009f78:	10c00d0e 	bge	r2,r3,2009fb0 <__any_on+0x44>
 2009f7c:	1085883a 	add	r2,r2,r2
 2009f80:	1085883a 	add	r2,r2,r2
 2009f84:	208d883a 	add	r6,r4,r2
 2009f88:	2180182e 	bgeu	r4,r6,2009fec <__any_on+0x80>
 2009f8c:	30bfff17 	ldw	r2,-4(r6)
 2009f90:	30ffff04 	addi	r3,r6,-4
 2009f94:	1000041e 	bne	r2,zero,2009fa8 <__any_on+0x3c>
 2009f98:	20c0142e 	bgeu	r4,r3,2009fec <__any_on+0x80>
 2009f9c:	18ffff04 	addi	r3,r3,-4
 2009fa0:	18800017 	ldw	r2,0(r3)
 2009fa4:	103ffc26 	beq	r2,zero,2009f98 <__any_on+0x2c>
 2009fa8:	00800044 	movi	r2,1
 2009fac:	f800283a 	ret
 2009fb0:	18800a0e 	bge	r3,r2,2009fdc <__any_on+0x70>
 2009fb4:	294007cc 	andi	r5,r5,31
 2009fb8:	28000826 	beq	r5,zero,2009fdc <__any_on+0x70>
 2009fbc:	18c5883a 	add	r2,r3,r3
 2009fc0:	1085883a 	add	r2,r2,r2
 2009fc4:	208d883a 	add	r6,r4,r2
 2009fc8:	30c00017 	ldw	r3,0(r6)
 2009fcc:	1944d83a 	srl	r2,r3,r5
 2009fd0:	1144983a 	sll	r2,r2,r5
 2009fd4:	18bff41e 	bne	r3,r2,2009fa8 <__any_on+0x3c>
 2009fd8:	003feb06 	br	2009f88 <__any_on+0x1c>
 2009fdc:	18c5883a 	add	r2,r3,r3
 2009fe0:	1085883a 	add	r2,r2,r2
 2009fe4:	208d883a 	add	r6,r4,r2
 2009fe8:	003fe706 	br	2009f88 <__any_on+0x1c>
 2009fec:	0005883a 	mov	r2,zero
 2009ff0:	f800283a 	ret

02009ff4 <_Balloc>:
 2009ff4:	20c01317 	ldw	r3,76(r4)
 2009ff8:	defffb04 	addi	sp,sp,-20
 2009ffc:	dcc00315 	stw	r19,12(sp)
 200a000:	dc800215 	stw	r18,8(sp)
 200a004:	dfc00415 	stw	ra,16(sp)
 200a008:	2825883a 	mov	r18,r5
 200a00c:	dc400115 	stw	r17,4(sp)
 200a010:	dc000015 	stw	r16,0(sp)
 200a014:	2027883a 	mov	r19,r4
 200a018:	01800404 	movi	r6,16
 200a01c:	01400104 	movi	r5,4
 200a020:	18001726 	beq	r3,zero,200a080 <_Balloc+0x8c>
 200a024:	01400044 	movi	r5,1
 200a028:	9485883a 	add	r2,r18,r18
 200a02c:	2ca2983a 	sll	r17,r5,r18
 200a030:	1085883a 	add	r2,r2,r2
 200a034:	10c7883a 	add	r3,r2,r3
 200a038:	1c000017 	ldw	r16,0(r3)
 200a03c:	8c4d883a 	add	r6,r17,r17
 200a040:	318d883a 	add	r6,r6,r6
 200a044:	9809883a 	mov	r4,r19
 200a048:	31800504 	addi	r6,r6,20
 200a04c:	80001226 	beq	r16,zero,200a098 <_Balloc+0xa4>
 200a050:	80800017 	ldw	r2,0(r16)
 200a054:	18800015 	stw	r2,0(r3)
 200a058:	80000415 	stw	zero,16(r16)
 200a05c:	80000315 	stw	zero,12(r16)
 200a060:	8005883a 	mov	r2,r16
 200a064:	dfc00417 	ldw	ra,16(sp)
 200a068:	dcc00317 	ldw	r19,12(sp)
 200a06c:	dc800217 	ldw	r18,8(sp)
 200a070:	dc400117 	ldw	r17,4(sp)
 200a074:	dc000017 	ldw	r16,0(sp)
 200a078:	dec00504 	addi	sp,sp,20
 200a07c:	f800283a 	ret
 200a080:	200b3e40 	call	200b3e4 <_calloc_r>
 200a084:	1007883a 	mov	r3,r2
 200a088:	0021883a 	mov	r16,zero
 200a08c:	98801315 	stw	r2,76(r19)
 200a090:	103fe41e 	bne	r2,zero,200a024 <_Balloc+0x30>
 200a094:	003ff206 	br	200a060 <_Balloc+0x6c>
 200a098:	200b3e40 	call	200b3e4 <_calloc_r>
 200a09c:	103ff026 	beq	r2,zero,200a060 <_Balloc+0x6c>
 200a0a0:	1021883a 	mov	r16,r2
 200a0a4:	14800115 	stw	r18,4(r2)
 200a0a8:	14400215 	stw	r17,8(r2)
 200a0ac:	003fea06 	br	200a058 <_Balloc+0x64>

0200a0b0 <__d2b>:
 200a0b0:	defff504 	addi	sp,sp,-44
 200a0b4:	dcc00515 	stw	r19,20(sp)
 200a0b8:	04c00044 	movi	r19,1
 200a0bc:	dc000215 	stw	r16,8(sp)
 200a0c0:	2821883a 	mov	r16,r5
 200a0c4:	980b883a 	mov	r5,r19
 200a0c8:	ddc00915 	stw	r23,36(sp)
 200a0cc:	dd800815 	stw	r22,32(sp)
 200a0d0:	dd400715 	stw	r21,28(sp)
 200a0d4:	dd000615 	stw	r20,24(sp)
 200a0d8:	dc800415 	stw	r18,16(sp)
 200a0dc:	dc400315 	stw	r17,12(sp)
 200a0e0:	dfc00a15 	stw	ra,40(sp)
 200a0e4:	3023883a 	mov	r17,r6
 200a0e8:	382d883a 	mov	r22,r7
 200a0ec:	ddc00b17 	ldw	r23,44(sp)
 200a0f0:	2009ff40 	call	2009ff4 <_Balloc>
 200a0f4:	1025883a 	mov	r18,r2
 200a0f8:	00a00034 	movhi	r2,32768
 200a0fc:	10bfffc4 	addi	r2,r2,-1
 200a100:	8888703a 	and	r4,r17,r2
 200a104:	202ad53a 	srli	r21,r4,20
 200a108:	00800434 	movhi	r2,16
 200a10c:	10bfffc4 	addi	r2,r2,-1
 200a110:	8886703a 	and	r3,r17,r2
 200a114:	a829003a 	cmpeq	r20,r21,zero
 200a118:	800b883a 	mov	r5,r16
 200a11c:	d8c00115 	stw	r3,4(sp)
 200a120:	94000504 	addi	r16,r18,20
 200a124:	a000021e 	bne	r20,zero,200a130 <__d2b+0x80>
 200a128:	18c00434 	orhi	r3,r3,16
 200a12c:	d8c00115 	stw	r3,4(sp)
 200a130:	28002726 	beq	r5,zero,200a1d0 <__d2b+0x120>
 200a134:	d809883a 	mov	r4,sp
 200a138:	d9400015 	stw	r5,0(sp)
 200a13c:	2009b0c0 	call	2009b0c <__lo0bits>
 200a140:	100d883a 	mov	r6,r2
 200a144:	10003526 	beq	r2,zero,200a21c <__d2b+0x16c>
 200a148:	d8c00117 	ldw	r3,4(sp)
 200a14c:	00800804 	movi	r2,32
 200a150:	1185c83a 	sub	r2,r2,r6
 200a154:	d9000017 	ldw	r4,0(sp)
 200a158:	1886983a 	sll	r3,r3,r2
 200a15c:	1906b03a 	or	r3,r3,r4
 200a160:	90c00515 	stw	r3,20(r18)
 200a164:	d8c00117 	ldw	r3,4(sp)
 200a168:	1986d83a 	srl	r3,r3,r6
 200a16c:	d8c00115 	stw	r3,4(sp)
 200a170:	180b003a 	cmpeq	r5,r3,zero
 200a174:	00800084 	movi	r2,2
 200a178:	114bc83a 	sub	r5,r2,r5
 200a17c:	80c00115 	stw	r3,4(r16)
 200a180:	91400415 	stw	r5,16(r18)
 200a184:	a0001a1e 	bne	r20,zero,200a1f0 <__d2b+0x140>
 200a188:	3545883a 	add	r2,r6,r21
 200a18c:	10bef344 	addi	r2,r2,-1075
 200a190:	00c00d44 	movi	r3,53
 200a194:	b0800015 	stw	r2,0(r22)
 200a198:	1987c83a 	sub	r3,r3,r6
 200a19c:	b8c00015 	stw	r3,0(r23)
 200a1a0:	9005883a 	mov	r2,r18
 200a1a4:	dfc00a17 	ldw	ra,40(sp)
 200a1a8:	ddc00917 	ldw	r23,36(sp)
 200a1ac:	dd800817 	ldw	r22,32(sp)
 200a1b0:	dd400717 	ldw	r21,28(sp)
 200a1b4:	dd000617 	ldw	r20,24(sp)
 200a1b8:	dcc00517 	ldw	r19,20(sp)
 200a1bc:	dc800417 	ldw	r18,16(sp)
 200a1c0:	dc400317 	ldw	r17,12(sp)
 200a1c4:	dc000217 	ldw	r16,8(sp)
 200a1c8:	dec00b04 	addi	sp,sp,44
 200a1cc:	f800283a 	ret
 200a1d0:	d9000104 	addi	r4,sp,4
 200a1d4:	2009b0c0 	call	2009b0c <__lo0bits>
 200a1d8:	11800804 	addi	r6,r2,32
 200a1dc:	d8800117 	ldw	r2,4(sp)
 200a1e0:	94c00415 	stw	r19,16(r18)
 200a1e4:	980b883a 	mov	r5,r19
 200a1e8:	90800515 	stw	r2,20(r18)
 200a1ec:	a03fe626 	beq	r20,zero,200a188 <__d2b+0xd8>
 200a1f0:	2945883a 	add	r2,r5,r5
 200a1f4:	1085883a 	add	r2,r2,r2
 200a1f8:	1405883a 	add	r2,r2,r16
 200a1fc:	113fff17 	ldw	r4,-4(r2)
 200a200:	30fef384 	addi	r3,r6,-1074
 200a204:	2820917a 	slli	r16,r5,5
 200a208:	b0c00015 	stw	r3,0(r22)
 200a20c:	2009a9c0 	call	2009a9c <__hi0bits>
 200a210:	80a1c83a 	sub	r16,r16,r2
 200a214:	bc000015 	stw	r16,0(r23)
 200a218:	003fe106 	br	200a1a0 <__d2b+0xf0>
 200a21c:	d8800017 	ldw	r2,0(sp)
 200a220:	90800515 	stw	r2,20(r18)
 200a224:	d8c00117 	ldw	r3,4(sp)
 200a228:	003fd106 	br	200a170 <__d2b+0xc0>

0200a22c <__mdiff>:
 200a22c:	defffb04 	addi	sp,sp,-20
 200a230:	dc000015 	stw	r16,0(sp)
 200a234:	2821883a 	mov	r16,r5
 200a238:	dc800215 	stw	r18,8(sp)
 200a23c:	300b883a 	mov	r5,r6
 200a240:	2025883a 	mov	r18,r4
 200a244:	8009883a 	mov	r4,r16
 200a248:	dc400115 	stw	r17,4(sp)
 200a24c:	dfc00415 	stw	ra,16(sp)
 200a250:	dcc00315 	stw	r19,12(sp)
 200a254:	3023883a 	mov	r17,r6
 200a258:	2009bd00 	call	2009bd0 <__mcmp>
 200a25c:	10004226 	beq	r2,zero,200a368 <__mdiff+0x13c>
 200a260:	10005016 	blt	r2,zero,200a3a4 <__mdiff+0x178>
 200a264:	0027883a 	mov	r19,zero
 200a268:	81400117 	ldw	r5,4(r16)
 200a26c:	9009883a 	mov	r4,r18
 200a270:	2009ff40 	call	2009ff4 <_Balloc>
 200a274:	1019883a 	mov	r12,r2
 200a278:	82800417 	ldw	r10,16(r16)
 200a27c:	88800417 	ldw	r2,16(r17)
 200a280:	81800504 	addi	r6,r16,20
 200a284:	5287883a 	add	r3,r10,r10
 200a288:	1085883a 	add	r2,r2,r2
 200a28c:	18c7883a 	add	r3,r3,r3
 200a290:	1085883a 	add	r2,r2,r2
 200a294:	8a000504 	addi	r8,r17,20
 200a298:	64c00315 	stw	r19,12(r12)
 200a29c:	30db883a 	add	r13,r6,r3
 200a2a0:	4097883a 	add	r11,r8,r2
 200a2a4:	61c00504 	addi	r7,r12,20
 200a2a8:	0013883a 	mov	r9,zero
 200a2ac:	31000017 	ldw	r4,0(r6)
 200a2b0:	41400017 	ldw	r5,0(r8)
 200a2b4:	42000104 	addi	r8,r8,4
 200a2b8:	20bfffcc 	andi	r2,r4,65535
 200a2bc:	28ffffcc 	andi	r3,r5,65535
 200a2c0:	10c5c83a 	sub	r2,r2,r3
 200a2c4:	1245883a 	add	r2,r2,r9
 200a2c8:	2008d43a 	srli	r4,r4,16
 200a2cc:	280ad43a 	srli	r5,r5,16
 200a2d0:	1007d43a 	srai	r3,r2,16
 200a2d4:	3880000d 	sth	r2,0(r7)
 200a2d8:	2149c83a 	sub	r4,r4,r5
 200a2dc:	20c9883a 	add	r4,r4,r3
 200a2e0:	3900008d 	sth	r4,2(r7)
 200a2e4:	31800104 	addi	r6,r6,4
 200a2e8:	39c00104 	addi	r7,r7,4
 200a2ec:	2013d43a 	srai	r9,r4,16
 200a2f0:	42ffee36 	bltu	r8,r11,200a2ac <__mdiff+0x80>
 200a2f4:	33400c2e 	bgeu	r6,r13,200a328 <__mdiff+0xfc>
 200a2f8:	30800017 	ldw	r2,0(r6)
 200a2fc:	31800104 	addi	r6,r6,4
 200a300:	10ffffcc 	andi	r3,r2,65535
 200a304:	1a47883a 	add	r3,r3,r9
 200a308:	1004d43a 	srli	r2,r2,16
 200a30c:	1809d43a 	srai	r4,r3,16
 200a310:	38c0000d 	sth	r3,0(r7)
 200a314:	1105883a 	add	r2,r2,r4
 200a318:	3880008d 	sth	r2,2(r7)
 200a31c:	1013d43a 	srai	r9,r2,16
 200a320:	39c00104 	addi	r7,r7,4
 200a324:	337ff436 	bltu	r6,r13,200a2f8 <__mdiff+0xcc>
 200a328:	38bfff17 	ldw	r2,-4(r7)
 200a32c:	38ffff04 	addi	r3,r7,-4
 200a330:	1000041e 	bne	r2,zero,200a344 <__mdiff+0x118>
 200a334:	18ffff04 	addi	r3,r3,-4
 200a338:	18800017 	ldw	r2,0(r3)
 200a33c:	52bfffc4 	addi	r10,r10,-1
 200a340:	103ffc26 	beq	r2,zero,200a334 <__mdiff+0x108>
 200a344:	6005883a 	mov	r2,r12
 200a348:	62800415 	stw	r10,16(r12)
 200a34c:	dfc00417 	ldw	ra,16(sp)
 200a350:	dcc00317 	ldw	r19,12(sp)
 200a354:	dc800217 	ldw	r18,8(sp)
 200a358:	dc400117 	ldw	r17,4(sp)
 200a35c:	dc000017 	ldw	r16,0(sp)
 200a360:	dec00504 	addi	sp,sp,20
 200a364:	f800283a 	ret
 200a368:	9009883a 	mov	r4,r18
 200a36c:	000b883a 	mov	r5,zero
 200a370:	2009ff40 	call	2009ff4 <_Balloc>
 200a374:	1019883a 	mov	r12,r2
 200a378:	00800044 	movi	r2,1
 200a37c:	60800415 	stw	r2,16(r12)
 200a380:	6005883a 	mov	r2,r12
 200a384:	60000515 	stw	zero,20(r12)
 200a388:	dfc00417 	ldw	ra,16(sp)
 200a38c:	dcc00317 	ldw	r19,12(sp)
 200a390:	dc800217 	ldw	r18,8(sp)
 200a394:	dc400117 	ldw	r17,4(sp)
 200a398:	dc000017 	ldw	r16,0(sp)
 200a39c:	dec00504 	addi	sp,sp,20
 200a3a0:	f800283a 	ret
 200a3a4:	880d883a 	mov	r6,r17
 200a3a8:	04c00044 	movi	r19,1
 200a3ac:	8023883a 	mov	r17,r16
 200a3b0:	3021883a 	mov	r16,r6
 200a3b4:	003fac06 	br	200a268 <__mdiff+0x3c>

0200a3b8 <__lshift>:
 200a3b8:	defff904 	addi	sp,sp,-28
 200a3bc:	28800417 	ldw	r2,16(r5)
 200a3c0:	dc000015 	stw	r16,0(sp)
 200a3c4:	3021d17a 	srai	r16,r6,5
 200a3c8:	28c00217 	ldw	r3,8(r5)
 200a3cc:	10800044 	addi	r2,r2,1
 200a3d0:	dc400115 	stw	r17,4(sp)
 200a3d4:	80a3883a 	add	r17,r16,r2
 200a3d8:	dd400515 	stw	r21,20(sp)
 200a3dc:	dd000415 	stw	r20,16(sp)
 200a3e0:	dc800215 	stw	r18,8(sp)
 200a3e4:	dfc00615 	stw	ra,24(sp)
 200a3e8:	2825883a 	mov	r18,r5
 200a3ec:	dcc00315 	stw	r19,12(sp)
 200a3f0:	3029883a 	mov	r20,r6
 200a3f4:	202b883a 	mov	r21,r4
 200a3f8:	29400117 	ldw	r5,4(r5)
 200a3fc:	1c40030e 	bge	r3,r17,200a40c <__lshift+0x54>
 200a400:	18c7883a 	add	r3,r3,r3
 200a404:	29400044 	addi	r5,r5,1
 200a408:	1c7ffd16 	blt	r3,r17,200a400 <__lshift+0x48>
 200a40c:	a809883a 	mov	r4,r21
 200a410:	2009ff40 	call	2009ff4 <_Balloc>
 200a414:	1027883a 	mov	r19,r2
 200a418:	11400504 	addi	r5,r2,20
 200a41c:	0400090e 	bge	zero,r16,200a444 <__lshift+0x8c>
 200a420:	2805883a 	mov	r2,r5
 200a424:	0007883a 	mov	r3,zero
 200a428:	18c00044 	addi	r3,r3,1
 200a42c:	10000015 	stw	zero,0(r2)
 200a430:	10800104 	addi	r2,r2,4
 200a434:	80fffc1e 	bne	r16,r3,200a428 <__lshift+0x70>
 200a438:	8405883a 	add	r2,r16,r16
 200a43c:	1085883a 	add	r2,r2,r2
 200a440:	288b883a 	add	r5,r5,r2
 200a444:	90800417 	ldw	r2,16(r18)
 200a448:	91000504 	addi	r4,r18,20
 200a44c:	a18007cc 	andi	r6,r20,31
 200a450:	1085883a 	add	r2,r2,r2
 200a454:	1085883a 	add	r2,r2,r2
 200a458:	208f883a 	add	r7,r4,r2
 200a45c:	30001e26 	beq	r6,zero,200a4d8 <__lshift+0x120>
 200a460:	00800804 	movi	r2,32
 200a464:	1191c83a 	sub	r8,r2,r6
 200a468:	0007883a 	mov	r3,zero
 200a46c:	20800017 	ldw	r2,0(r4)
 200a470:	1184983a 	sll	r2,r2,r6
 200a474:	1884b03a 	or	r2,r3,r2
 200a478:	28800015 	stw	r2,0(r5)
 200a47c:	20c00017 	ldw	r3,0(r4)
 200a480:	21000104 	addi	r4,r4,4
 200a484:	29400104 	addi	r5,r5,4
 200a488:	1a06d83a 	srl	r3,r3,r8
 200a48c:	21fff736 	bltu	r4,r7,200a46c <__lshift+0xb4>
 200a490:	28c00015 	stw	r3,0(r5)
 200a494:	18000126 	beq	r3,zero,200a49c <__lshift+0xe4>
 200a498:	8c400044 	addi	r17,r17,1
 200a49c:	88bfffc4 	addi	r2,r17,-1
 200a4a0:	98800415 	stw	r2,16(r19)
 200a4a4:	a809883a 	mov	r4,r21
 200a4a8:	900b883a 	mov	r5,r18
 200a4ac:	2009a740 	call	2009a74 <_Bfree>
 200a4b0:	9805883a 	mov	r2,r19
 200a4b4:	dfc00617 	ldw	ra,24(sp)
 200a4b8:	dd400517 	ldw	r21,20(sp)
 200a4bc:	dd000417 	ldw	r20,16(sp)
 200a4c0:	dcc00317 	ldw	r19,12(sp)
 200a4c4:	dc800217 	ldw	r18,8(sp)
 200a4c8:	dc400117 	ldw	r17,4(sp)
 200a4cc:	dc000017 	ldw	r16,0(sp)
 200a4d0:	dec00704 	addi	sp,sp,28
 200a4d4:	f800283a 	ret
 200a4d8:	20800017 	ldw	r2,0(r4)
 200a4dc:	21000104 	addi	r4,r4,4
 200a4e0:	28800015 	stw	r2,0(r5)
 200a4e4:	29400104 	addi	r5,r5,4
 200a4e8:	21ffec2e 	bgeu	r4,r7,200a49c <__lshift+0xe4>
 200a4ec:	20800017 	ldw	r2,0(r4)
 200a4f0:	21000104 	addi	r4,r4,4
 200a4f4:	28800015 	stw	r2,0(r5)
 200a4f8:	29400104 	addi	r5,r5,4
 200a4fc:	21fff636 	bltu	r4,r7,200a4d8 <__lshift+0x120>
 200a500:	003fe606 	br	200a49c <__lshift+0xe4>

0200a504 <__multiply>:
 200a504:	defff004 	addi	sp,sp,-64
 200a508:	dc800815 	stw	r18,32(sp)
 200a50c:	dc400715 	stw	r17,28(sp)
 200a510:	2c800417 	ldw	r18,16(r5)
 200a514:	34400417 	ldw	r17,16(r6)
 200a518:	dcc00915 	stw	r19,36(sp)
 200a51c:	dc000615 	stw	r16,24(sp)
 200a520:	dfc00f15 	stw	ra,60(sp)
 200a524:	df000e15 	stw	fp,56(sp)
 200a528:	ddc00d15 	stw	r23,52(sp)
 200a52c:	dd800c15 	stw	r22,48(sp)
 200a530:	dd400b15 	stw	r21,44(sp)
 200a534:	dd000a15 	stw	r20,40(sp)
 200a538:	2821883a 	mov	r16,r5
 200a53c:	3027883a 	mov	r19,r6
 200a540:	9440040e 	bge	r18,r17,200a554 <__multiply+0x50>
 200a544:	8825883a 	mov	r18,r17
 200a548:	2c400417 	ldw	r17,16(r5)
 200a54c:	2827883a 	mov	r19,r5
 200a550:	3021883a 	mov	r16,r6
 200a554:	80800217 	ldw	r2,8(r16)
 200a558:	9447883a 	add	r3,r18,r17
 200a55c:	d8c00415 	stw	r3,16(sp)
 200a560:	81400117 	ldw	r5,4(r16)
 200a564:	10c0010e 	bge	r2,r3,200a56c <__multiply+0x68>
 200a568:	29400044 	addi	r5,r5,1
 200a56c:	2009ff40 	call	2009ff4 <_Balloc>
 200a570:	d8800515 	stw	r2,20(sp)
 200a574:	d9000417 	ldw	r4,16(sp)
 200a578:	d8c00517 	ldw	r3,20(sp)
 200a57c:	2105883a 	add	r2,r4,r4
 200a580:	1085883a 	add	r2,r2,r2
 200a584:	19000504 	addi	r4,r3,20
 200a588:	2085883a 	add	r2,r4,r2
 200a58c:	d8800315 	stw	r2,12(sp)
 200a590:	2080052e 	bgeu	r4,r2,200a5a8 <__multiply+0xa4>
 200a594:	2005883a 	mov	r2,r4
 200a598:	d8c00317 	ldw	r3,12(sp)
 200a59c:	10000015 	stw	zero,0(r2)
 200a5a0:	10800104 	addi	r2,r2,4
 200a5a4:	10fffc36 	bltu	r2,r3,200a598 <__multiply+0x94>
 200a5a8:	8c45883a 	add	r2,r17,r17
 200a5ac:	9487883a 	add	r3,r18,r18
 200a5b0:	9dc00504 	addi	r23,r19,20
 200a5b4:	1085883a 	add	r2,r2,r2
 200a5b8:	84000504 	addi	r16,r16,20
 200a5bc:	18c7883a 	add	r3,r3,r3
 200a5c0:	b885883a 	add	r2,r23,r2
 200a5c4:	dc000015 	stw	r16,0(sp)
 200a5c8:	d8800215 	stw	r2,8(sp)
 200a5cc:	80f9883a 	add	fp,r16,r3
 200a5d0:	b880432e 	bgeu	r23,r2,200a6e0 <__multiply+0x1dc>
 200a5d4:	d9000115 	stw	r4,4(sp)
 200a5d8:	b9000017 	ldw	r4,0(r23)
 200a5dc:	253fffcc 	andi	r20,r4,65535
 200a5e0:	a0001a26 	beq	r20,zero,200a64c <__multiply+0x148>
 200a5e4:	dcc00017 	ldw	r19,0(sp)
 200a5e8:	dc800117 	ldw	r18,4(sp)
 200a5ec:	002b883a 	mov	r21,zero
 200a5f0:	9c400017 	ldw	r17,0(r19)
 200a5f4:	94000017 	ldw	r16,0(r18)
 200a5f8:	a009883a 	mov	r4,r20
 200a5fc:	897fffcc 	andi	r5,r17,65535
 200a600:	2003b380 	call	2003b38 <__mulsi3>
 200a604:	880ad43a 	srli	r5,r17,16
 200a608:	80ffffcc 	andi	r3,r16,65535
 200a60c:	a8c7883a 	add	r3,r21,r3
 200a610:	a009883a 	mov	r4,r20
 200a614:	10e3883a 	add	r17,r2,r3
 200a618:	8020d43a 	srli	r16,r16,16
 200a61c:	2003b380 	call	2003b38 <__mulsi3>
 200a620:	8806d43a 	srli	r3,r17,16
 200a624:	1405883a 	add	r2,r2,r16
 200a628:	9cc00104 	addi	r19,r19,4
 200a62c:	1887883a 	add	r3,r3,r2
 200a630:	90c0008d 	sth	r3,2(r18)
 200a634:	9440000d 	sth	r17,0(r18)
 200a638:	182ad43a 	srli	r21,r3,16
 200a63c:	94800104 	addi	r18,r18,4
 200a640:	9f3feb36 	bltu	r19,fp,200a5f0 <__multiply+0xec>
 200a644:	95400015 	stw	r21,0(r18)
 200a648:	b9000017 	ldw	r4,0(r23)
 200a64c:	202ad43a 	srli	r21,r4,16
 200a650:	a8001c26 	beq	r21,zero,200a6c4 <__multiply+0x1c0>
 200a654:	d9000117 	ldw	r4,4(sp)
 200a658:	dd000017 	ldw	r20,0(sp)
 200a65c:	002d883a 	mov	r22,zero
 200a660:	24c00017 	ldw	r19,0(r4)
 200a664:	2025883a 	mov	r18,r4
 200a668:	9823883a 	mov	r17,r19
 200a66c:	a4000017 	ldw	r16,0(r20)
 200a670:	a809883a 	mov	r4,r21
 200a674:	a5000104 	addi	r20,r20,4
 200a678:	817fffcc 	andi	r5,r16,65535
 200a67c:	2003b380 	call	2003b38 <__mulsi3>
 200a680:	8806d43a 	srli	r3,r17,16
 200a684:	800ad43a 	srli	r5,r16,16
 200a688:	94c0000d 	sth	r19,0(r18)
 200a68c:	b0c7883a 	add	r3,r22,r3
 200a690:	10e1883a 	add	r16,r2,r3
 200a694:	9400008d 	sth	r16,2(r18)
 200a698:	a809883a 	mov	r4,r21
 200a69c:	94800104 	addi	r18,r18,4
 200a6a0:	2003b380 	call	2003b38 <__mulsi3>
 200a6a4:	94400017 	ldw	r17,0(r18)
 200a6a8:	8020d43a 	srli	r16,r16,16
 200a6ac:	88ffffcc 	andi	r3,r17,65535
 200a6b0:	10c5883a 	add	r2,r2,r3
 200a6b4:	80a7883a 	add	r19,r16,r2
 200a6b8:	982cd43a 	srli	r22,r19,16
 200a6bc:	a73feb36 	bltu	r20,fp,200a66c <__multiply+0x168>
 200a6c0:	94c00015 	stw	r19,0(r18)
 200a6c4:	d8800217 	ldw	r2,8(sp)
 200a6c8:	bdc00104 	addi	r23,r23,4
 200a6cc:	b880042e 	bgeu	r23,r2,200a6e0 <__multiply+0x1dc>
 200a6d0:	d8c00117 	ldw	r3,4(sp)
 200a6d4:	18c00104 	addi	r3,r3,4
 200a6d8:	d8c00115 	stw	r3,4(sp)
 200a6dc:	003fbe06 	br	200a5d8 <__multiply+0xd4>
 200a6e0:	d9000417 	ldw	r4,16(sp)
 200a6e4:	01000c0e 	bge	zero,r4,200a718 <__multiply+0x214>
 200a6e8:	d8c00317 	ldw	r3,12(sp)
 200a6ec:	18bfff17 	ldw	r2,-4(r3)
 200a6f0:	18ffff04 	addi	r3,r3,-4
 200a6f4:	10000326 	beq	r2,zero,200a704 <__multiply+0x200>
 200a6f8:	00000706 	br	200a718 <__multiply+0x214>
 200a6fc:	18800017 	ldw	r2,0(r3)
 200a700:	1000051e 	bne	r2,zero,200a718 <__multiply+0x214>
 200a704:	d9000417 	ldw	r4,16(sp)
 200a708:	18ffff04 	addi	r3,r3,-4
 200a70c:	213fffc4 	addi	r4,r4,-1
 200a710:	d9000415 	stw	r4,16(sp)
 200a714:	203ff91e 	bne	r4,zero,200a6fc <__multiply+0x1f8>
 200a718:	d8800417 	ldw	r2,16(sp)
 200a71c:	d8c00517 	ldw	r3,20(sp)
 200a720:	18800415 	stw	r2,16(r3)
 200a724:	1805883a 	mov	r2,r3
 200a728:	dfc00f17 	ldw	ra,60(sp)
 200a72c:	df000e17 	ldw	fp,56(sp)
 200a730:	ddc00d17 	ldw	r23,52(sp)
 200a734:	dd800c17 	ldw	r22,48(sp)
 200a738:	dd400b17 	ldw	r21,44(sp)
 200a73c:	dd000a17 	ldw	r20,40(sp)
 200a740:	dcc00917 	ldw	r19,36(sp)
 200a744:	dc800817 	ldw	r18,32(sp)
 200a748:	dc400717 	ldw	r17,28(sp)
 200a74c:	dc000617 	ldw	r16,24(sp)
 200a750:	dec01004 	addi	sp,sp,64
 200a754:	f800283a 	ret

0200a758 <__i2b>:
 200a758:	defffd04 	addi	sp,sp,-12
 200a75c:	dc000015 	stw	r16,0(sp)
 200a760:	04000044 	movi	r16,1
 200a764:	dc800115 	stw	r18,4(sp)
 200a768:	2825883a 	mov	r18,r5
 200a76c:	800b883a 	mov	r5,r16
 200a770:	dfc00215 	stw	ra,8(sp)
 200a774:	2009ff40 	call	2009ff4 <_Balloc>
 200a778:	14000415 	stw	r16,16(r2)
 200a77c:	14800515 	stw	r18,20(r2)
 200a780:	dfc00217 	ldw	ra,8(sp)
 200a784:	dc800117 	ldw	r18,4(sp)
 200a788:	dc000017 	ldw	r16,0(sp)
 200a78c:	dec00304 	addi	sp,sp,12
 200a790:	f800283a 	ret

0200a794 <__multadd>:
 200a794:	defff604 	addi	sp,sp,-40
 200a798:	dd800615 	stw	r22,24(sp)
 200a79c:	2d800417 	ldw	r22,16(r5)
 200a7a0:	df000815 	stw	fp,32(sp)
 200a7a4:	ddc00715 	stw	r23,28(sp)
 200a7a8:	dd400515 	stw	r21,20(sp)
 200a7ac:	dd000415 	stw	r20,16(sp)
 200a7b0:	dcc00315 	stw	r19,12(sp)
 200a7b4:	dc800215 	stw	r18,8(sp)
 200a7b8:	dfc00915 	stw	ra,36(sp)
 200a7bc:	dc400115 	stw	r17,4(sp)
 200a7c0:	dc000015 	stw	r16,0(sp)
 200a7c4:	282f883a 	mov	r23,r5
 200a7c8:	2039883a 	mov	fp,r4
 200a7cc:	302b883a 	mov	r21,r6
 200a7d0:	3829883a 	mov	r20,r7
 200a7d4:	2c800504 	addi	r18,r5,20
 200a7d8:	0027883a 	mov	r19,zero
 200a7dc:	94400017 	ldw	r17,0(r18)
 200a7e0:	a80b883a 	mov	r5,r21
 200a7e4:	9cc00044 	addi	r19,r19,1
 200a7e8:	893fffcc 	andi	r4,r17,65535
 200a7ec:	2003b380 	call	2003b38 <__mulsi3>
 200a7f0:	8808d43a 	srli	r4,r17,16
 200a7f4:	1521883a 	add	r16,r2,r20
 200a7f8:	a80b883a 	mov	r5,r21
 200a7fc:	2003b380 	call	2003b38 <__mulsi3>
 200a800:	8008d43a 	srli	r4,r16,16
 200a804:	843fffcc 	andi	r16,r16,65535
 200a808:	1105883a 	add	r2,r2,r4
 200a80c:	1006943a 	slli	r3,r2,16
 200a810:	1028d43a 	srli	r20,r2,16
 200a814:	1c07883a 	add	r3,r3,r16
 200a818:	90c00015 	stw	r3,0(r18)
 200a81c:	94800104 	addi	r18,r18,4
 200a820:	9dbfee16 	blt	r19,r22,200a7dc <__multadd+0x48>
 200a824:	a0000826 	beq	r20,zero,200a848 <__multadd+0xb4>
 200a828:	b8800217 	ldw	r2,8(r23)
 200a82c:	b080130e 	bge	r22,r2,200a87c <__multadd+0xe8>
 200a830:	b585883a 	add	r2,r22,r22
 200a834:	1085883a 	add	r2,r2,r2
 200a838:	15c5883a 	add	r2,r2,r23
 200a83c:	b0c00044 	addi	r3,r22,1
 200a840:	15000515 	stw	r20,20(r2)
 200a844:	b8c00415 	stw	r3,16(r23)
 200a848:	b805883a 	mov	r2,r23
 200a84c:	dfc00917 	ldw	ra,36(sp)
 200a850:	df000817 	ldw	fp,32(sp)
 200a854:	ddc00717 	ldw	r23,28(sp)
 200a858:	dd800617 	ldw	r22,24(sp)
 200a85c:	dd400517 	ldw	r21,20(sp)
 200a860:	dd000417 	ldw	r20,16(sp)
 200a864:	dcc00317 	ldw	r19,12(sp)
 200a868:	dc800217 	ldw	r18,8(sp)
 200a86c:	dc400117 	ldw	r17,4(sp)
 200a870:	dc000017 	ldw	r16,0(sp)
 200a874:	dec00a04 	addi	sp,sp,40
 200a878:	f800283a 	ret
 200a87c:	b9400117 	ldw	r5,4(r23)
 200a880:	e009883a 	mov	r4,fp
 200a884:	29400044 	addi	r5,r5,1
 200a888:	2009ff40 	call	2009ff4 <_Balloc>
 200a88c:	b9800417 	ldw	r6,16(r23)
 200a890:	b9400304 	addi	r5,r23,12
 200a894:	11000304 	addi	r4,r2,12
 200a898:	318d883a 	add	r6,r6,r6
 200a89c:	318d883a 	add	r6,r6,r6
 200a8a0:	31800204 	addi	r6,r6,8
 200a8a4:	1023883a 	mov	r17,r2
 200a8a8:	200985c0 	call	200985c <memcpy>
 200a8ac:	b80b883a 	mov	r5,r23
 200a8b0:	e009883a 	mov	r4,fp
 200a8b4:	2009a740 	call	2009a74 <_Bfree>
 200a8b8:	882f883a 	mov	r23,r17
 200a8bc:	003fdc06 	br	200a830 <__multadd+0x9c>

0200a8c0 <__pow5mult>:
 200a8c0:	defffa04 	addi	sp,sp,-24
 200a8c4:	308000cc 	andi	r2,r6,3
 200a8c8:	dd000415 	stw	r20,16(sp)
 200a8cc:	dcc00315 	stw	r19,12(sp)
 200a8d0:	dc000015 	stw	r16,0(sp)
 200a8d4:	dfc00515 	stw	ra,20(sp)
 200a8d8:	dc800215 	stw	r18,8(sp)
 200a8dc:	dc400115 	stw	r17,4(sp)
 200a8e0:	3021883a 	mov	r16,r6
 200a8e4:	2027883a 	mov	r19,r4
 200a8e8:	2829883a 	mov	r20,r5
 200a8ec:	10002b1e 	bne	r2,zero,200a99c <__pow5mult+0xdc>
 200a8f0:	8025d0ba 	srai	r18,r16,2
 200a8f4:	90001b26 	beq	r18,zero,200a964 <__pow5mult+0xa4>
 200a8f8:	9c001217 	ldw	r16,72(r19)
 200a8fc:	8000081e 	bne	r16,zero,200a920 <__pow5mult+0x60>
 200a900:	00003006 	br	200a9c4 <__pow5mult+0x104>
 200a904:	800b883a 	mov	r5,r16
 200a908:	800d883a 	mov	r6,r16
 200a90c:	9809883a 	mov	r4,r19
 200a910:	90001426 	beq	r18,zero,200a964 <__pow5mult+0xa4>
 200a914:	80800017 	ldw	r2,0(r16)
 200a918:	10001b26 	beq	r2,zero,200a988 <__pow5mult+0xc8>
 200a91c:	1021883a 	mov	r16,r2
 200a920:	9080004c 	andi	r2,r18,1
 200a924:	1005003a 	cmpeq	r2,r2,zero
 200a928:	9025d07a 	srai	r18,r18,1
 200a92c:	800d883a 	mov	r6,r16
 200a930:	9809883a 	mov	r4,r19
 200a934:	a00b883a 	mov	r5,r20
 200a938:	103ff21e 	bne	r2,zero,200a904 <__pow5mult+0x44>
 200a93c:	200a5040 	call	200a504 <__multiply>
 200a940:	a00b883a 	mov	r5,r20
 200a944:	9809883a 	mov	r4,r19
 200a948:	1023883a 	mov	r17,r2
 200a94c:	2009a740 	call	2009a74 <_Bfree>
 200a950:	8829883a 	mov	r20,r17
 200a954:	800b883a 	mov	r5,r16
 200a958:	800d883a 	mov	r6,r16
 200a95c:	9809883a 	mov	r4,r19
 200a960:	903fec1e 	bne	r18,zero,200a914 <__pow5mult+0x54>
 200a964:	a005883a 	mov	r2,r20
 200a968:	dfc00517 	ldw	ra,20(sp)
 200a96c:	dd000417 	ldw	r20,16(sp)
 200a970:	dcc00317 	ldw	r19,12(sp)
 200a974:	dc800217 	ldw	r18,8(sp)
 200a978:	dc400117 	ldw	r17,4(sp)
 200a97c:	dc000017 	ldw	r16,0(sp)
 200a980:	dec00604 	addi	sp,sp,24
 200a984:	f800283a 	ret
 200a988:	200a5040 	call	200a504 <__multiply>
 200a98c:	80800015 	stw	r2,0(r16)
 200a990:	1021883a 	mov	r16,r2
 200a994:	10000015 	stw	zero,0(r2)
 200a998:	003fe106 	br	200a920 <__pow5mult+0x60>
 200a99c:	1085883a 	add	r2,r2,r2
 200a9a0:	00c08074 	movhi	r3,513
 200a9a4:	18c2e604 	addi	r3,r3,2968
 200a9a8:	1085883a 	add	r2,r2,r2
 200a9ac:	10c5883a 	add	r2,r2,r3
 200a9b0:	11bfff17 	ldw	r6,-4(r2)
 200a9b4:	000f883a 	mov	r7,zero
 200a9b8:	200a7940 	call	200a794 <__multadd>
 200a9bc:	1029883a 	mov	r20,r2
 200a9c0:	003fcb06 	br	200a8f0 <__pow5mult+0x30>
 200a9c4:	9809883a 	mov	r4,r19
 200a9c8:	01409c44 	movi	r5,625
 200a9cc:	200a7580 	call	200a758 <__i2b>
 200a9d0:	98801215 	stw	r2,72(r19)
 200a9d4:	1021883a 	mov	r16,r2
 200a9d8:	10000015 	stw	zero,0(r2)
 200a9dc:	003fd006 	br	200a920 <__pow5mult+0x60>

0200a9e0 <__s2b>:
 200a9e0:	defff904 	addi	sp,sp,-28
 200a9e4:	dcc00315 	stw	r19,12(sp)
 200a9e8:	dc800215 	stw	r18,8(sp)
 200a9ec:	2827883a 	mov	r19,r5
 200a9f0:	2025883a 	mov	r18,r4
 200a9f4:	01400244 	movi	r5,9
 200a9f8:	39000204 	addi	r4,r7,8
 200a9fc:	dd000415 	stw	r20,16(sp)
 200aa00:	dc400115 	stw	r17,4(sp)
 200aa04:	dfc00615 	stw	ra,24(sp)
 200aa08:	dd400515 	stw	r21,20(sp)
 200aa0c:	dc000015 	stw	r16,0(sp)
 200aa10:	3829883a 	mov	r20,r7
 200aa14:	3023883a 	mov	r17,r6
 200aa18:	2003a680 	call	2003a68 <__divsi3>
 200aa1c:	00c00044 	movi	r3,1
 200aa20:	1880350e 	bge	r3,r2,200aaf8 <__s2b+0x118>
 200aa24:	000b883a 	mov	r5,zero
 200aa28:	18c7883a 	add	r3,r3,r3
 200aa2c:	29400044 	addi	r5,r5,1
 200aa30:	18bffd16 	blt	r3,r2,200aa28 <__s2b+0x48>
 200aa34:	9009883a 	mov	r4,r18
 200aa38:	2009ff40 	call	2009ff4 <_Balloc>
 200aa3c:	1011883a 	mov	r8,r2
 200aa40:	d8800717 	ldw	r2,28(sp)
 200aa44:	00c00044 	movi	r3,1
 200aa48:	01800244 	movi	r6,9
 200aa4c:	40800515 	stw	r2,20(r8)
 200aa50:	40c00415 	stw	r3,16(r8)
 200aa54:	3440260e 	bge	r6,r17,200aaf0 <__s2b+0x110>
 200aa58:	3021883a 	mov	r16,r6
 200aa5c:	99ab883a 	add	r21,r19,r6
 200aa60:	9c05883a 	add	r2,r19,r16
 200aa64:	11c00007 	ldb	r7,0(r2)
 200aa68:	400b883a 	mov	r5,r8
 200aa6c:	9009883a 	mov	r4,r18
 200aa70:	39fff404 	addi	r7,r7,-48
 200aa74:	01800284 	movi	r6,10
 200aa78:	200a7940 	call	200a794 <__multadd>
 200aa7c:	84000044 	addi	r16,r16,1
 200aa80:	1011883a 	mov	r8,r2
 200aa84:	8c3ff61e 	bne	r17,r16,200aa60 <__s2b+0x80>
 200aa88:	ac45883a 	add	r2,r21,r17
 200aa8c:	117ffe04 	addi	r5,r2,-8
 200aa90:	880d883a 	mov	r6,r17
 200aa94:	35000c0e 	bge	r6,r20,200aac8 <__s2b+0xe8>
 200aa98:	a185c83a 	sub	r2,r20,r6
 200aa9c:	2821883a 	mov	r16,r5
 200aaa0:	28a3883a 	add	r17,r5,r2
 200aaa4:	81c00007 	ldb	r7,0(r16)
 200aaa8:	400b883a 	mov	r5,r8
 200aaac:	9009883a 	mov	r4,r18
 200aab0:	39fff404 	addi	r7,r7,-48
 200aab4:	01800284 	movi	r6,10
 200aab8:	200a7940 	call	200a794 <__multadd>
 200aabc:	84000044 	addi	r16,r16,1
 200aac0:	1011883a 	mov	r8,r2
 200aac4:	847ff71e 	bne	r16,r17,200aaa4 <__s2b+0xc4>
 200aac8:	4005883a 	mov	r2,r8
 200aacc:	dfc00617 	ldw	ra,24(sp)
 200aad0:	dd400517 	ldw	r21,20(sp)
 200aad4:	dd000417 	ldw	r20,16(sp)
 200aad8:	dcc00317 	ldw	r19,12(sp)
 200aadc:	dc800217 	ldw	r18,8(sp)
 200aae0:	dc400117 	ldw	r17,4(sp)
 200aae4:	dc000017 	ldw	r16,0(sp)
 200aae8:	dec00704 	addi	sp,sp,28
 200aaec:	f800283a 	ret
 200aaf0:	99400284 	addi	r5,r19,10
 200aaf4:	003fe706 	br	200aa94 <__s2b+0xb4>
 200aaf8:	000b883a 	mov	r5,zero
 200aafc:	003fcd06 	br	200aa34 <__s2b+0x54>

0200ab00 <_realloc_r>:
 200ab00:	defff404 	addi	sp,sp,-48
 200ab04:	dd800815 	stw	r22,32(sp)
 200ab08:	dc800415 	stw	r18,16(sp)
 200ab0c:	dc400315 	stw	r17,12(sp)
 200ab10:	dfc00b15 	stw	ra,44(sp)
 200ab14:	df000a15 	stw	fp,40(sp)
 200ab18:	ddc00915 	stw	r23,36(sp)
 200ab1c:	dd400715 	stw	r21,28(sp)
 200ab20:	dd000615 	stw	r20,24(sp)
 200ab24:	dcc00515 	stw	r19,20(sp)
 200ab28:	dc000215 	stw	r16,8(sp)
 200ab2c:	2825883a 	mov	r18,r5
 200ab30:	3023883a 	mov	r17,r6
 200ab34:	202d883a 	mov	r22,r4
 200ab38:	2800c926 	beq	r5,zero,200ae60 <_realloc_r+0x360>
 200ab3c:	200d5d00 	call	200d5d0 <__malloc_lock>
 200ab40:	943ffe04 	addi	r16,r18,-8
 200ab44:	88c002c4 	addi	r3,r17,11
 200ab48:	00800584 	movi	r2,22
 200ab4c:	82000117 	ldw	r8,4(r16)
 200ab50:	10c01b2e 	bgeu	r2,r3,200abc0 <_realloc_r+0xc0>
 200ab54:	00bffe04 	movi	r2,-8
 200ab58:	188e703a 	and	r7,r3,r2
 200ab5c:	3839883a 	mov	fp,r7
 200ab60:	38001a16 	blt	r7,zero,200abcc <_realloc_r+0xcc>
 200ab64:	e4401936 	bltu	fp,r17,200abcc <_realloc_r+0xcc>
 200ab68:	013fff04 	movi	r4,-4
 200ab6c:	4126703a 	and	r19,r8,r4
 200ab70:	99c02616 	blt	r19,r7,200ac0c <_realloc_r+0x10c>
 200ab74:	802b883a 	mov	r21,r16
 200ab78:	9829883a 	mov	r20,r19
 200ab7c:	84000204 	addi	r16,r16,8
 200ab80:	a80f883a 	mov	r7,r21
 200ab84:	a70dc83a 	sub	r6,r20,fp
 200ab88:	008003c4 	movi	r2,15
 200ab8c:	1180c136 	bltu	r2,r6,200ae94 <_realloc_r+0x394>
 200ab90:	38800117 	ldw	r2,4(r7)
 200ab94:	a549883a 	add	r4,r20,r21
 200ab98:	1080004c 	andi	r2,r2,1
 200ab9c:	a084b03a 	or	r2,r20,r2
 200aba0:	38800115 	stw	r2,4(r7)
 200aba4:	20c00117 	ldw	r3,4(r4)
 200aba8:	18c00054 	ori	r3,r3,1
 200abac:	20c00115 	stw	r3,4(r4)
 200abb0:	b009883a 	mov	r4,r22
 200abb4:	200d5f00 	call	200d5f0 <__malloc_unlock>
 200abb8:	8023883a 	mov	r17,r16
 200abbc:	00000606 	br	200abd8 <_realloc_r+0xd8>
 200abc0:	01c00404 	movi	r7,16
 200abc4:	3839883a 	mov	fp,r7
 200abc8:	e47fe72e 	bgeu	fp,r17,200ab68 <_realloc_r+0x68>
 200abcc:	00800304 	movi	r2,12
 200abd0:	0023883a 	mov	r17,zero
 200abd4:	b0800015 	stw	r2,0(r22)
 200abd8:	8805883a 	mov	r2,r17
 200abdc:	dfc00b17 	ldw	ra,44(sp)
 200abe0:	df000a17 	ldw	fp,40(sp)
 200abe4:	ddc00917 	ldw	r23,36(sp)
 200abe8:	dd800817 	ldw	r22,32(sp)
 200abec:	dd400717 	ldw	r21,28(sp)
 200abf0:	dd000617 	ldw	r20,24(sp)
 200abf4:	dcc00517 	ldw	r19,20(sp)
 200abf8:	dc800417 	ldw	r18,16(sp)
 200abfc:	dc400317 	ldw	r17,12(sp)
 200ac00:	dc000217 	ldw	r16,8(sp)
 200ac04:	dec00c04 	addi	sp,sp,48
 200ac08:	f800283a 	ret
 200ac0c:	00808074 	movhi	r2,513
 200ac10:	1082fa04 	addi	r2,r2,3048
 200ac14:	12400217 	ldw	r9,8(r2)
 200ac18:	84cd883a 	add	r6,r16,r19
 200ac1c:	802b883a 	mov	r21,r16
 200ac20:	3240b926 	beq	r6,r9,200af08 <_realloc_r+0x408>
 200ac24:	31400117 	ldw	r5,4(r6)
 200ac28:	00bfff84 	movi	r2,-2
 200ac2c:	2884703a 	and	r2,r5,r2
 200ac30:	1185883a 	add	r2,r2,r6
 200ac34:	10c00117 	ldw	r3,4(r2)
 200ac38:	18c0004c 	andi	r3,r3,1
 200ac3c:	1807003a 	cmpeq	r3,r3,zero
 200ac40:	1800a326 	beq	r3,zero,200aed0 <_realloc_r+0x3d0>
 200ac44:	2908703a 	and	r4,r5,r4
 200ac48:	9929883a 	add	r20,r19,r4
 200ac4c:	a1c0a30e 	bge	r20,r7,200aedc <_realloc_r+0x3dc>
 200ac50:	4080004c 	andi	r2,r8,1
 200ac54:	1000551e 	bne	r2,zero,200adac <_realloc_r+0x2ac>
 200ac58:	80800017 	ldw	r2,0(r16)
 200ac5c:	80afc83a 	sub	r23,r16,r2
 200ac60:	b8c00117 	ldw	r3,4(r23)
 200ac64:	00bfff04 	movi	r2,-4
 200ac68:	1884703a 	and	r2,r3,r2
 200ac6c:	30002e26 	beq	r6,zero,200ad28 <_realloc_r+0x228>
 200ac70:	3240b926 	beq	r6,r9,200af58 <_realloc_r+0x458>
 200ac74:	98a9883a 	add	r20,r19,r2
 200ac78:	2509883a 	add	r4,r4,r20
 200ac7c:	d9000015 	stw	r4,0(sp)
 200ac80:	21c02a16 	blt	r4,r7,200ad2c <_realloc_r+0x22c>
 200ac84:	30800317 	ldw	r2,12(r6)
 200ac88:	30c00217 	ldw	r3,8(r6)
 200ac8c:	01400904 	movi	r5,36
 200ac90:	99bfff04 	addi	r6,r19,-4
 200ac94:	18800315 	stw	r2,12(r3)
 200ac98:	10c00215 	stw	r3,8(r2)
 200ac9c:	b9000317 	ldw	r4,12(r23)
 200aca0:	b8800217 	ldw	r2,8(r23)
 200aca4:	b82b883a 	mov	r21,r23
 200aca8:	bc000204 	addi	r16,r23,8
 200acac:	20800215 	stw	r2,8(r4)
 200acb0:	11000315 	stw	r4,12(r2)
 200acb4:	2980e436 	bltu	r5,r6,200b048 <_realloc_r+0x548>
 200acb8:	008004c4 	movi	r2,19
 200acbc:	9009883a 	mov	r4,r18
 200acc0:	8011883a 	mov	r8,r16
 200acc4:	11800f2e 	bgeu	r2,r6,200ad04 <_realloc_r+0x204>
 200acc8:	90800017 	ldw	r2,0(r18)
 200accc:	ba000404 	addi	r8,r23,16
 200acd0:	91000204 	addi	r4,r18,8
 200acd4:	b8800215 	stw	r2,8(r23)
 200acd8:	90c00117 	ldw	r3,4(r18)
 200acdc:	008006c4 	movi	r2,27
 200ace0:	b8c00315 	stw	r3,12(r23)
 200ace4:	1180072e 	bgeu	r2,r6,200ad04 <_realloc_r+0x204>
 200ace8:	90c00217 	ldw	r3,8(r18)
 200acec:	ba000604 	addi	r8,r23,24
 200acf0:	91000404 	addi	r4,r18,16
 200acf4:	b8c00415 	stw	r3,16(r23)
 200acf8:	90800317 	ldw	r2,12(r18)
 200acfc:	b8800515 	stw	r2,20(r23)
 200ad00:	3140e726 	beq	r6,r5,200b0a0 <_realloc_r+0x5a0>
 200ad04:	20800017 	ldw	r2,0(r4)
 200ad08:	dd000017 	ldw	r20,0(sp)
 200ad0c:	b80f883a 	mov	r7,r23
 200ad10:	40800015 	stw	r2,0(r8)
 200ad14:	20c00117 	ldw	r3,4(r4)
 200ad18:	40c00115 	stw	r3,4(r8)
 200ad1c:	20800217 	ldw	r2,8(r4)
 200ad20:	40800215 	stw	r2,8(r8)
 200ad24:	003f9706 	br	200ab84 <_realloc_r+0x84>
 200ad28:	98a9883a 	add	r20,r19,r2
 200ad2c:	a1c01f16 	blt	r20,r7,200adac <_realloc_r+0x2ac>
 200ad30:	b8c00317 	ldw	r3,12(r23)
 200ad34:	b8800217 	ldw	r2,8(r23)
 200ad38:	99bfff04 	addi	r6,r19,-4
 200ad3c:	01400904 	movi	r5,36
 200ad40:	b82b883a 	mov	r21,r23
 200ad44:	18800215 	stw	r2,8(r3)
 200ad48:	10c00315 	stw	r3,12(r2)
 200ad4c:	bc000204 	addi	r16,r23,8
 200ad50:	2980c336 	bltu	r5,r6,200b060 <_realloc_r+0x560>
 200ad54:	008004c4 	movi	r2,19
 200ad58:	9009883a 	mov	r4,r18
 200ad5c:	8011883a 	mov	r8,r16
 200ad60:	11800f2e 	bgeu	r2,r6,200ada0 <_realloc_r+0x2a0>
 200ad64:	90800017 	ldw	r2,0(r18)
 200ad68:	ba000404 	addi	r8,r23,16
 200ad6c:	91000204 	addi	r4,r18,8
 200ad70:	b8800215 	stw	r2,8(r23)
 200ad74:	90c00117 	ldw	r3,4(r18)
 200ad78:	008006c4 	movi	r2,27
 200ad7c:	b8c00315 	stw	r3,12(r23)
 200ad80:	1180072e 	bgeu	r2,r6,200ada0 <_realloc_r+0x2a0>
 200ad84:	90c00217 	ldw	r3,8(r18)
 200ad88:	ba000604 	addi	r8,r23,24
 200ad8c:	91000404 	addi	r4,r18,16
 200ad90:	b8c00415 	stw	r3,16(r23)
 200ad94:	90800317 	ldw	r2,12(r18)
 200ad98:	b8800515 	stw	r2,20(r23)
 200ad9c:	3140c726 	beq	r6,r5,200b0bc <_realloc_r+0x5bc>
 200ada0:	20800017 	ldw	r2,0(r4)
 200ada4:	b80f883a 	mov	r7,r23
 200ada8:	003fd906 	br	200ad10 <_realloc_r+0x210>
 200adac:	880b883a 	mov	r5,r17
 200adb0:	b009883a 	mov	r4,r22
 200adb4:	20043dc0 	call	20043dc <_malloc_r>
 200adb8:	1023883a 	mov	r17,r2
 200adbc:	10002526 	beq	r2,zero,200ae54 <_realloc_r+0x354>
 200adc0:	80800117 	ldw	r2,4(r16)
 200adc4:	00ffff84 	movi	r3,-2
 200adc8:	893ffe04 	addi	r4,r17,-8
 200adcc:	10c4703a 	and	r2,r2,r3
 200add0:	8085883a 	add	r2,r16,r2
 200add4:	20809526 	beq	r4,r2,200b02c <_realloc_r+0x52c>
 200add8:	99bfff04 	addi	r6,r19,-4
 200addc:	01c00904 	movi	r7,36
 200ade0:	39804536 	bltu	r7,r6,200aef8 <_realloc_r+0x3f8>
 200ade4:	008004c4 	movi	r2,19
 200ade8:	9009883a 	mov	r4,r18
 200adec:	880b883a 	mov	r5,r17
 200adf0:	11800f2e 	bgeu	r2,r6,200ae30 <_realloc_r+0x330>
 200adf4:	90800017 	ldw	r2,0(r18)
 200adf8:	89400204 	addi	r5,r17,8
 200adfc:	91000204 	addi	r4,r18,8
 200ae00:	88800015 	stw	r2,0(r17)
 200ae04:	90c00117 	ldw	r3,4(r18)
 200ae08:	008006c4 	movi	r2,27
 200ae0c:	88c00115 	stw	r3,4(r17)
 200ae10:	1180072e 	bgeu	r2,r6,200ae30 <_realloc_r+0x330>
 200ae14:	90c00217 	ldw	r3,8(r18)
 200ae18:	89400404 	addi	r5,r17,16
 200ae1c:	91000404 	addi	r4,r18,16
 200ae20:	88c00215 	stw	r3,8(r17)
 200ae24:	90800317 	ldw	r2,12(r18)
 200ae28:	88800315 	stw	r2,12(r17)
 200ae2c:	31c09126 	beq	r6,r7,200b074 <_realloc_r+0x574>
 200ae30:	20800017 	ldw	r2,0(r4)
 200ae34:	28800015 	stw	r2,0(r5)
 200ae38:	20c00117 	ldw	r3,4(r4)
 200ae3c:	28c00115 	stw	r3,4(r5)
 200ae40:	20800217 	ldw	r2,8(r4)
 200ae44:	28800215 	stw	r2,8(r5)
 200ae48:	900b883a 	mov	r5,r18
 200ae4c:	b009883a 	mov	r4,r22
 200ae50:	2008bf00 	call	2008bf0 <_free_r>
 200ae54:	b009883a 	mov	r4,r22
 200ae58:	200d5f00 	call	200d5f0 <__malloc_unlock>
 200ae5c:	003f5e06 	br	200abd8 <_realloc_r+0xd8>
 200ae60:	300b883a 	mov	r5,r6
 200ae64:	dfc00b17 	ldw	ra,44(sp)
 200ae68:	df000a17 	ldw	fp,40(sp)
 200ae6c:	ddc00917 	ldw	r23,36(sp)
 200ae70:	dd800817 	ldw	r22,32(sp)
 200ae74:	dd400717 	ldw	r21,28(sp)
 200ae78:	dd000617 	ldw	r20,24(sp)
 200ae7c:	dcc00517 	ldw	r19,20(sp)
 200ae80:	dc800417 	ldw	r18,16(sp)
 200ae84:	dc400317 	ldw	r17,12(sp)
 200ae88:	dc000217 	ldw	r16,8(sp)
 200ae8c:	dec00c04 	addi	sp,sp,48
 200ae90:	20043dc1 	jmpi	20043dc <_malloc_r>
 200ae94:	38800117 	ldw	r2,4(r7)
 200ae98:	e54b883a 	add	r5,fp,r21
 200ae9c:	31000054 	ori	r4,r6,1
 200aea0:	1080004c 	andi	r2,r2,1
 200aea4:	1704b03a 	or	r2,r2,fp
 200aea8:	38800115 	stw	r2,4(r7)
 200aeac:	29000115 	stw	r4,4(r5)
 200aeb0:	2987883a 	add	r3,r5,r6
 200aeb4:	18800117 	ldw	r2,4(r3)
 200aeb8:	29400204 	addi	r5,r5,8
 200aebc:	b009883a 	mov	r4,r22
 200aec0:	10800054 	ori	r2,r2,1
 200aec4:	18800115 	stw	r2,4(r3)
 200aec8:	2008bf00 	call	2008bf0 <_free_r>
 200aecc:	003f3806 	br	200abb0 <_realloc_r+0xb0>
 200aed0:	000d883a 	mov	r6,zero
 200aed4:	0009883a 	mov	r4,zero
 200aed8:	003f5d06 	br	200ac50 <_realloc_r+0x150>
 200aedc:	30c00217 	ldw	r3,8(r6)
 200aee0:	30800317 	ldw	r2,12(r6)
 200aee4:	800f883a 	mov	r7,r16
 200aee8:	84000204 	addi	r16,r16,8
 200aeec:	10c00215 	stw	r3,8(r2)
 200aef0:	18800315 	stw	r2,12(r3)
 200aef4:	003f2306 	br	200ab84 <_realloc_r+0x84>
 200aef8:	8809883a 	mov	r4,r17
 200aefc:	900b883a 	mov	r5,r18
 200af00:	20098fc0 	call	20098fc <memmove>
 200af04:	003fd006 	br	200ae48 <_realloc_r+0x348>
 200af08:	30800117 	ldw	r2,4(r6)
 200af0c:	e0c00404 	addi	r3,fp,16
 200af10:	1108703a 	and	r4,r2,r4
 200af14:	9905883a 	add	r2,r19,r4
 200af18:	10ff4d16 	blt	r2,r3,200ac50 <_realloc_r+0x150>
 200af1c:	1705c83a 	sub	r2,r2,fp
 200af20:	870b883a 	add	r5,r16,fp
 200af24:	10800054 	ori	r2,r2,1
 200af28:	28800115 	stw	r2,4(r5)
 200af2c:	80c00117 	ldw	r3,4(r16)
 200af30:	00808074 	movhi	r2,513
 200af34:	1082fa04 	addi	r2,r2,3048
 200af38:	b009883a 	mov	r4,r22
 200af3c:	18c0004c 	andi	r3,r3,1
 200af40:	e0c6b03a 	or	r3,fp,r3
 200af44:	11400215 	stw	r5,8(r2)
 200af48:	80c00115 	stw	r3,4(r16)
 200af4c:	200d5f00 	call	200d5f0 <__malloc_unlock>
 200af50:	84400204 	addi	r17,r16,8
 200af54:	003f2006 	br	200abd8 <_realloc_r+0xd8>
 200af58:	98a9883a 	add	r20,r19,r2
 200af5c:	2509883a 	add	r4,r4,r20
 200af60:	e0800404 	addi	r2,fp,16
 200af64:	d9000115 	stw	r4,4(sp)
 200af68:	20bf7016 	blt	r4,r2,200ad2c <_realloc_r+0x22c>
 200af6c:	b8c00317 	ldw	r3,12(r23)
 200af70:	b8800217 	ldw	r2,8(r23)
 200af74:	99bfff04 	addi	r6,r19,-4
 200af78:	01400904 	movi	r5,36
 200af7c:	18800215 	stw	r2,8(r3)
 200af80:	10c00315 	stw	r3,12(r2)
 200af84:	bc400204 	addi	r17,r23,8
 200af88:	29804136 	bltu	r5,r6,200b090 <_realloc_r+0x590>
 200af8c:	008004c4 	movi	r2,19
 200af90:	9009883a 	mov	r4,r18
 200af94:	880f883a 	mov	r7,r17
 200af98:	11800f2e 	bgeu	r2,r6,200afd8 <_realloc_r+0x4d8>
 200af9c:	90800017 	ldw	r2,0(r18)
 200afa0:	b9c00404 	addi	r7,r23,16
 200afa4:	91000204 	addi	r4,r18,8
 200afa8:	b8800215 	stw	r2,8(r23)
 200afac:	90c00117 	ldw	r3,4(r18)
 200afb0:	008006c4 	movi	r2,27
 200afb4:	b8c00315 	stw	r3,12(r23)
 200afb8:	1180072e 	bgeu	r2,r6,200afd8 <_realloc_r+0x4d8>
 200afbc:	90c00217 	ldw	r3,8(r18)
 200afc0:	b9c00604 	addi	r7,r23,24
 200afc4:	91000404 	addi	r4,r18,16
 200afc8:	b8c00415 	stw	r3,16(r23)
 200afcc:	90800317 	ldw	r2,12(r18)
 200afd0:	b8800515 	stw	r2,20(r23)
 200afd4:	31404026 	beq	r6,r5,200b0d8 <_realloc_r+0x5d8>
 200afd8:	20800017 	ldw	r2,0(r4)
 200afdc:	38800015 	stw	r2,0(r7)
 200afe0:	20c00117 	ldw	r3,4(r4)
 200afe4:	38c00115 	stw	r3,4(r7)
 200afe8:	20800217 	ldw	r2,8(r4)
 200afec:	38800215 	stw	r2,8(r7)
 200aff0:	d8c00117 	ldw	r3,4(sp)
 200aff4:	bf0b883a 	add	r5,r23,fp
 200aff8:	b009883a 	mov	r4,r22
 200affc:	1f05c83a 	sub	r2,r3,fp
 200b000:	10800054 	ori	r2,r2,1
 200b004:	28800115 	stw	r2,4(r5)
 200b008:	b8c00117 	ldw	r3,4(r23)
 200b00c:	00808074 	movhi	r2,513
 200b010:	1082fa04 	addi	r2,r2,3048
 200b014:	11400215 	stw	r5,8(r2)
 200b018:	18c0004c 	andi	r3,r3,1
 200b01c:	e0c6b03a 	or	r3,fp,r3
 200b020:	b8c00115 	stw	r3,4(r23)
 200b024:	200d5f00 	call	200d5f0 <__malloc_unlock>
 200b028:	003eeb06 	br	200abd8 <_realloc_r+0xd8>
 200b02c:	20800117 	ldw	r2,4(r4)
 200b030:	00ffff04 	movi	r3,-4
 200b034:	800f883a 	mov	r7,r16
 200b038:	10c4703a 	and	r2,r2,r3
 200b03c:	98a9883a 	add	r20,r19,r2
 200b040:	84000204 	addi	r16,r16,8
 200b044:	003ecf06 	br	200ab84 <_realloc_r+0x84>
 200b048:	900b883a 	mov	r5,r18
 200b04c:	8009883a 	mov	r4,r16
 200b050:	20098fc0 	call	20098fc <memmove>
 200b054:	dd000017 	ldw	r20,0(sp)
 200b058:	b80f883a 	mov	r7,r23
 200b05c:	003ec906 	br	200ab84 <_realloc_r+0x84>
 200b060:	900b883a 	mov	r5,r18
 200b064:	8009883a 	mov	r4,r16
 200b068:	20098fc0 	call	20098fc <memmove>
 200b06c:	b80f883a 	mov	r7,r23
 200b070:	003ec406 	br	200ab84 <_realloc_r+0x84>
 200b074:	90c00417 	ldw	r3,16(r18)
 200b078:	89400604 	addi	r5,r17,24
 200b07c:	91000604 	addi	r4,r18,24
 200b080:	88c00415 	stw	r3,16(r17)
 200b084:	90800517 	ldw	r2,20(r18)
 200b088:	88800515 	stw	r2,20(r17)
 200b08c:	003f6806 	br	200ae30 <_realloc_r+0x330>
 200b090:	900b883a 	mov	r5,r18
 200b094:	8809883a 	mov	r4,r17
 200b098:	20098fc0 	call	20098fc <memmove>
 200b09c:	003fd406 	br	200aff0 <_realloc_r+0x4f0>
 200b0a0:	90c00417 	ldw	r3,16(r18)
 200b0a4:	91000604 	addi	r4,r18,24
 200b0a8:	ba000804 	addi	r8,r23,32
 200b0ac:	b8c00615 	stw	r3,24(r23)
 200b0b0:	90800517 	ldw	r2,20(r18)
 200b0b4:	b8800715 	stw	r2,28(r23)
 200b0b8:	003f1206 	br	200ad04 <_realloc_r+0x204>
 200b0bc:	90c00417 	ldw	r3,16(r18)
 200b0c0:	91000604 	addi	r4,r18,24
 200b0c4:	ba000804 	addi	r8,r23,32
 200b0c8:	b8c00615 	stw	r3,24(r23)
 200b0cc:	90800517 	ldw	r2,20(r18)
 200b0d0:	b8800715 	stw	r2,28(r23)
 200b0d4:	003f3206 	br	200ada0 <_realloc_r+0x2a0>
 200b0d8:	90c00417 	ldw	r3,16(r18)
 200b0dc:	91000604 	addi	r4,r18,24
 200b0e0:	b9c00804 	addi	r7,r23,32
 200b0e4:	b8c00615 	stw	r3,24(r23)
 200b0e8:	90800517 	ldw	r2,20(r18)
 200b0ec:	b8800715 	stw	r2,28(r23)
 200b0f0:	003fb906 	br	200afd8 <_realloc_r+0x4d8>

0200b0f4 <__isinfd>:
 200b0f4:	200d883a 	mov	r6,r4
 200b0f8:	0109c83a 	sub	r4,zero,r4
 200b0fc:	2188b03a 	or	r4,r4,r6
 200b100:	2008d7fa 	srli	r4,r4,31
 200b104:	00a00034 	movhi	r2,32768
 200b108:	10bfffc4 	addi	r2,r2,-1
 200b10c:	1144703a 	and	r2,r2,r5
 200b110:	2088b03a 	or	r4,r4,r2
 200b114:	009ffc34 	movhi	r2,32752
 200b118:	1105c83a 	sub	r2,r2,r4
 200b11c:	0087c83a 	sub	r3,zero,r2
 200b120:	10c4b03a 	or	r2,r2,r3
 200b124:	1004d7fa 	srli	r2,r2,31
 200b128:	00c00044 	movi	r3,1
 200b12c:	1885c83a 	sub	r2,r3,r2
 200b130:	f800283a 	ret

0200b134 <__isnand>:
 200b134:	200d883a 	mov	r6,r4
 200b138:	0109c83a 	sub	r4,zero,r4
 200b13c:	2188b03a 	or	r4,r4,r6
 200b140:	2008d7fa 	srli	r4,r4,31
 200b144:	00a00034 	movhi	r2,32768
 200b148:	10bfffc4 	addi	r2,r2,-1
 200b14c:	1144703a 	and	r2,r2,r5
 200b150:	2088b03a 	or	r4,r4,r2
 200b154:	009ffc34 	movhi	r2,32752
 200b158:	1105c83a 	sub	r2,r2,r4
 200b15c:	1004d7fa 	srli	r2,r2,31
 200b160:	f800283a 	ret

0200b164 <__sclose>:
 200b164:	2940038f 	ldh	r5,14(r5)
 200b168:	200b4ac1 	jmpi	200b4ac <_close_r>

0200b16c <__sseek>:
 200b16c:	defffe04 	addi	sp,sp,-8
 200b170:	dc000015 	stw	r16,0(sp)
 200b174:	2821883a 	mov	r16,r5
 200b178:	2940038f 	ldh	r5,14(r5)
 200b17c:	dfc00115 	stw	ra,4(sp)
 200b180:	200b7240 	call	200b724 <_lseek_r>
 200b184:	1007883a 	mov	r3,r2
 200b188:	00bfffc4 	movi	r2,-1
 200b18c:	18800926 	beq	r3,r2,200b1b4 <__sseek+0x48>
 200b190:	8080030b 	ldhu	r2,12(r16)
 200b194:	80c01415 	stw	r3,80(r16)
 200b198:	10840014 	ori	r2,r2,4096
 200b19c:	8080030d 	sth	r2,12(r16)
 200b1a0:	1805883a 	mov	r2,r3
 200b1a4:	dfc00117 	ldw	ra,4(sp)
 200b1a8:	dc000017 	ldw	r16,0(sp)
 200b1ac:	dec00204 	addi	sp,sp,8
 200b1b0:	f800283a 	ret
 200b1b4:	8080030b 	ldhu	r2,12(r16)
 200b1b8:	10bbffcc 	andi	r2,r2,61439
 200b1bc:	8080030d 	sth	r2,12(r16)
 200b1c0:	1805883a 	mov	r2,r3
 200b1c4:	dfc00117 	ldw	ra,4(sp)
 200b1c8:	dc000017 	ldw	r16,0(sp)
 200b1cc:	dec00204 	addi	sp,sp,8
 200b1d0:	f800283a 	ret

0200b1d4 <__swrite>:
 200b1d4:	2880030b 	ldhu	r2,12(r5)
 200b1d8:	defffb04 	addi	sp,sp,-20
 200b1dc:	dcc00315 	stw	r19,12(sp)
 200b1e0:	1080400c 	andi	r2,r2,256
 200b1e4:	dc800215 	stw	r18,8(sp)
 200b1e8:	dc400115 	stw	r17,4(sp)
 200b1ec:	dc000015 	stw	r16,0(sp)
 200b1f0:	3027883a 	mov	r19,r6
 200b1f4:	3825883a 	mov	r18,r7
 200b1f8:	dfc00415 	stw	ra,16(sp)
 200b1fc:	2821883a 	mov	r16,r5
 200b200:	000d883a 	mov	r6,zero
 200b204:	01c00084 	movi	r7,2
 200b208:	2023883a 	mov	r17,r4
 200b20c:	10000226 	beq	r2,zero,200b218 <__swrite+0x44>
 200b210:	2940038f 	ldh	r5,14(r5)
 200b214:	200b7240 	call	200b724 <_lseek_r>
 200b218:	8080030b 	ldhu	r2,12(r16)
 200b21c:	8140038f 	ldh	r5,14(r16)
 200b220:	8809883a 	mov	r4,r17
 200b224:	10bbffcc 	andi	r2,r2,61439
 200b228:	980d883a 	mov	r6,r19
 200b22c:	900f883a 	mov	r7,r18
 200b230:	8080030d 	sth	r2,12(r16)
 200b234:	dfc00417 	ldw	ra,16(sp)
 200b238:	dcc00317 	ldw	r19,12(sp)
 200b23c:	dc800217 	ldw	r18,8(sp)
 200b240:	dc400117 	ldw	r17,4(sp)
 200b244:	dc000017 	ldw	r16,0(sp)
 200b248:	dec00504 	addi	sp,sp,20
 200b24c:	200b36c1 	jmpi	200b36c <_write_r>

0200b250 <__sread>:
 200b250:	defffe04 	addi	sp,sp,-8
 200b254:	dc000015 	stw	r16,0(sp)
 200b258:	2821883a 	mov	r16,r5
 200b25c:	2940038f 	ldh	r5,14(r5)
 200b260:	dfc00115 	stw	ra,4(sp)
 200b264:	200b79c0 	call	200b79c <_read_r>
 200b268:	1007883a 	mov	r3,r2
 200b26c:	10000816 	blt	r2,zero,200b290 <__sread+0x40>
 200b270:	80801417 	ldw	r2,80(r16)
 200b274:	10c5883a 	add	r2,r2,r3
 200b278:	80801415 	stw	r2,80(r16)
 200b27c:	1805883a 	mov	r2,r3
 200b280:	dfc00117 	ldw	ra,4(sp)
 200b284:	dc000017 	ldw	r16,0(sp)
 200b288:	dec00204 	addi	sp,sp,8
 200b28c:	f800283a 	ret
 200b290:	8080030b 	ldhu	r2,12(r16)
 200b294:	10bbffcc 	andi	r2,r2,61439
 200b298:	8080030d 	sth	r2,12(r16)
 200b29c:	1805883a 	mov	r2,r3
 200b2a0:	dfc00117 	ldw	ra,4(sp)
 200b2a4:	dc000017 	ldw	r16,0(sp)
 200b2a8:	dec00204 	addi	sp,sp,8
 200b2ac:	f800283a 	ret

0200b2b0 <strcmp>:
 200b2b0:	2144b03a 	or	r2,r4,r5
 200b2b4:	108000cc 	andi	r2,r2,3
 200b2b8:	10001d1e 	bne	r2,zero,200b330 <strcmp+0x80>
 200b2bc:	200f883a 	mov	r7,r4
 200b2c0:	28800017 	ldw	r2,0(r5)
 200b2c4:	21000017 	ldw	r4,0(r4)
 200b2c8:	280d883a 	mov	r6,r5
 200b2cc:	2080161e 	bne	r4,r2,200b328 <strcmp+0x78>
 200b2d0:	023fbff4 	movhi	r8,65279
 200b2d4:	423fbfc4 	addi	r8,r8,-257
 200b2d8:	2207883a 	add	r3,r4,r8
 200b2dc:	01602074 	movhi	r5,32897
 200b2e0:	29602004 	addi	r5,r5,-32640
 200b2e4:	1946703a 	and	r3,r3,r5
 200b2e8:	0104303a 	nor	r2,zero,r4
 200b2ec:	10c4703a 	and	r2,r2,r3
 200b2f0:	10001c1e 	bne	r2,zero,200b364 <strcmp+0xb4>
 200b2f4:	4013883a 	mov	r9,r8
 200b2f8:	2811883a 	mov	r8,r5
 200b2fc:	00000106 	br	200b304 <strcmp+0x54>
 200b300:	1800181e 	bne	r3,zero,200b364 <strcmp+0xb4>
 200b304:	39c00104 	addi	r7,r7,4
 200b308:	39000017 	ldw	r4,0(r7)
 200b30c:	31800104 	addi	r6,r6,4
 200b310:	31400017 	ldw	r5,0(r6)
 200b314:	2245883a 	add	r2,r4,r9
 200b318:	1204703a 	and	r2,r2,r8
 200b31c:	0106303a 	nor	r3,zero,r4
 200b320:	1886703a 	and	r3,r3,r2
 200b324:	217ff626 	beq	r4,r5,200b300 <strcmp+0x50>
 200b328:	3809883a 	mov	r4,r7
 200b32c:	300b883a 	mov	r5,r6
 200b330:	20c00007 	ldb	r3,0(r4)
 200b334:	1800051e 	bne	r3,zero,200b34c <strcmp+0x9c>
 200b338:	00000606 	br	200b354 <strcmp+0xa4>
 200b33c:	21000044 	addi	r4,r4,1
 200b340:	20c00007 	ldb	r3,0(r4)
 200b344:	29400044 	addi	r5,r5,1
 200b348:	18000226 	beq	r3,zero,200b354 <strcmp+0xa4>
 200b34c:	28800007 	ldb	r2,0(r5)
 200b350:	18bffa26 	beq	r3,r2,200b33c <strcmp+0x8c>
 200b354:	20c00003 	ldbu	r3,0(r4)
 200b358:	28800003 	ldbu	r2,0(r5)
 200b35c:	1885c83a 	sub	r2,r3,r2
 200b360:	f800283a 	ret
 200b364:	0005883a 	mov	r2,zero
 200b368:	f800283a 	ret

0200b36c <_write_r>:
 200b36c:	defffd04 	addi	sp,sp,-12
 200b370:	dc000015 	stw	r16,0(sp)
 200b374:	04008074 	movhi	r16,513
 200b378:	84089704 	addi	r16,r16,8796
 200b37c:	dc400115 	stw	r17,4(sp)
 200b380:	80000015 	stw	zero,0(r16)
 200b384:	2023883a 	mov	r17,r4
 200b388:	2809883a 	mov	r4,r5
 200b38c:	300b883a 	mov	r5,r6
 200b390:	380d883a 	mov	r6,r7
 200b394:	dfc00215 	stw	ra,8(sp)
 200b398:	200da9c0 	call	200da9c <write>
 200b39c:	1007883a 	mov	r3,r2
 200b3a0:	00bfffc4 	movi	r2,-1
 200b3a4:	18800626 	beq	r3,r2,200b3c0 <_write_r+0x54>
 200b3a8:	1805883a 	mov	r2,r3
 200b3ac:	dfc00217 	ldw	ra,8(sp)
 200b3b0:	dc400117 	ldw	r17,4(sp)
 200b3b4:	dc000017 	ldw	r16,0(sp)
 200b3b8:	dec00304 	addi	sp,sp,12
 200b3bc:	f800283a 	ret
 200b3c0:	80800017 	ldw	r2,0(r16)
 200b3c4:	103ff826 	beq	r2,zero,200b3a8 <_write_r+0x3c>
 200b3c8:	88800015 	stw	r2,0(r17)
 200b3cc:	1805883a 	mov	r2,r3
 200b3d0:	dfc00217 	ldw	ra,8(sp)
 200b3d4:	dc400117 	ldw	r17,4(sp)
 200b3d8:	dc000017 	ldw	r16,0(sp)
 200b3dc:	dec00304 	addi	sp,sp,12
 200b3e0:	f800283a 	ret

0200b3e4 <_calloc_r>:
 200b3e4:	defffe04 	addi	sp,sp,-8
 200b3e8:	dc400015 	stw	r17,0(sp)
 200b3ec:	2023883a 	mov	r17,r4
 200b3f0:	2809883a 	mov	r4,r5
 200b3f4:	300b883a 	mov	r5,r6
 200b3f8:	dfc00115 	stw	ra,4(sp)
 200b3fc:	2003b380 	call	2003b38 <__mulsi3>
 200b400:	100b883a 	mov	r5,r2
 200b404:	8809883a 	mov	r4,r17
 200b408:	20043dc0 	call	20043dc <_malloc_r>
 200b40c:	1023883a 	mov	r17,r2
 200b410:	01c00904 	movi	r7,36
 200b414:	10000d26 	beq	r2,zero,200b44c <_calloc_r+0x68>
 200b418:	10ffff17 	ldw	r3,-4(r2)
 200b41c:	1009883a 	mov	r4,r2
 200b420:	00bfff04 	movi	r2,-4
 200b424:	1886703a 	and	r3,r3,r2
 200b428:	1887883a 	add	r3,r3,r2
 200b42c:	180d883a 	mov	r6,r3
 200b430:	000b883a 	mov	r5,zero
 200b434:	38c01736 	bltu	r7,r3,200b494 <_calloc_r+0xb0>
 200b438:	008004c4 	movi	r2,19
 200b43c:	10c00836 	bltu	r2,r3,200b460 <_calloc_r+0x7c>
 200b440:	20000215 	stw	zero,8(r4)
 200b444:	20000015 	stw	zero,0(r4)
 200b448:	20000115 	stw	zero,4(r4)
 200b44c:	8805883a 	mov	r2,r17
 200b450:	dfc00117 	ldw	ra,4(sp)
 200b454:	dc400017 	ldw	r17,0(sp)
 200b458:	dec00204 	addi	sp,sp,8
 200b45c:	f800283a 	ret
 200b460:	008006c4 	movi	r2,27
 200b464:	88000015 	stw	zero,0(r17)
 200b468:	88000115 	stw	zero,4(r17)
 200b46c:	89000204 	addi	r4,r17,8
 200b470:	10fff32e 	bgeu	r2,r3,200b440 <_calloc_r+0x5c>
 200b474:	88000215 	stw	zero,8(r17)
 200b478:	88000315 	stw	zero,12(r17)
 200b47c:	89000404 	addi	r4,r17,16
 200b480:	19ffef1e 	bne	r3,r7,200b440 <_calloc_r+0x5c>
 200b484:	89000604 	addi	r4,r17,24
 200b488:	88000415 	stw	zero,16(r17)
 200b48c:	88000515 	stw	zero,20(r17)
 200b490:	003feb06 	br	200b440 <_calloc_r+0x5c>
 200b494:	20099dc0 	call	20099dc <memset>
 200b498:	8805883a 	mov	r2,r17
 200b49c:	dfc00117 	ldw	ra,4(sp)
 200b4a0:	dc400017 	ldw	r17,0(sp)
 200b4a4:	dec00204 	addi	sp,sp,8
 200b4a8:	f800283a 	ret

0200b4ac <_close_r>:
 200b4ac:	defffd04 	addi	sp,sp,-12
 200b4b0:	dc000015 	stw	r16,0(sp)
 200b4b4:	04008074 	movhi	r16,513
 200b4b8:	84089704 	addi	r16,r16,8796
 200b4bc:	dc400115 	stw	r17,4(sp)
 200b4c0:	80000015 	stw	zero,0(r16)
 200b4c4:	2023883a 	mov	r17,r4
 200b4c8:	2809883a 	mov	r4,r5
 200b4cc:	dfc00215 	stw	ra,8(sp)
 200b4d0:	200ce2c0 	call	200ce2c <close>
 200b4d4:	1007883a 	mov	r3,r2
 200b4d8:	00bfffc4 	movi	r2,-1
 200b4dc:	18800626 	beq	r3,r2,200b4f8 <_close_r+0x4c>
 200b4e0:	1805883a 	mov	r2,r3
 200b4e4:	dfc00217 	ldw	ra,8(sp)
 200b4e8:	dc400117 	ldw	r17,4(sp)
 200b4ec:	dc000017 	ldw	r16,0(sp)
 200b4f0:	dec00304 	addi	sp,sp,12
 200b4f4:	f800283a 	ret
 200b4f8:	80800017 	ldw	r2,0(r16)
 200b4fc:	103ff826 	beq	r2,zero,200b4e0 <_close_r+0x34>
 200b500:	88800015 	stw	r2,0(r17)
 200b504:	1805883a 	mov	r2,r3
 200b508:	dfc00217 	ldw	ra,8(sp)
 200b50c:	dc400117 	ldw	r17,4(sp)
 200b510:	dc000017 	ldw	r16,0(sp)
 200b514:	dec00304 	addi	sp,sp,12
 200b518:	f800283a 	ret

0200b51c <_fclose_r>:
 200b51c:	defffc04 	addi	sp,sp,-16
 200b520:	dc400115 	stw	r17,4(sp)
 200b524:	dc000015 	stw	r16,0(sp)
 200b528:	dfc00315 	stw	ra,12(sp)
 200b52c:	dc800215 	stw	r18,8(sp)
 200b530:	2821883a 	mov	r16,r5
 200b534:	2023883a 	mov	r17,r4
 200b538:	28002926 	beq	r5,zero,200b5e0 <_fclose_r+0xc4>
 200b53c:	20088280 	call	2008828 <__sfp_lock_acquire>
 200b540:	88000226 	beq	r17,zero,200b54c <_fclose_r+0x30>
 200b544:	88800e17 	ldw	r2,56(r17)
 200b548:	10002d26 	beq	r2,zero,200b600 <_fclose_r+0xe4>
 200b54c:	8080030f 	ldh	r2,12(r16)
 200b550:	10002226 	beq	r2,zero,200b5dc <_fclose_r+0xc0>
 200b554:	8809883a 	mov	r4,r17
 200b558:	800b883a 	mov	r5,r16
 200b55c:	20085a00 	call	20085a0 <_fflush_r>
 200b560:	1025883a 	mov	r18,r2
 200b564:	80800b17 	ldw	r2,44(r16)
 200b568:	10000426 	beq	r2,zero,200b57c <_fclose_r+0x60>
 200b56c:	81400717 	ldw	r5,28(r16)
 200b570:	8809883a 	mov	r4,r17
 200b574:	103ee83a 	callr	r2
 200b578:	10002a16 	blt	r2,zero,200b624 <_fclose_r+0x108>
 200b57c:	8080030b 	ldhu	r2,12(r16)
 200b580:	1080200c 	andi	r2,r2,128
 200b584:	1000231e 	bne	r2,zero,200b614 <_fclose_r+0xf8>
 200b588:	81400c17 	ldw	r5,48(r16)
 200b58c:	28000526 	beq	r5,zero,200b5a4 <_fclose_r+0x88>
 200b590:	80801004 	addi	r2,r16,64
 200b594:	28800226 	beq	r5,r2,200b5a0 <_fclose_r+0x84>
 200b598:	8809883a 	mov	r4,r17
 200b59c:	2008bf00 	call	2008bf0 <_free_r>
 200b5a0:	80000c15 	stw	zero,48(r16)
 200b5a4:	81401117 	ldw	r5,68(r16)
 200b5a8:	28000326 	beq	r5,zero,200b5b8 <_fclose_r+0x9c>
 200b5ac:	8809883a 	mov	r4,r17
 200b5b0:	2008bf00 	call	2008bf0 <_free_r>
 200b5b4:	80001115 	stw	zero,68(r16)
 200b5b8:	8000030d 	sth	zero,12(r16)
 200b5bc:	200882c0 	call	200882c <__sfp_lock_release>
 200b5c0:	9005883a 	mov	r2,r18
 200b5c4:	dfc00317 	ldw	ra,12(sp)
 200b5c8:	dc800217 	ldw	r18,8(sp)
 200b5cc:	dc400117 	ldw	r17,4(sp)
 200b5d0:	dc000017 	ldw	r16,0(sp)
 200b5d4:	dec00404 	addi	sp,sp,16
 200b5d8:	f800283a 	ret
 200b5dc:	200882c0 	call	200882c <__sfp_lock_release>
 200b5e0:	0025883a 	mov	r18,zero
 200b5e4:	9005883a 	mov	r2,r18
 200b5e8:	dfc00317 	ldw	ra,12(sp)
 200b5ec:	dc800217 	ldw	r18,8(sp)
 200b5f0:	dc400117 	ldw	r17,4(sp)
 200b5f4:	dc000017 	ldw	r16,0(sp)
 200b5f8:	dec00404 	addi	sp,sp,16
 200b5fc:	f800283a 	ret
 200b600:	8809883a 	mov	r4,r17
 200b604:	20088380 	call	2008838 <__sinit>
 200b608:	8080030f 	ldh	r2,12(r16)
 200b60c:	103fd11e 	bne	r2,zero,200b554 <_fclose_r+0x38>
 200b610:	003ff206 	br	200b5dc <_fclose_r+0xc0>
 200b614:	81400417 	ldw	r5,16(r16)
 200b618:	8809883a 	mov	r4,r17
 200b61c:	2008bf00 	call	2008bf0 <_free_r>
 200b620:	003fd906 	br	200b588 <_fclose_r+0x6c>
 200b624:	04bfffc4 	movi	r18,-1
 200b628:	003fd406 	br	200b57c <_fclose_r+0x60>

0200b62c <fclose>:
 200b62c:	00808074 	movhi	r2,513
 200b630:	1085b404 	addi	r2,r2,5840
 200b634:	200b883a 	mov	r5,r4
 200b638:	11000017 	ldw	r4,0(r2)
 200b63c:	200b51c1 	jmpi	200b51c <_fclose_r>

0200b640 <_fstat_r>:
 200b640:	defffd04 	addi	sp,sp,-12
 200b644:	dc000015 	stw	r16,0(sp)
 200b648:	04008074 	movhi	r16,513
 200b64c:	84089704 	addi	r16,r16,8796
 200b650:	dc400115 	stw	r17,4(sp)
 200b654:	80000015 	stw	zero,0(r16)
 200b658:	2023883a 	mov	r17,r4
 200b65c:	2809883a 	mov	r4,r5
 200b660:	300b883a 	mov	r5,r6
 200b664:	dfc00215 	stw	ra,8(sp)
 200b668:	200d0c80 	call	200d0c8 <fstat>
 200b66c:	1007883a 	mov	r3,r2
 200b670:	00bfffc4 	movi	r2,-1
 200b674:	18800626 	beq	r3,r2,200b690 <_fstat_r+0x50>
 200b678:	1805883a 	mov	r2,r3
 200b67c:	dfc00217 	ldw	ra,8(sp)
 200b680:	dc400117 	ldw	r17,4(sp)
 200b684:	dc000017 	ldw	r16,0(sp)
 200b688:	dec00304 	addi	sp,sp,12
 200b68c:	f800283a 	ret
 200b690:	80800017 	ldw	r2,0(r16)
 200b694:	103ff826 	beq	r2,zero,200b678 <_fstat_r+0x38>
 200b698:	88800015 	stw	r2,0(r17)
 200b69c:	1805883a 	mov	r2,r3
 200b6a0:	dfc00217 	ldw	ra,8(sp)
 200b6a4:	dc400117 	ldw	r17,4(sp)
 200b6a8:	dc000017 	ldw	r16,0(sp)
 200b6ac:	dec00304 	addi	sp,sp,12
 200b6b0:	f800283a 	ret

0200b6b4 <_isatty_r>:
 200b6b4:	defffd04 	addi	sp,sp,-12
 200b6b8:	dc000015 	stw	r16,0(sp)
 200b6bc:	04008074 	movhi	r16,513
 200b6c0:	84089704 	addi	r16,r16,8796
 200b6c4:	dc400115 	stw	r17,4(sp)
 200b6c8:	80000015 	stw	zero,0(r16)
 200b6cc:	2023883a 	mov	r17,r4
 200b6d0:	2809883a 	mov	r4,r5
 200b6d4:	dfc00215 	stw	ra,8(sp)
 200b6d8:	200d2000 	call	200d200 <isatty>
 200b6dc:	1007883a 	mov	r3,r2
 200b6e0:	00bfffc4 	movi	r2,-1
 200b6e4:	18800626 	beq	r3,r2,200b700 <_isatty_r+0x4c>
 200b6e8:	1805883a 	mov	r2,r3
 200b6ec:	dfc00217 	ldw	ra,8(sp)
 200b6f0:	dc400117 	ldw	r17,4(sp)
 200b6f4:	dc000017 	ldw	r16,0(sp)
 200b6f8:	dec00304 	addi	sp,sp,12
 200b6fc:	f800283a 	ret
 200b700:	80800017 	ldw	r2,0(r16)
 200b704:	103ff826 	beq	r2,zero,200b6e8 <_isatty_r+0x34>
 200b708:	88800015 	stw	r2,0(r17)
 200b70c:	1805883a 	mov	r2,r3
 200b710:	dfc00217 	ldw	ra,8(sp)
 200b714:	dc400117 	ldw	r17,4(sp)
 200b718:	dc000017 	ldw	r16,0(sp)
 200b71c:	dec00304 	addi	sp,sp,12
 200b720:	f800283a 	ret

0200b724 <_lseek_r>:
 200b724:	defffd04 	addi	sp,sp,-12
 200b728:	dc000015 	stw	r16,0(sp)
 200b72c:	04008074 	movhi	r16,513
 200b730:	84089704 	addi	r16,r16,8796
 200b734:	dc400115 	stw	r17,4(sp)
 200b738:	80000015 	stw	zero,0(r16)
 200b73c:	2023883a 	mov	r17,r4
 200b740:	2809883a 	mov	r4,r5
 200b744:	300b883a 	mov	r5,r6
 200b748:	380d883a 	mov	r6,r7
 200b74c:	dfc00215 	stw	ra,8(sp)
 200b750:	200d4100 	call	200d410 <lseek>
 200b754:	1007883a 	mov	r3,r2
 200b758:	00bfffc4 	movi	r2,-1
 200b75c:	18800626 	beq	r3,r2,200b778 <_lseek_r+0x54>
 200b760:	1805883a 	mov	r2,r3
 200b764:	dfc00217 	ldw	ra,8(sp)
 200b768:	dc400117 	ldw	r17,4(sp)
 200b76c:	dc000017 	ldw	r16,0(sp)
 200b770:	dec00304 	addi	sp,sp,12
 200b774:	f800283a 	ret
 200b778:	80800017 	ldw	r2,0(r16)
 200b77c:	103ff826 	beq	r2,zero,200b760 <_lseek_r+0x3c>
 200b780:	88800015 	stw	r2,0(r17)
 200b784:	1805883a 	mov	r2,r3
 200b788:	dfc00217 	ldw	ra,8(sp)
 200b78c:	dc400117 	ldw	r17,4(sp)
 200b790:	dc000017 	ldw	r16,0(sp)
 200b794:	dec00304 	addi	sp,sp,12
 200b798:	f800283a 	ret

0200b79c <_read_r>:
 200b79c:	defffd04 	addi	sp,sp,-12
 200b7a0:	dc000015 	stw	r16,0(sp)
 200b7a4:	04008074 	movhi	r16,513
 200b7a8:	84089704 	addi	r16,r16,8796
 200b7ac:	dc400115 	stw	r17,4(sp)
 200b7b0:	80000015 	stw	zero,0(r16)
 200b7b4:	2023883a 	mov	r17,r4
 200b7b8:	2809883a 	mov	r4,r5
 200b7bc:	300b883a 	mov	r5,r6
 200b7c0:	380d883a 	mov	r6,r7
 200b7c4:	dfc00215 	stw	ra,8(sp)
 200b7c8:	200d6100 	call	200d610 <read>
 200b7cc:	1007883a 	mov	r3,r2
 200b7d0:	00bfffc4 	movi	r2,-1
 200b7d4:	18800626 	beq	r3,r2,200b7f0 <_read_r+0x54>
 200b7d8:	1805883a 	mov	r2,r3
 200b7dc:	dfc00217 	ldw	ra,8(sp)
 200b7e0:	dc400117 	ldw	r17,4(sp)
 200b7e4:	dc000017 	ldw	r16,0(sp)
 200b7e8:	dec00304 	addi	sp,sp,12
 200b7ec:	f800283a 	ret
 200b7f0:	80800017 	ldw	r2,0(r16)
 200b7f4:	103ff826 	beq	r2,zero,200b7d8 <_read_r+0x3c>
 200b7f8:	88800015 	stw	r2,0(r17)
 200b7fc:	1805883a 	mov	r2,r3
 200b800:	dfc00217 	ldw	ra,8(sp)
 200b804:	dc400117 	ldw	r17,4(sp)
 200b808:	dc000017 	ldw	r16,0(sp)
 200b80c:	dec00304 	addi	sp,sp,12
 200b810:	f800283a 	ret

0200b814 <__udivdi3>:
 200b814:	defff104 	addi	sp,sp,-60
 200b818:	0015883a 	mov	r10,zero
 200b81c:	2005883a 	mov	r2,r4
 200b820:	3011883a 	mov	r8,r6
 200b824:	df000d15 	stw	fp,52(sp)
 200b828:	dd400a15 	stw	r21,40(sp)
 200b82c:	dcc00815 	stw	r19,32(sp)
 200b830:	dfc00e15 	stw	ra,56(sp)
 200b834:	ddc00c15 	stw	r23,48(sp)
 200b838:	dd800b15 	stw	r22,44(sp)
 200b83c:	dd000915 	stw	r20,36(sp)
 200b840:	dc800715 	stw	r18,28(sp)
 200b844:	dc400615 	stw	r17,24(sp)
 200b848:	dc000515 	stw	r16,20(sp)
 200b84c:	da800315 	stw	r10,12(sp)
 200b850:	4027883a 	mov	r19,r8
 200b854:	1039883a 	mov	fp,r2
 200b858:	282b883a 	mov	r21,r5
 200b85c:	da800415 	stw	r10,16(sp)
 200b860:	3800401e 	bne	r7,zero,200b964 <__udivdi3+0x150>
 200b864:	2a006536 	bltu	r5,r8,200b9fc <__udivdi3+0x1e8>
 200b868:	4000b526 	beq	r8,zero,200bb40 <__udivdi3+0x32c>
 200b86c:	00bfffd4 	movui	r2,65535
 200b870:	14c0ad36 	bltu	r2,r19,200bb28 <__udivdi3+0x314>
 200b874:	00803fc4 	movi	r2,255
 200b878:	14c15e36 	bltu	r2,r19,200bdf4 <__udivdi3+0x5e0>
 200b87c:	000b883a 	mov	r5,zero
 200b880:	0005883a 	mov	r2,zero
 200b884:	9884d83a 	srl	r2,r19,r2
 200b888:	01008074 	movhi	r4,513
 200b88c:	21022a04 	addi	r4,r4,2216
 200b890:	01800804 	movi	r6,32
 200b894:	1105883a 	add	r2,r2,r4
 200b898:	10c00003 	ldbu	r3,0(r2)
 200b89c:	28c7883a 	add	r3,r5,r3
 200b8a0:	30e9c83a 	sub	r20,r6,r3
 200b8a4:	a0010a1e 	bne	r20,zero,200bcd0 <__udivdi3+0x4bc>
 200b8a8:	982ed43a 	srli	r23,r19,16
 200b8ac:	acebc83a 	sub	r21,r21,r19
 200b8b0:	9dbfffcc 	andi	r22,r19,65535
 200b8b4:	05000044 	movi	r20,1
 200b8b8:	a809883a 	mov	r4,r21
 200b8bc:	b80b883a 	mov	r5,r23
 200b8c0:	2003b280 	call	2003b28 <__udivsi3>
 200b8c4:	100b883a 	mov	r5,r2
 200b8c8:	b009883a 	mov	r4,r22
 200b8cc:	1021883a 	mov	r16,r2
 200b8d0:	2003b380 	call	2003b38 <__mulsi3>
 200b8d4:	a809883a 	mov	r4,r21
 200b8d8:	b80b883a 	mov	r5,r23
 200b8dc:	1023883a 	mov	r17,r2
 200b8e0:	2003b300 	call	2003b30 <__umodsi3>
 200b8e4:	1004943a 	slli	r2,r2,16
 200b8e8:	e006d43a 	srli	r3,fp,16
 200b8ec:	10c4b03a 	or	r2,r2,r3
 200b8f0:	1440042e 	bgeu	r2,r17,200b904 <__udivdi3+0xf0>
 200b8f4:	14c5883a 	add	r2,r2,r19
 200b8f8:	843fffc4 	addi	r16,r16,-1
 200b8fc:	14c00136 	bltu	r2,r19,200b904 <__udivdi3+0xf0>
 200b900:	14415c36 	bltu	r2,r17,200be74 <__udivdi3+0x660>
 200b904:	1463c83a 	sub	r17,r2,r17
 200b908:	8809883a 	mov	r4,r17
 200b90c:	b80b883a 	mov	r5,r23
 200b910:	2003b280 	call	2003b28 <__udivsi3>
 200b914:	100b883a 	mov	r5,r2
 200b918:	b009883a 	mov	r4,r22
 200b91c:	102b883a 	mov	r21,r2
 200b920:	2003b380 	call	2003b38 <__mulsi3>
 200b924:	8809883a 	mov	r4,r17
 200b928:	b80b883a 	mov	r5,r23
 200b92c:	1025883a 	mov	r18,r2
 200b930:	2003b300 	call	2003b30 <__umodsi3>
 200b934:	1004943a 	slli	r2,r2,16
 200b938:	e0ffffcc 	andi	r3,fp,65535
 200b93c:	10c4b03a 	or	r2,r2,r3
 200b940:	1480042e 	bgeu	r2,r18,200b954 <__udivdi3+0x140>
 200b944:	9885883a 	add	r2,r19,r2
 200b948:	ad7fffc4 	addi	r21,r21,-1
 200b94c:	14c00136 	bltu	r2,r19,200b954 <__udivdi3+0x140>
 200b950:	14813c36 	bltu	r2,r18,200be44 <__udivdi3+0x630>
 200b954:	8004943a 	slli	r2,r16,16
 200b958:	a009883a 	mov	r4,r20
 200b95c:	a884b03a 	or	r2,r21,r2
 200b960:	00001506 	br	200b9b8 <__udivdi3+0x1a4>
 200b964:	380d883a 	mov	r6,r7
 200b968:	29c06c36 	bltu	r5,r7,200bb1c <__udivdi3+0x308>
 200b96c:	00bfffd4 	movui	r2,65535
 200b970:	11c06436 	bltu	r2,r7,200bb04 <__udivdi3+0x2f0>
 200b974:	00803fc4 	movi	r2,255
 200b978:	11c11836 	bltu	r2,r7,200bddc <__udivdi3+0x5c8>
 200b97c:	000b883a 	mov	r5,zero
 200b980:	0005883a 	mov	r2,zero
 200b984:	3084d83a 	srl	r2,r6,r2
 200b988:	01008074 	movhi	r4,513
 200b98c:	21022a04 	addi	r4,r4,2216
 200b990:	01c00804 	movi	r7,32
 200b994:	1105883a 	add	r2,r2,r4
 200b998:	10c00003 	ldbu	r3,0(r2)
 200b99c:	28c7883a 	add	r3,r5,r3
 200b9a0:	38edc83a 	sub	r22,r7,r3
 200b9a4:	b000731e 	bne	r22,zero,200bb74 <__udivdi3+0x360>
 200b9a8:	35400136 	bltu	r6,r21,200b9b0 <__udivdi3+0x19c>
 200b9ac:	e4c05b36 	bltu	fp,r19,200bb1c <__udivdi3+0x308>
 200b9b0:	00800044 	movi	r2,1
 200b9b4:	0009883a 	mov	r4,zero
 200b9b8:	d8800315 	stw	r2,12(sp)
 200b9bc:	d9400317 	ldw	r5,12(sp)
 200b9c0:	2007883a 	mov	r3,r4
 200b9c4:	d9000415 	stw	r4,16(sp)
 200b9c8:	2805883a 	mov	r2,r5
 200b9cc:	dfc00e17 	ldw	ra,56(sp)
 200b9d0:	df000d17 	ldw	fp,52(sp)
 200b9d4:	ddc00c17 	ldw	r23,48(sp)
 200b9d8:	dd800b17 	ldw	r22,44(sp)
 200b9dc:	dd400a17 	ldw	r21,40(sp)
 200b9e0:	dd000917 	ldw	r20,36(sp)
 200b9e4:	dcc00817 	ldw	r19,32(sp)
 200b9e8:	dc800717 	ldw	r18,28(sp)
 200b9ec:	dc400617 	ldw	r17,24(sp)
 200b9f0:	dc000517 	ldw	r16,20(sp)
 200b9f4:	dec00f04 	addi	sp,sp,60
 200b9f8:	f800283a 	ret
 200b9fc:	00bfffd4 	movui	r2,65535
 200ba00:	12005636 	bltu	r2,r8,200bb5c <__udivdi3+0x348>
 200ba04:	00803fc4 	movi	r2,255
 200ba08:	12010036 	bltu	r2,r8,200be0c <__udivdi3+0x5f8>
 200ba0c:	000b883a 	mov	r5,zero
 200ba10:	0005883a 	mov	r2,zero
 200ba14:	9884d83a 	srl	r2,r19,r2
 200ba18:	01008074 	movhi	r4,513
 200ba1c:	21022a04 	addi	r4,r4,2216
 200ba20:	01800804 	movi	r6,32
 200ba24:	1105883a 	add	r2,r2,r4
 200ba28:	10c00003 	ldbu	r3,0(r2)
 200ba2c:	28c7883a 	add	r3,r5,r3
 200ba30:	30cbc83a 	sub	r5,r6,r3
 200ba34:	28000626 	beq	r5,zero,200ba50 <__udivdi3+0x23c>
 200ba38:	3145c83a 	sub	r2,r6,r5
 200ba3c:	e084d83a 	srl	r2,fp,r2
 200ba40:	a946983a 	sll	r3,r21,r5
 200ba44:	e178983a 	sll	fp,fp,r5
 200ba48:	9966983a 	sll	r19,r19,r5
 200ba4c:	18aab03a 	or	r21,r3,r2
 200ba50:	982ed43a 	srli	r23,r19,16
 200ba54:	a809883a 	mov	r4,r21
 200ba58:	9cbfffcc 	andi	r18,r19,65535
 200ba5c:	b80b883a 	mov	r5,r23
 200ba60:	2003b280 	call	2003b28 <__udivsi3>
 200ba64:	100b883a 	mov	r5,r2
 200ba68:	9009883a 	mov	r4,r18
 200ba6c:	1021883a 	mov	r16,r2
 200ba70:	2003b380 	call	2003b38 <__mulsi3>
 200ba74:	a809883a 	mov	r4,r21
 200ba78:	b80b883a 	mov	r5,r23
 200ba7c:	1023883a 	mov	r17,r2
 200ba80:	2003b300 	call	2003b30 <__umodsi3>
 200ba84:	1004943a 	slli	r2,r2,16
 200ba88:	e006d43a 	srli	r3,fp,16
 200ba8c:	10c4b03a 	or	r2,r2,r3
 200ba90:	1440042e 	bgeu	r2,r17,200baa4 <__udivdi3+0x290>
 200ba94:	14c5883a 	add	r2,r2,r19
 200ba98:	843fffc4 	addi	r16,r16,-1
 200ba9c:	14c00136 	bltu	r2,r19,200baa4 <__udivdi3+0x290>
 200baa0:	1440ea36 	bltu	r2,r17,200be4c <__udivdi3+0x638>
 200baa4:	1463c83a 	sub	r17,r2,r17
 200baa8:	8809883a 	mov	r4,r17
 200baac:	b80b883a 	mov	r5,r23
 200bab0:	2003b280 	call	2003b28 <__udivsi3>
 200bab4:	100b883a 	mov	r5,r2
 200bab8:	9009883a 	mov	r4,r18
 200babc:	102b883a 	mov	r21,r2
 200bac0:	2003b380 	call	2003b38 <__mulsi3>
 200bac4:	8809883a 	mov	r4,r17
 200bac8:	b80b883a 	mov	r5,r23
 200bacc:	1025883a 	mov	r18,r2
 200bad0:	2003b300 	call	2003b30 <__umodsi3>
 200bad4:	1004943a 	slli	r2,r2,16
 200bad8:	e0ffffcc 	andi	r3,fp,65535
 200badc:	10c4b03a 	or	r2,r2,r3
 200bae0:	1480042e 	bgeu	r2,r18,200baf4 <__udivdi3+0x2e0>
 200bae4:	9885883a 	add	r2,r19,r2
 200bae8:	ad7fffc4 	addi	r21,r21,-1
 200baec:	14c00136 	bltu	r2,r19,200baf4 <__udivdi3+0x2e0>
 200baf0:	1480d936 	bltu	r2,r18,200be58 <__udivdi3+0x644>
 200baf4:	8004943a 	slli	r2,r16,16
 200baf8:	0009883a 	mov	r4,zero
 200bafc:	a884b03a 	or	r2,r21,r2
 200bb00:	003fad06 	br	200b9b8 <__udivdi3+0x1a4>
 200bb04:	00804034 	movhi	r2,256
 200bb08:	10bfffc4 	addi	r2,r2,-1
 200bb0c:	11c0b636 	bltu	r2,r7,200bde8 <__udivdi3+0x5d4>
 200bb10:	01400404 	movi	r5,16
 200bb14:	2805883a 	mov	r2,r5
 200bb18:	003f9a06 	br	200b984 <__udivdi3+0x170>
 200bb1c:	0005883a 	mov	r2,zero
 200bb20:	0009883a 	mov	r4,zero
 200bb24:	003fa406 	br	200b9b8 <__udivdi3+0x1a4>
 200bb28:	00804034 	movhi	r2,256
 200bb2c:	10bfffc4 	addi	r2,r2,-1
 200bb30:	14c0b336 	bltu	r2,r19,200be00 <__udivdi3+0x5ec>
 200bb34:	01400404 	movi	r5,16
 200bb38:	2805883a 	mov	r2,r5
 200bb3c:	003f5106 	br	200b884 <__udivdi3+0x70>
 200bb40:	01000044 	movi	r4,1
 200bb44:	000b883a 	mov	r5,zero
 200bb48:	2003b280 	call	2003b28 <__udivsi3>
 200bb4c:	1027883a 	mov	r19,r2
 200bb50:	00bfffd4 	movui	r2,65535
 200bb54:	14fff436 	bltu	r2,r19,200bb28 <__udivdi3+0x314>
 200bb58:	003f4606 	br	200b874 <__udivdi3+0x60>
 200bb5c:	00804034 	movhi	r2,256
 200bb60:	10bfffc4 	addi	r2,r2,-1
 200bb64:	1200ac36 	bltu	r2,r8,200be18 <__udivdi3+0x604>
 200bb68:	01400404 	movi	r5,16
 200bb6c:	2805883a 	mov	r2,r5
 200bb70:	003fa806 	br	200ba14 <__udivdi3+0x200>
 200bb74:	3d85c83a 	sub	r2,r7,r22
 200bb78:	3588983a 	sll	r4,r6,r22
 200bb7c:	9886d83a 	srl	r3,r19,r2
 200bb80:	a8a2d83a 	srl	r17,r21,r2
 200bb84:	e084d83a 	srl	r2,fp,r2
 200bb88:	20eeb03a 	or	r23,r4,r3
 200bb8c:	b824d43a 	srli	r18,r23,16
 200bb90:	ad86983a 	sll	r3,r21,r22
 200bb94:	8809883a 	mov	r4,r17
 200bb98:	900b883a 	mov	r5,r18
 200bb9c:	1886b03a 	or	r3,r3,r2
 200bba0:	d8c00115 	stw	r3,4(sp)
 200bba4:	bc3fffcc 	andi	r16,r23,65535
 200bba8:	2003b280 	call	2003b28 <__udivsi3>
 200bbac:	100b883a 	mov	r5,r2
 200bbb0:	8009883a 	mov	r4,r16
 200bbb4:	1029883a 	mov	r20,r2
 200bbb8:	2003b380 	call	2003b38 <__mulsi3>
 200bbbc:	900b883a 	mov	r5,r18
 200bbc0:	8809883a 	mov	r4,r17
 200bbc4:	102b883a 	mov	r21,r2
 200bbc8:	2003b300 	call	2003b30 <__umodsi3>
 200bbcc:	d9400117 	ldw	r5,4(sp)
 200bbd0:	1004943a 	slli	r2,r2,16
 200bbd4:	9da6983a 	sll	r19,r19,r22
 200bbd8:	2806d43a 	srli	r3,r5,16
 200bbdc:	10c4b03a 	or	r2,r2,r3
 200bbe0:	1540032e 	bgeu	r2,r21,200bbf0 <__udivdi3+0x3dc>
 200bbe4:	15c5883a 	add	r2,r2,r23
 200bbe8:	a53fffc4 	addi	r20,r20,-1
 200bbec:	15c0912e 	bgeu	r2,r23,200be34 <__udivdi3+0x620>
 200bbf0:	1563c83a 	sub	r17,r2,r21
 200bbf4:	8809883a 	mov	r4,r17
 200bbf8:	900b883a 	mov	r5,r18
 200bbfc:	2003b280 	call	2003b28 <__udivsi3>
 200bc00:	100b883a 	mov	r5,r2
 200bc04:	8009883a 	mov	r4,r16
 200bc08:	102b883a 	mov	r21,r2
 200bc0c:	2003b380 	call	2003b38 <__mulsi3>
 200bc10:	8809883a 	mov	r4,r17
 200bc14:	900b883a 	mov	r5,r18
 200bc18:	1021883a 	mov	r16,r2
 200bc1c:	2003b300 	call	2003b30 <__umodsi3>
 200bc20:	da800117 	ldw	r10,4(sp)
 200bc24:	1004943a 	slli	r2,r2,16
 200bc28:	50ffffcc 	andi	r3,r10,65535
 200bc2c:	10c6b03a 	or	r3,r2,r3
 200bc30:	1c00032e 	bgeu	r3,r16,200bc40 <__udivdi3+0x42c>
 200bc34:	1dc7883a 	add	r3,r3,r23
 200bc38:	ad7fffc4 	addi	r21,r21,-1
 200bc3c:	1dc0792e 	bgeu	r3,r23,200be24 <__udivdi3+0x610>
 200bc40:	a004943a 	slli	r2,r20,16
 200bc44:	982ed43a 	srli	r23,r19,16
 200bc48:	9cffffcc 	andi	r19,r19,65535
 200bc4c:	a8a4b03a 	or	r18,r21,r2
 200bc50:	947fffcc 	andi	r17,r18,65535
 200bc54:	902ad43a 	srli	r21,r18,16
 200bc58:	8809883a 	mov	r4,r17
 200bc5c:	980b883a 	mov	r5,r19
 200bc60:	1c21c83a 	sub	r16,r3,r16
 200bc64:	2003b380 	call	2003b38 <__mulsi3>
 200bc68:	8809883a 	mov	r4,r17
 200bc6c:	b80b883a 	mov	r5,r23
 200bc70:	1029883a 	mov	r20,r2
 200bc74:	2003b380 	call	2003b38 <__mulsi3>
 200bc78:	980b883a 	mov	r5,r19
 200bc7c:	a809883a 	mov	r4,r21
 200bc80:	1023883a 	mov	r17,r2
 200bc84:	2003b380 	call	2003b38 <__mulsi3>
 200bc88:	a809883a 	mov	r4,r21
 200bc8c:	b80b883a 	mov	r5,r23
 200bc90:	1027883a 	mov	r19,r2
 200bc94:	2003b380 	call	2003b38 <__mulsi3>
 200bc98:	1009883a 	mov	r4,r2
 200bc9c:	a004d43a 	srli	r2,r20,16
 200bca0:	8ce3883a 	add	r17,r17,r19
 200bca4:	1447883a 	add	r3,r2,r17
 200bca8:	1cc0022e 	bgeu	r3,r19,200bcb4 <__udivdi3+0x4a0>
 200bcac:	00800074 	movhi	r2,1
 200bcb0:	2089883a 	add	r4,r4,r2
 200bcb4:	1804d43a 	srli	r2,r3,16
 200bcb8:	2085883a 	add	r2,r4,r2
 200bcbc:	80804436 	bltu	r16,r2,200bdd0 <__udivdi3+0x5bc>
 200bcc0:	80803e26 	beq	r16,r2,200bdbc <__udivdi3+0x5a8>
 200bcc4:	9005883a 	mov	r2,r18
 200bcc8:	0009883a 	mov	r4,zero
 200bccc:	003f3a06 	br	200b9b8 <__udivdi3+0x1a4>
 200bcd0:	9d26983a 	sll	r19,r19,r20
 200bcd4:	3505c83a 	sub	r2,r6,r20
 200bcd8:	a8a2d83a 	srl	r17,r21,r2
 200bcdc:	982ed43a 	srli	r23,r19,16
 200bce0:	e084d83a 	srl	r2,fp,r2
 200bce4:	ad06983a 	sll	r3,r21,r20
 200bce8:	8809883a 	mov	r4,r17
 200bcec:	b80b883a 	mov	r5,r23
 200bcf0:	1886b03a 	or	r3,r3,r2
 200bcf4:	d8c00015 	stw	r3,0(sp)
 200bcf8:	9dbfffcc 	andi	r22,r19,65535
 200bcfc:	2003b280 	call	2003b28 <__udivsi3>
 200bd00:	100b883a 	mov	r5,r2
 200bd04:	b009883a 	mov	r4,r22
 200bd08:	d8800215 	stw	r2,8(sp)
 200bd0c:	2003b380 	call	2003b38 <__mulsi3>
 200bd10:	8809883a 	mov	r4,r17
 200bd14:	b80b883a 	mov	r5,r23
 200bd18:	102b883a 	mov	r21,r2
 200bd1c:	2003b300 	call	2003b30 <__umodsi3>
 200bd20:	d9000017 	ldw	r4,0(sp)
 200bd24:	1004943a 	slli	r2,r2,16
 200bd28:	2006d43a 	srli	r3,r4,16
 200bd2c:	10c4b03a 	or	r2,r2,r3
 200bd30:	1540052e 	bgeu	r2,r21,200bd48 <__udivdi3+0x534>
 200bd34:	d9400217 	ldw	r5,8(sp)
 200bd38:	14c5883a 	add	r2,r2,r19
 200bd3c:	297fffc4 	addi	r5,r5,-1
 200bd40:	d9400215 	stw	r5,8(sp)
 200bd44:	14c0462e 	bgeu	r2,r19,200be60 <__udivdi3+0x64c>
 200bd48:	1563c83a 	sub	r17,r2,r21
 200bd4c:	8809883a 	mov	r4,r17
 200bd50:	b80b883a 	mov	r5,r23
 200bd54:	2003b280 	call	2003b28 <__udivsi3>
 200bd58:	100b883a 	mov	r5,r2
 200bd5c:	b009883a 	mov	r4,r22
 200bd60:	1025883a 	mov	r18,r2
 200bd64:	2003b380 	call	2003b38 <__mulsi3>
 200bd68:	8809883a 	mov	r4,r17
 200bd6c:	b80b883a 	mov	r5,r23
 200bd70:	1021883a 	mov	r16,r2
 200bd74:	2003b300 	call	2003b30 <__umodsi3>
 200bd78:	da800017 	ldw	r10,0(sp)
 200bd7c:	1004943a 	slli	r2,r2,16
 200bd80:	50ffffcc 	andi	r3,r10,65535
 200bd84:	10c6b03a 	or	r3,r2,r3
 200bd88:	1c00062e 	bgeu	r3,r16,200bda4 <__udivdi3+0x590>
 200bd8c:	1cc7883a 	add	r3,r3,r19
 200bd90:	94bfffc4 	addi	r18,r18,-1
 200bd94:	1cc00336 	bltu	r3,r19,200bda4 <__udivdi3+0x590>
 200bd98:	1c00022e 	bgeu	r3,r16,200bda4 <__udivdi3+0x590>
 200bd9c:	94bfffc4 	addi	r18,r18,-1
 200bda0:	1cc7883a 	add	r3,r3,r19
 200bda4:	d9000217 	ldw	r4,8(sp)
 200bda8:	e538983a 	sll	fp,fp,r20
 200bdac:	1c2bc83a 	sub	r21,r3,r16
 200bdb0:	2004943a 	slli	r2,r4,16
 200bdb4:	90a8b03a 	or	r20,r18,r2
 200bdb8:	003ebf06 	br	200b8b8 <__udivdi3+0xa4>
 200bdbc:	1804943a 	slli	r2,r3,16
 200bdc0:	e588983a 	sll	r4,fp,r22
 200bdc4:	a0ffffcc 	andi	r3,r20,65535
 200bdc8:	10c5883a 	add	r2,r2,r3
 200bdcc:	20bfbd2e 	bgeu	r4,r2,200bcc4 <__udivdi3+0x4b0>
 200bdd0:	90bfffc4 	addi	r2,r18,-1
 200bdd4:	0009883a 	mov	r4,zero
 200bdd8:	003ef706 	br	200b9b8 <__udivdi3+0x1a4>
 200bddc:	01400204 	movi	r5,8
 200bde0:	2805883a 	mov	r2,r5
 200bde4:	003ee706 	br	200b984 <__udivdi3+0x170>
 200bde8:	01400604 	movi	r5,24
 200bdec:	2805883a 	mov	r2,r5
 200bdf0:	003ee406 	br	200b984 <__udivdi3+0x170>
 200bdf4:	01400204 	movi	r5,8
 200bdf8:	2805883a 	mov	r2,r5
 200bdfc:	003ea106 	br	200b884 <__udivdi3+0x70>
 200be00:	01400604 	movi	r5,24
 200be04:	2805883a 	mov	r2,r5
 200be08:	003e9e06 	br	200b884 <__udivdi3+0x70>
 200be0c:	01400204 	movi	r5,8
 200be10:	2805883a 	mov	r2,r5
 200be14:	003eff06 	br	200ba14 <__udivdi3+0x200>
 200be18:	01400604 	movi	r5,24
 200be1c:	2805883a 	mov	r2,r5
 200be20:	003efc06 	br	200ba14 <__udivdi3+0x200>
 200be24:	1c3f862e 	bgeu	r3,r16,200bc40 <__udivdi3+0x42c>
 200be28:	1dc7883a 	add	r3,r3,r23
 200be2c:	ad7fffc4 	addi	r21,r21,-1
 200be30:	003f8306 	br	200bc40 <__udivdi3+0x42c>
 200be34:	157f6e2e 	bgeu	r2,r21,200bbf0 <__udivdi3+0x3dc>
 200be38:	a53fffc4 	addi	r20,r20,-1
 200be3c:	15c5883a 	add	r2,r2,r23
 200be40:	003f6b06 	br	200bbf0 <__udivdi3+0x3dc>
 200be44:	ad7fffc4 	addi	r21,r21,-1
 200be48:	003ec206 	br	200b954 <__udivdi3+0x140>
 200be4c:	843fffc4 	addi	r16,r16,-1
 200be50:	14c5883a 	add	r2,r2,r19
 200be54:	003f1306 	br	200baa4 <__udivdi3+0x290>
 200be58:	ad7fffc4 	addi	r21,r21,-1
 200be5c:	003f2506 	br	200baf4 <__udivdi3+0x2e0>
 200be60:	157fb92e 	bgeu	r2,r21,200bd48 <__udivdi3+0x534>
 200be64:	297fffc4 	addi	r5,r5,-1
 200be68:	14c5883a 	add	r2,r2,r19
 200be6c:	d9400215 	stw	r5,8(sp)
 200be70:	003fb506 	br	200bd48 <__udivdi3+0x534>
 200be74:	843fffc4 	addi	r16,r16,-1
 200be78:	14c5883a 	add	r2,r2,r19
 200be7c:	003ea106 	br	200b904 <__udivdi3+0xf0>

0200be80 <__umoddi3>:
 200be80:	defff004 	addi	sp,sp,-64
 200be84:	3011883a 	mov	r8,r6
 200be88:	000d883a 	mov	r6,zero
 200be8c:	dd400b15 	stw	r21,44(sp)
 200be90:	dcc00915 	stw	r19,36(sp)
 200be94:	dc000615 	stw	r16,24(sp)
 200be98:	dfc00f15 	stw	ra,60(sp)
 200be9c:	df000e15 	stw	fp,56(sp)
 200bea0:	ddc00d15 	stw	r23,52(sp)
 200bea4:	dd800c15 	stw	r22,48(sp)
 200bea8:	dd000a15 	stw	r20,40(sp)
 200beac:	dc800815 	stw	r18,32(sp)
 200beb0:	dc400715 	stw	r17,28(sp)
 200beb4:	2817883a 	mov	r11,r5
 200beb8:	d9800415 	stw	r6,16(sp)
 200bebc:	4027883a 	mov	r19,r8
 200bec0:	d9800515 	stw	r6,20(sp)
 200bec4:	2021883a 	mov	r16,r4
 200bec8:	282b883a 	mov	r21,r5
 200becc:	38002c1e 	bne	r7,zero,200bf80 <__umoddi3+0x100>
 200bed0:	2a005636 	bltu	r5,r8,200c02c <__umoddi3+0x1ac>
 200bed4:	40009a26 	beq	r8,zero,200c140 <__umoddi3+0x2c0>
 200bed8:	00bfffd4 	movui	r2,65535
 200bedc:	14c09236 	bltu	r2,r19,200c128 <__umoddi3+0x2a8>
 200bee0:	00803fc4 	movi	r2,255
 200bee4:	14c15c36 	bltu	r2,r19,200c458 <__umoddi3+0x5d8>
 200bee8:	000b883a 	mov	r5,zero
 200beec:	0005883a 	mov	r2,zero
 200bef0:	9884d83a 	srl	r2,r19,r2
 200bef4:	01008074 	movhi	r4,513
 200bef8:	21022a04 	addi	r4,r4,2216
 200befc:	01800804 	movi	r6,32
 200bf00:	1105883a 	add	r2,r2,r4
 200bf04:	10c00003 	ldbu	r3,0(r2)
 200bf08:	28c7883a 	add	r3,r5,r3
 200bf0c:	30e5c83a 	sub	r18,r6,r3
 200bf10:	9000a41e 	bne	r18,zero,200c1a4 <__umoddi3+0x324>
 200bf14:	982ed43a 	srli	r23,r19,16
 200bf18:	acebc83a 	sub	r21,r21,r19
 200bf1c:	9d3fffcc 	andi	r20,r19,65535
 200bf20:	002d883a 	mov	r22,zero
 200bf24:	a809883a 	mov	r4,r21
 200bf28:	b80b883a 	mov	r5,r23
 200bf2c:	2003b280 	call	2003b28 <__udivsi3>
 200bf30:	100b883a 	mov	r5,r2
 200bf34:	a009883a 	mov	r4,r20
 200bf38:	2003b380 	call	2003b38 <__mulsi3>
 200bf3c:	a809883a 	mov	r4,r21
 200bf40:	b80b883a 	mov	r5,r23
 200bf44:	1023883a 	mov	r17,r2
 200bf48:	2003b300 	call	2003b30 <__umodsi3>
 200bf4c:	1004943a 	slli	r2,r2,16
 200bf50:	8006d43a 	srli	r3,r16,16
 200bf54:	10c4b03a 	or	r2,r2,r3
 200bf58:	1440032e 	bgeu	r2,r17,200bf68 <__umoddi3+0xe8>
 200bf5c:	14c5883a 	add	r2,r2,r19
 200bf60:	14c00136 	bltu	r2,r19,200bf68 <__umoddi3+0xe8>
 200bf64:	14415836 	bltu	r2,r17,200c4c8 <__umoddi3+0x648>
 200bf68:	1463c83a 	sub	r17,r2,r17
 200bf6c:	8809883a 	mov	r4,r17
 200bf70:	b80b883a 	mov	r5,r23
 200bf74:	2003b280 	call	2003b28 <__udivsi3>
 200bf78:	a009883a 	mov	r4,r20
 200bf7c:	00005306 	br	200c0cc <__umoddi3+0x24c>
 200bf80:	380d883a 	mov	r6,r7
 200bf84:	29c0132e 	bgeu	r5,r7,200bfd4 <__umoddi3+0x154>
 200bf88:	d9000415 	stw	r4,16(sp)
 200bf8c:	d9400515 	stw	r5,20(sp)
 200bf90:	d9400417 	ldw	r5,16(sp)
 200bf94:	5813883a 	mov	r9,r11
 200bf98:	2811883a 	mov	r8,r5
 200bf9c:	4005883a 	mov	r2,r8
 200bfa0:	4807883a 	mov	r3,r9
 200bfa4:	dfc00f17 	ldw	ra,60(sp)
 200bfa8:	df000e17 	ldw	fp,56(sp)
 200bfac:	ddc00d17 	ldw	r23,52(sp)
 200bfb0:	dd800c17 	ldw	r22,48(sp)
 200bfb4:	dd400b17 	ldw	r21,44(sp)
 200bfb8:	dd000a17 	ldw	r20,40(sp)
 200bfbc:	dcc00917 	ldw	r19,36(sp)
 200bfc0:	dc800817 	ldw	r18,32(sp)
 200bfc4:	dc400717 	ldw	r17,28(sp)
 200bfc8:	dc000617 	ldw	r16,24(sp)
 200bfcc:	dec01004 	addi	sp,sp,64
 200bfd0:	f800283a 	ret
 200bfd4:	00bfffd4 	movui	r2,65535
 200bfd8:	11c06636 	bltu	r2,r7,200c174 <__umoddi3+0x2f4>
 200bfdc:	00803fc4 	movi	r2,255
 200bfe0:	11c12036 	bltu	r2,r7,200c464 <__umoddi3+0x5e4>
 200bfe4:	000b883a 	mov	r5,zero
 200bfe8:	0005883a 	mov	r2,zero
 200bfec:	3084d83a 	srl	r2,r6,r2
 200bff0:	01008074 	movhi	r4,513
 200bff4:	21022a04 	addi	r4,r4,2216
 200bff8:	01c00804 	movi	r7,32
 200bffc:	1105883a 	add	r2,r2,r4
 200c000:	10c00003 	ldbu	r3,0(r2)
 200c004:	28c7883a 	add	r3,r5,r3
 200c008:	38e5c83a 	sub	r18,r7,r3
 200c00c:	9000941e 	bne	r18,zero,200c260 <__umoddi3+0x3e0>
 200c010:	35405e36 	bltu	r6,r21,200c18c <__umoddi3+0x30c>
 200c014:	84c05d2e 	bgeu	r16,r19,200c18c <__umoddi3+0x30c>
 200c018:	8011883a 	mov	r8,r16
 200c01c:	a813883a 	mov	r9,r21
 200c020:	dc000415 	stw	r16,16(sp)
 200c024:	dd400515 	stw	r21,20(sp)
 200c028:	003fdc06 	br	200bf9c <__umoddi3+0x11c>
 200c02c:	00bfffd4 	movui	r2,65535
 200c030:	12004a36 	bltu	r2,r8,200c15c <__umoddi3+0x2dc>
 200c034:	00803fc4 	movi	r2,255
 200c038:	12010d36 	bltu	r2,r8,200c470 <__umoddi3+0x5f0>
 200c03c:	000b883a 	mov	r5,zero
 200c040:	0005883a 	mov	r2,zero
 200c044:	9884d83a 	srl	r2,r19,r2
 200c048:	01008074 	movhi	r4,513
 200c04c:	21022a04 	addi	r4,r4,2216
 200c050:	01800804 	movi	r6,32
 200c054:	1105883a 	add	r2,r2,r4
 200c058:	10c00003 	ldbu	r3,0(r2)
 200c05c:	28c7883a 	add	r3,r5,r3
 200c060:	30c7c83a 	sub	r3,r6,r3
 200c064:	1800dc1e 	bne	r3,zero,200c3d8 <__umoddi3+0x558>
 200c068:	002d883a 	mov	r22,zero
 200c06c:	982ed43a 	srli	r23,r19,16
 200c070:	a809883a 	mov	r4,r21
 200c074:	9cbfffcc 	andi	r18,r19,65535
 200c078:	b80b883a 	mov	r5,r23
 200c07c:	2003b280 	call	2003b28 <__udivsi3>
 200c080:	100b883a 	mov	r5,r2
 200c084:	9009883a 	mov	r4,r18
 200c088:	2003b380 	call	2003b38 <__mulsi3>
 200c08c:	a809883a 	mov	r4,r21
 200c090:	b80b883a 	mov	r5,r23
 200c094:	1023883a 	mov	r17,r2
 200c098:	2003b300 	call	2003b30 <__umodsi3>
 200c09c:	1004943a 	slli	r2,r2,16
 200c0a0:	8006d43a 	srli	r3,r16,16
 200c0a4:	10c4b03a 	or	r2,r2,r3
 200c0a8:	1440032e 	bgeu	r2,r17,200c0b8 <__umoddi3+0x238>
 200c0ac:	14c5883a 	add	r2,r2,r19
 200c0b0:	14c00136 	bltu	r2,r19,200c0b8 <__umoddi3+0x238>
 200c0b4:	14410236 	bltu	r2,r17,200c4c0 <__umoddi3+0x640>
 200c0b8:	1463c83a 	sub	r17,r2,r17
 200c0bc:	8809883a 	mov	r4,r17
 200c0c0:	b80b883a 	mov	r5,r23
 200c0c4:	2003b280 	call	2003b28 <__udivsi3>
 200c0c8:	9009883a 	mov	r4,r18
 200c0cc:	100b883a 	mov	r5,r2
 200c0d0:	2003b380 	call	2003b38 <__mulsi3>
 200c0d4:	8809883a 	mov	r4,r17
 200c0d8:	b80b883a 	mov	r5,r23
 200c0dc:	102b883a 	mov	r21,r2
 200c0e0:	2003b300 	call	2003b30 <__umodsi3>
 200c0e4:	1004943a 	slli	r2,r2,16
 200c0e8:	80ffffcc 	andi	r3,r16,65535
 200c0ec:	10c4b03a 	or	r2,r2,r3
 200c0f0:	1540042e 	bgeu	r2,r21,200c104 <__umoddi3+0x284>
 200c0f4:	14c5883a 	add	r2,r2,r19
 200c0f8:	14c00236 	bltu	r2,r19,200c104 <__umoddi3+0x284>
 200c0fc:	1540012e 	bgeu	r2,r21,200c104 <__umoddi3+0x284>
 200c100:	14c5883a 	add	r2,r2,r19
 200c104:	1545c83a 	sub	r2,r2,r21
 200c108:	1584d83a 	srl	r2,r2,r22
 200c10c:	0013883a 	mov	r9,zero
 200c110:	d8800415 	stw	r2,16(sp)
 200c114:	d8c00417 	ldw	r3,16(sp)
 200c118:	0005883a 	mov	r2,zero
 200c11c:	d8800515 	stw	r2,20(sp)
 200c120:	1811883a 	mov	r8,r3
 200c124:	003f9d06 	br	200bf9c <__umoddi3+0x11c>
 200c128:	00804034 	movhi	r2,256
 200c12c:	10bfffc4 	addi	r2,r2,-1
 200c130:	14c0c636 	bltu	r2,r19,200c44c <__umoddi3+0x5cc>
 200c134:	01400404 	movi	r5,16
 200c138:	2805883a 	mov	r2,r5
 200c13c:	003f6c06 	br	200bef0 <__umoddi3+0x70>
 200c140:	01000044 	movi	r4,1
 200c144:	000b883a 	mov	r5,zero
 200c148:	2003b280 	call	2003b28 <__udivsi3>
 200c14c:	1027883a 	mov	r19,r2
 200c150:	00bfffd4 	movui	r2,65535
 200c154:	14fff436 	bltu	r2,r19,200c128 <__umoddi3+0x2a8>
 200c158:	003f6106 	br	200bee0 <__umoddi3+0x60>
 200c15c:	00804034 	movhi	r2,256
 200c160:	10bfffc4 	addi	r2,r2,-1
 200c164:	1200c536 	bltu	r2,r8,200c47c <__umoddi3+0x5fc>
 200c168:	01400404 	movi	r5,16
 200c16c:	2805883a 	mov	r2,r5
 200c170:	003fb406 	br	200c044 <__umoddi3+0x1c4>
 200c174:	00804034 	movhi	r2,256
 200c178:	10bfffc4 	addi	r2,r2,-1
 200c17c:	11c0c236 	bltu	r2,r7,200c488 <__umoddi3+0x608>
 200c180:	01400404 	movi	r5,16
 200c184:	2805883a 	mov	r2,r5
 200c188:	003f9806 	br	200bfec <__umoddi3+0x16c>
 200c18c:	84c9c83a 	sub	r4,r16,r19
 200c190:	8105803a 	cmpltu	r2,r16,r4
 200c194:	a987c83a 	sub	r3,r21,r6
 200c198:	18abc83a 	sub	r21,r3,r2
 200c19c:	2021883a 	mov	r16,r4
 200c1a0:	003f9d06 	br	200c018 <__umoddi3+0x198>
 200c1a4:	9ca6983a 	sll	r19,r19,r18
 200c1a8:	3485c83a 	sub	r2,r6,r18
 200c1ac:	a8a2d83a 	srl	r17,r21,r2
 200c1b0:	982ed43a 	srli	r23,r19,16
 200c1b4:	ac86983a 	sll	r3,r21,r18
 200c1b8:	8084d83a 	srl	r2,r16,r2
 200c1bc:	8809883a 	mov	r4,r17
 200c1c0:	b80b883a 	mov	r5,r23
 200c1c4:	18b8b03a 	or	fp,r3,r2
 200c1c8:	9d3fffcc 	andi	r20,r19,65535
 200c1cc:	2003b280 	call	2003b28 <__udivsi3>
 200c1d0:	100b883a 	mov	r5,r2
 200c1d4:	a009883a 	mov	r4,r20
 200c1d8:	2003b380 	call	2003b38 <__mulsi3>
 200c1dc:	8809883a 	mov	r4,r17
 200c1e0:	b80b883a 	mov	r5,r23
 200c1e4:	102b883a 	mov	r21,r2
 200c1e8:	2003b300 	call	2003b30 <__umodsi3>
 200c1ec:	1004943a 	slli	r2,r2,16
 200c1f0:	e006d43a 	srli	r3,fp,16
 200c1f4:	902d883a 	mov	r22,r18
 200c1f8:	10c4b03a 	or	r2,r2,r3
 200c1fc:	1540022e 	bgeu	r2,r21,200c208 <__umoddi3+0x388>
 200c200:	14c5883a 	add	r2,r2,r19
 200c204:	14c0ab2e 	bgeu	r2,r19,200c4b4 <__umoddi3+0x634>
 200c208:	1563c83a 	sub	r17,r2,r21
 200c20c:	8809883a 	mov	r4,r17
 200c210:	b80b883a 	mov	r5,r23
 200c214:	2003b280 	call	2003b28 <__udivsi3>
 200c218:	100b883a 	mov	r5,r2
 200c21c:	a009883a 	mov	r4,r20
 200c220:	2003b380 	call	2003b38 <__mulsi3>
 200c224:	8809883a 	mov	r4,r17
 200c228:	b80b883a 	mov	r5,r23
 200c22c:	102b883a 	mov	r21,r2
 200c230:	2003b300 	call	2003b30 <__umodsi3>
 200c234:	1004943a 	slli	r2,r2,16
 200c238:	e0ffffcc 	andi	r3,fp,65535
 200c23c:	10c4b03a 	or	r2,r2,r3
 200c240:	1540042e 	bgeu	r2,r21,200c254 <__umoddi3+0x3d4>
 200c244:	14c5883a 	add	r2,r2,r19
 200c248:	14c00236 	bltu	r2,r19,200c254 <__umoddi3+0x3d4>
 200c24c:	1540012e 	bgeu	r2,r21,200c254 <__umoddi3+0x3d4>
 200c250:	14c5883a 	add	r2,r2,r19
 200c254:	84a0983a 	sll	r16,r16,r18
 200c258:	156bc83a 	sub	r21,r2,r21
 200c25c:	003f3106 	br	200bf24 <__umoddi3+0xa4>
 200c260:	3c8fc83a 	sub	r7,r7,r18
 200c264:	3486983a 	sll	r3,r6,r18
 200c268:	99c4d83a 	srl	r2,r19,r7
 200c26c:	a9e2d83a 	srl	r17,r21,r7
 200c270:	ac8c983a 	sll	r6,r21,r18
 200c274:	18acb03a 	or	r22,r3,r2
 200c278:	b02ed43a 	srli	r23,r22,16
 200c27c:	81c4d83a 	srl	r2,r16,r7
 200c280:	8809883a 	mov	r4,r17
 200c284:	b80b883a 	mov	r5,r23
 200c288:	308cb03a 	or	r6,r6,r2
 200c28c:	d9c00315 	stw	r7,12(sp)
 200c290:	d9800215 	stw	r6,8(sp)
 200c294:	b53fffcc 	andi	r20,r22,65535
 200c298:	2003b280 	call	2003b28 <__udivsi3>
 200c29c:	100b883a 	mov	r5,r2
 200c2a0:	a009883a 	mov	r4,r20
 200c2a4:	1039883a 	mov	fp,r2
 200c2a8:	2003b380 	call	2003b38 <__mulsi3>
 200c2ac:	8809883a 	mov	r4,r17
 200c2b0:	b80b883a 	mov	r5,r23
 200c2b4:	102b883a 	mov	r21,r2
 200c2b8:	2003b300 	call	2003b30 <__umodsi3>
 200c2bc:	d9000217 	ldw	r4,8(sp)
 200c2c0:	1004943a 	slli	r2,r2,16
 200c2c4:	9ca6983a 	sll	r19,r19,r18
 200c2c8:	2006d43a 	srli	r3,r4,16
 200c2cc:	84a0983a 	sll	r16,r16,r18
 200c2d0:	dcc00015 	stw	r19,0(sp)
 200c2d4:	10c4b03a 	or	r2,r2,r3
 200c2d8:	dc000115 	stw	r16,4(sp)
 200c2dc:	1540032e 	bgeu	r2,r21,200c2ec <__umoddi3+0x46c>
 200c2e0:	1585883a 	add	r2,r2,r22
 200c2e4:	e73fffc4 	addi	fp,fp,-1
 200c2e8:	15806e2e 	bgeu	r2,r22,200c4a4 <__umoddi3+0x624>
 200c2ec:	1563c83a 	sub	r17,r2,r21
 200c2f0:	8809883a 	mov	r4,r17
 200c2f4:	b80b883a 	mov	r5,r23
 200c2f8:	2003b280 	call	2003b28 <__udivsi3>
 200c2fc:	100b883a 	mov	r5,r2
 200c300:	a009883a 	mov	r4,r20
 200c304:	1021883a 	mov	r16,r2
 200c308:	2003b380 	call	2003b38 <__mulsi3>
 200c30c:	b80b883a 	mov	r5,r23
 200c310:	8809883a 	mov	r4,r17
 200c314:	1029883a 	mov	r20,r2
 200c318:	2003b300 	call	2003b30 <__umodsi3>
 200c31c:	d9400217 	ldw	r5,8(sp)
 200c320:	1004943a 	slli	r2,r2,16
 200c324:	28ffffcc 	andi	r3,r5,65535
 200c328:	10c4b03a 	or	r2,r2,r3
 200c32c:	1500032e 	bgeu	r2,r20,200c33c <__umoddi3+0x4bc>
 200c330:	1585883a 	add	r2,r2,r22
 200c334:	843fffc4 	addi	r16,r16,-1
 200c338:	1580562e 	bgeu	r2,r22,200c494 <__umoddi3+0x614>
 200c33c:	d9800017 	ldw	r6,0(sp)
 200c340:	e022943a 	slli	r17,fp,16
 200c344:	302ed43a 	srli	r23,r6,16
 200c348:	8462b03a 	or	r17,r16,r17
 200c34c:	34ffffcc 	andi	r19,r6,65535
 200c350:	882ad43a 	srli	r21,r17,16
 200c354:	8c7fffcc 	andi	r17,r17,65535
 200c358:	8809883a 	mov	r4,r17
 200c35c:	980b883a 	mov	r5,r19
 200c360:	1521c83a 	sub	r16,r2,r20
 200c364:	2003b380 	call	2003b38 <__mulsi3>
 200c368:	8809883a 	mov	r4,r17
 200c36c:	b80b883a 	mov	r5,r23
 200c370:	1029883a 	mov	r20,r2
 200c374:	2003b380 	call	2003b38 <__mulsi3>
 200c378:	980b883a 	mov	r5,r19
 200c37c:	a809883a 	mov	r4,r21
 200c380:	1023883a 	mov	r17,r2
 200c384:	2003b380 	call	2003b38 <__mulsi3>
 200c388:	a809883a 	mov	r4,r21
 200c38c:	b80b883a 	mov	r5,r23
 200c390:	1027883a 	mov	r19,r2
 200c394:	2003b380 	call	2003b38 <__mulsi3>
 200c398:	100b883a 	mov	r5,r2
 200c39c:	a004d43a 	srli	r2,r20,16
 200c3a0:	8ce3883a 	add	r17,r17,r19
 200c3a4:	1449883a 	add	r4,r2,r17
 200c3a8:	24c0022e 	bgeu	r4,r19,200c3b4 <__umoddi3+0x534>
 200c3ac:	00800074 	movhi	r2,1
 200c3b0:	288b883a 	add	r5,r5,r2
 200c3b4:	2004d43a 	srli	r2,r4,16
 200c3b8:	2008943a 	slli	r4,r4,16
 200c3bc:	a0ffffcc 	andi	r3,r20,65535
 200c3c0:	288d883a 	add	r6,r5,r2
 200c3c4:	20c9883a 	add	r4,r4,r3
 200c3c8:	81800b36 	bltu	r16,r6,200c3f8 <__umoddi3+0x578>
 200c3cc:	81804026 	beq	r16,r6,200c4d0 <__umoddi3+0x650>
 200c3d0:	818dc83a 	sub	r6,r16,r6
 200c3d4:	00000f06 	br	200c414 <__umoddi3+0x594>
 200c3d8:	30c5c83a 	sub	r2,r6,r3
 200c3dc:	182d883a 	mov	r22,r3
 200c3e0:	8084d83a 	srl	r2,r16,r2
 200c3e4:	a8c6983a 	sll	r3,r21,r3
 200c3e8:	9da6983a 	sll	r19,r19,r22
 200c3ec:	85a0983a 	sll	r16,r16,r22
 200c3f0:	18aab03a 	or	r21,r3,r2
 200c3f4:	003f1d06 	br	200c06c <__umoddi3+0x1ec>
 200c3f8:	d8c00017 	ldw	r3,0(sp)
 200c3fc:	20c5c83a 	sub	r2,r4,r3
 200c400:	2089803a 	cmpltu	r4,r4,r2
 200c404:	3587c83a 	sub	r3,r6,r22
 200c408:	1907c83a 	sub	r3,r3,r4
 200c40c:	80cdc83a 	sub	r6,r16,r3
 200c410:	1009883a 	mov	r4,r2
 200c414:	d9400117 	ldw	r5,4(sp)
 200c418:	2905c83a 	sub	r2,r5,r4
 200c41c:	2887803a 	cmpltu	r3,r5,r2
 200c420:	30c7c83a 	sub	r3,r6,r3
 200c424:	d9800317 	ldw	r6,12(sp)
 200c428:	1484d83a 	srl	r2,r2,r18
 200c42c:	1988983a 	sll	r4,r3,r6
 200c430:	1c86d83a 	srl	r3,r3,r18
 200c434:	2088b03a 	or	r4,r4,r2
 200c438:	2011883a 	mov	r8,r4
 200c43c:	1813883a 	mov	r9,r3
 200c440:	d9000415 	stw	r4,16(sp)
 200c444:	d8c00515 	stw	r3,20(sp)
 200c448:	003ed406 	br	200bf9c <__umoddi3+0x11c>
 200c44c:	01400604 	movi	r5,24
 200c450:	2805883a 	mov	r2,r5
 200c454:	003ea606 	br	200bef0 <__umoddi3+0x70>
 200c458:	01400204 	movi	r5,8
 200c45c:	2805883a 	mov	r2,r5
 200c460:	003ea306 	br	200bef0 <__umoddi3+0x70>
 200c464:	01400204 	movi	r5,8
 200c468:	2805883a 	mov	r2,r5
 200c46c:	003edf06 	br	200bfec <__umoddi3+0x16c>
 200c470:	01400204 	movi	r5,8
 200c474:	2805883a 	mov	r2,r5
 200c478:	003ef206 	br	200c044 <__umoddi3+0x1c4>
 200c47c:	01400604 	movi	r5,24
 200c480:	2805883a 	mov	r2,r5
 200c484:	003eef06 	br	200c044 <__umoddi3+0x1c4>
 200c488:	01400604 	movi	r5,24
 200c48c:	2805883a 	mov	r2,r5
 200c490:	003ed606 	br	200bfec <__umoddi3+0x16c>
 200c494:	153fa92e 	bgeu	r2,r20,200c33c <__umoddi3+0x4bc>
 200c498:	843fffc4 	addi	r16,r16,-1
 200c49c:	1585883a 	add	r2,r2,r22
 200c4a0:	003fa606 	br	200c33c <__umoddi3+0x4bc>
 200c4a4:	157f912e 	bgeu	r2,r21,200c2ec <__umoddi3+0x46c>
 200c4a8:	e73fffc4 	addi	fp,fp,-1
 200c4ac:	1585883a 	add	r2,r2,r22
 200c4b0:	003f8e06 	br	200c2ec <__umoddi3+0x46c>
 200c4b4:	157f542e 	bgeu	r2,r21,200c208 <__umoddi3+0x388>
 200c4b8:	14c5883a 	add	r2,r2,r19
 200c4bc:	003f5206 	br	200c208 <__umoddi3+0x388>
 200c4c0:	14c5883a 	add	r2,r2,r19
 200c4c4:	003efc06 	br	200c0b8 <__umoddi3+0x238>
 200c4c8:	14c5883a 	add	r2,r2,r19
 200c4cc:	003ea606 	br	200bf68 <__umoddi3+0xe8>
 200c4d0:	d8800117 	ldw	r2,4(sp)
 200c4d4:	113fc836 	bltu	r2,r4,200c3f8 <__umoddi3+0x578>
 200c4d8:	000d883a 	mov	r6,zero
 200c4dc:	003fcd06 	br	200c414 <__umoddi3+0x594>

0200c4e0 <_fpadd_parts>:
 200c4e0:	defff804 	addi	sp,sp,-32
 200c4e4:	dcc00315 	stw	r19,12(sp)
 200c4e8:	2027883a 	mov	r19,r4
 200c4ec:	21000017 	ldw	r4,0(r4)
 200c4f0:	00c00044 	movi	r3,1
 200c4f4:	dd400515 	stw	r21,20(sp)
 200c4f8:	dd000415 	stw	r20,16(sp)
 200c4fc:	ddc00715 	stw	r23,28(sp)
 200c500:	dd800615 	stw	r22,24(sp)
 200c504:	dc800215 	stw	r18,8(sp)
 200c508:	dc400115 	stw	r17,4(sp)
 200c50c:	dc000015 	stw	r16,0(sp)
 200c510:	282b883a 	mov	r21,r5
 200c514:	3029883a 	mov	r20,r6
 200c518:	1900632e 	bgeu	r3,r4,200c6a8 <_fpadd_parts+0x1c8>
 200c51c:	28800017 	ldw	r2,0(r5)
 200c520:	1880812e 	bgeu	r3,r2,200c728 <_fpadd_parts+0x248>
 200c524:	00c00104 	movi	r3,4
 200c528:	20c0dc26 	beq	r4,r3,200c89c <_fpadd_parts+0x3bc>
 200c52c:	10c07e26 	beq	r2,r3,200c728 <_fpadd_parts+0x248>
 200c530:	00c00084 	movi	r3,2
 200c534:	10c06726 	beq	r2,r3,200c6d4 <_fpadd_parts+0x1f4>
 200c538:	20c07b26 	beq	r4,r3,200c728 <_fpadd_parts+0x248>
 200c53c:	9dc00217 	ldw	r23,8(r19)
 200c540:	28c00217 	ldw	r3,8(r5)
 200c544:	9c400317 	ldw	r17,12(r19)
 200c548:	2bc00317 	ldw	r15,12(r5)
 200c54c:	b8cdc83a 	sub	r6,r23,r3
 200c550:	9c800417 	ldw	r18,16(r19)
 200c554:	2c000417 	ldw	r16,16(r5)
 200c558:	3009883a 	mov	r4,r6
 200c55c:	30009716 	blt	r6,zero,200c7bc <_fpadd_parts+0x2dc>
 200c560:	00800fc4 	movi	r2,63
 200c564:	11806b16 	blt	r2,r6,200c714 <_fpadd_parts+0x234>
 200c568:	0100a40e 	bge	zero,r4,200c7fc <_fpadd_parts+0x31c>
 200c56c:	35bff804 	addi	r22,r6,-32
 200c570:	b000bc16 	blt	r22,zero,200c864 <_fpadd_parts+0x384>
 200c574:	8596d83a 	srl	r11,r16,r22
 200c578:	0019883a 	mov	r12,zero
 200c57c:	0013883a 	mov	r9,zero
 200c580:	01000044 	movi	r4,1
 200c584:	0015883a 	mov	r10,zero
 200c588:	b000be16 	blt	r22,zero,200c884 <_fpadd_parts+0x3a4>
 200c58c:	2590983a 	sll	r8,r4,r22
 200c590:	000f883a 	mov	r7,zero
 200c594:	00bfffc4 	movi	r2,-1
 200c598:	3889883a 	add	r4,r7,r2
 200c59c:	408b883a 	add	r5,r8,r2
 200c5a0:	21cd803a 	cmpltu	r6,r4,r7
 200c5a4:	314b883a 	add	r5,r6,r5
 200c5a8:	7904703a 	and	r2,r15,r4
 200c5ac:	8146703a 	and	r3,r16,r5
 200c5b0:	10c4b03a 	or	r2,r2,r3
 200c5b4:	10000226 	beq	r2,zero,200c5c0 <_fpadd_parts+0xe0>
 200c5b8:	02400044 	movi	r9,1
 200c5bc:	0015883a 	mov	r10,zero
 200c5c0:	5a5eb03a 	or	r15,r11,r9
 200c5c4:	62a0b03a 	or	r16,r12,r10
 200c5c8:	99400117 	ldw	r5,4(r19)
 200c5cc:	a8800117 	ldw	r2,4(r21)
 200c5d0:	28806e26 	beq	r5,r2,200c78c <_fpadd_parts+0x2ac>
 200c5d4:	28006626 	beq	r5,zero,200c770 <_fpadd_parts+0x290>
 200c5d8:	7c45c83a 	sub	r2,r15,r17
 200c5dc:	7889803a 	cmpltu	r4,r15,r2
 200c5e0:	8487c83a 	sub	r3,r16,r18
 200c5e4:	1909c83a 	sub	r4,r3,r4
 200c5e8:	100d883a 	mov	r6,r2
 200c5ec:	200f883a 	mov	r7,r4
 200c5f0:	38007716 	blt	r7,zero,200c7d0 <_fpadd_parts+0x2f0>
 200c5f4:	a5c00215 	stw	r23,8(r20)
 200c5f8:	a1c00415 	stw	r7,16(r20)
 200c5fc:	a0000115 	stw	zero,4(r20)
 200c600:	a1800315 	stw	r6,12(r20)
 200c604:	a2000317 	ldw	r8,12(r20)
 200c608:	a2400417 	ldw	r9,16(r20)
 200c60c:	00bfffc4 	movi	r2,-1
 200c610:	408b883a 	add	r5,r8,r2
 200c614:	2a09803a 	cmpltu	r4,r5,r8
 200c618:	488d883a 	add	r6,r9,r2
 200c61c:	01c40034 	movhi	r7,4096
 200c620:	39ffffc4 	addi	r7,r7,-1
 200c624:	218d883a 	add	r6,r4,r6
 200c628:	39801736 	bltu	r7,r6,200c688 <_fpadd_parts+0x1a8>
 200c62c:	31c06526 	beq	r6,r7,200c7c4 <_fpadd_parts+0x2e4>
 200c630:	a3000217 	ldw	r12,8(r20)
 200c634:	4209883a 	add	r4,r8,r8
 200c638:	00bfffc4 	movi	r2,-1
 200c63c:	220f803a 	cmpltu	r7,r4,r8
 200c640:	4a4b883a 	add	r5,r9,r9
 200c644:	394f883a 	add	r7,r7,r5
 200c648:	2095883a 	add	r10,r4,r2
 200c64c:	3897883a 	add	r11,r7,r2
 200c650:	510d803a 	cmpltu	r6,r10,r4
 200c654:	6099883a 	add	r12,r12,r2
 200c658:	32d7883a 	add	r11,r6,r11
 200c65c:	00840034 	movhi	r2,4096
 200c660:	10bfffc4 	addi	r2,r2,-1
 200c664:	2011883a 	mov	r8,r4
 200c668:	3813883a 	mov	r9,r7
 200c66c:	a1000315 	stw	r4,12(r20)
 200c670:	a1c00415 	stw	r7,16(r20)
 200c674:	a3000215 	stw	r12,8(r20)
 200c678:	12c00336 	bltu	r2,r11,200c688 <_fpadd_parts+0x1a8>
 200c67c:	58bfed1e 	bne	r11,r2,200c634 <_fpadd_parts+0x154>
 200c680:	00bfff84 	movi	r2,-2
 200c684:	12bfeb2e 	bgeu	r2,r10,200c634 <_fpadd_parts+0x154>
 200c688:	a2800417 	ldw	r10,16(r20)
 200c68c:	008000c4 	movi	r2,3
 200c690:	00c80034 	movhi	r3,8192
 200c694:	18ffffc4 	addi	r3,r3,-1
 200c698:	a2400317 	ldw	r9,12(r20)
 200c69c:	a0800015 	stw	r2,0(r20)
 200c6a0:	1a802336 	bltu	r3,r10,200c730 <_fpadd_parts+0x250>
 200c6a4:	a027883a 	mov	r19,r20
 200c6a8:	9805883a 	mov	r2,r19
 200c6ac:	ddc00717 	ldw	r23,28(sp)
 200c6b0:	dd800617 	ldw	r22,24(sp)
 200c6b4:	dd400517 	ldw	r21,20(sp)
 200c6b8:	dd000417 	ldw	r20,16(sp)
 200c6bc:	dcc00317 	ldw	r19,12(sp)
 200c6c0:	dc800217 	ldw	r18,8(sp)
 200c6c4:	dc400117 	ldw	r17,4(sp)
 200c6c8:	dc000017 	ldw	r16,0(sp)
 200c6cc:	dec00804 	addi	sp,sp,32
 200c6d0:	f800283a 	ret
 200c6d4:	20fff41e 	bne	r4,r3,200c6a8 <_fpadd_parts+0x1c8>
 200c6d8:	31000015 	stw	r4,0(r6)
 200c6dc:	98800117 	ldw	r2,4(r19)
 200c6e0:	30800115 	stw	r2,4(r6)
 200c6e4:	98c00217 	ldw	r3,8(r19)
 200c6e8:	30c00215 	stw	r3,8(r6)
 200c6ec:	98800317 	ldw	r2,12(r19)
 200c6f0:	30800315 	stw	r2,12(r6)
 200c6f4:	98c00417 	ldw	r3,16(r19)
 200c6f8:	30c00415 	stw	r3,16(r6)
 200c6fc:	98800117 	ldw	r2,4(r19)
 200c700:	28c00117 	ldw	r3,4(r5)
 200c704:	3027883a 	mov	r19,r6
 200c708:	10c4703a 	and	r2,r2,r3
 200c70c:	30800115 	stw	r2,4(r6)
 200c710:	003fe506 	br	200c6a8 <_fpadd_parts+0x1c8>
 200c714:	1dc02616 	blt	r3,r23,200c7b0 <_fpadd_parts+0x2d0>
 200c718:	0023883a 	mov	r17,zero
 200c71c:	182f883a 	mov	r23,r3
 200c720:	0025883a 	mov	r18,zero
 200c724:	003fa806 	br	200c5c8 <_fpadd_parts+0xe8>
 200c728:	a827883a 	mov	r19,r21
 200c72c:	003fde06 	br	200c6a8 <_fpadd_parts+0x1c8>
 200c730:	01800044 	movi	r6,1
 200c734:	500497fa 	slli	r2,r10,31
 200c738:	4808d07a 	srli	r4,r9,1
 200c73c:	518ad83a 	srl	r5,r10,r6
 200c740:	a2000217 	ldw	r8,8(r20)
 200c744:	1108b03a 	or	r4,r2,r4
 200c748:	0007883a 	mov	r3,zero
 200c74c:	4984703a 	and	r2,r9,r6
 200c750:	208cb03a 	or	r6,r4,r2
 200c754:	28ceb03a 	or	r7,r5,r3
 200c758:	42000044 	addi	r8,r8,1
 200c75c:	a027883a 	mov	r19,r20
 200c760:	a1c00415 	stw	r7,16(r20)
 200c764:	a2000215 	stw	r8,8(r20)
 200c768:	a1800315 	stw	r6,12(r20)
 200c76c:	003fce06 	br	200c6a8 <_fpadd_parts+0x1c8>
 200c770:	8bc5c83a 	sub	r2,r17,r15
 200c774:	8889803a 	cmpltu	r4,r17,r2
 200c778:	9407c83a 	sub	r3,r18,r16
 200c77c:	1909c83a 	sub	r4,r3,r4
 200c780:	100d883a 	mov	r6,r2
 200c784:	200f883a 	mov	r7,r4
 200c788:	003f9906 	br	200c5f0 <_fpadd_parts+0x110>
 200c78c:	7c45883a 	add	r2,r15,r17
 200c790:	13c9803a 	cmpltu	r4,r2,r15
 200c794:	8487883a 	add	r3,r16,r18
 200c798:	20c9883a 	add	r4,r4,r3
 200c79c:	a1400115 	stw	r5,4(r20)
 200c7a0:	a5c00215 	stw	r23,8(r20)
 200c7a4:	a0800315 	stw	r2,12(r20)
 200c7a8:	a1000415 	stw	r4,16(r20)
 200c7ac:	003fb606 	br	200c688 <_fpadd_parts+0x1a8>
 200c7b0:	001f883a 	mov	r15,zero
 200c7b4:	0021883a 	mov	r16,zero
 200c7b8:	003f8306 	br	200c5c8 <_fpadd_parts+0xe8>
 200c7bc:	018dc83a 	sub	r6,zero,r6
 200c7c0:	003f6706 	br	200c560 <_fpadd_parts+0x80>
 200c7c4:	00bfff84 	movi	r2,-2
 200c7c8:	117faf36 	bltu	r2,r5,200c688 <_fpadd_parts+0x1a8>
 200c7cc:	003f9806 	br	200c630 <_fpadd_parts+0x150>
 200c7d0:	0005883a 	mov	r2,zero
 200c7d4:	1189c83a 	sub	r4,r2,r6
 200c7d8:	1105803a 	cmpltu	r2,r2,r4
 200c7dc:	01cbc83a 	sub	r5,zero,r7
 200c7e0:	2885c83a 	sub	r2,r5,r2
 200c7e4:	01800044 	movi	r6,1
 200c7e8:	a1800115 	stw	r6,4(r20)
 200c7ec:	a5c00215 	stw	r23,8(r20)
 200c7f0:	a1000315 	stw	r4,12(r20)
 200c7f4:	a0800415 	stw	r2,16(r20)
 200c7f8:	003f8206 	br	200c604 <_fpadd_parts+0x124>
 200c7fc:	203f7226 	beq	r4,zero,200c5c8 <_fpadd_parts+0xe8>
 200c800:	35bff804 	addi	r22,r6,-32
 200c804:	b9af883a 	add	r23,r23,r6
 200c808:	b0003116 	blt	r22,zero,200c8d0 <_fpadd_parts+0x3f0>
 200c80c:	959ad83a 	srl	r13,r18,r22
 200c810:	001d883a 	mov	r14,zero
 200c814:	000f883a 	mov	r7,zero
 200c818:	01000044 	movi	r4,1
 200c81c:	0011883a 	mov	r8,zero
 200c820:	b0002516 	blt	r22,zero,200c8b8 <_fpadd_parts+0x3d8>
 200c824:	2594983a 	sll	r10,r4,r22
 200c828:	0013883a 	mov	r9,zero
 200c82c:	00bfffc4 	movi	r2,-1
 200c830:	4889883a 	add	r4,r9,r2
 200c834:	508b883a 	add	r5,r10,r2
 200c838:	224d803a 	cmpltu	r6,r4,r9
 200c83c:	314b883a 	add	r5,r6,r5
 200c840:	8904703a 	and	r2,r17,r4
 200c844:	9146703a 	and	r3,r18,r5
 200c848:	10c4b03a 	or	r2,r2,r3
 200c84c:	10000226 	beq	r2,zero,200c858 <_fpadd_parts+0x378>
 200c850:	01c00044 	movi	r7,1
 200c854:	0011883a 	mov	r8,zero
 200c858:	69e2b03a 	or	r17,r13,r7
 200c85c:	7224b03a 	or	r18,r14,r8
 200c860:	003f5906 	br	200c5c8 <_fpadd_parts+0xe8>
 200c864:	8407883a 	add	r3,r16,r16
 200c868:	008007c4 	movi	r2,31
 200c86c:	1185c83a 	sub	r2,r2,r6
 200c870:	1886983a 	sll	r3,r3,r2
 200c874:	7996d83a 	srl	r11,r15,r6
 200c878:	8198d83a 	srl	r12,r16,r6
 200c87c:	1ad6b03a 	or	r11,r3,r11
 200c880:	003f3e06 	br	200c57c <_fpadd_parts+0x9c>
 200c884:	2006d07a 	srli	r3,r4,1
 200c888:	008007c4 	movi	r2,31
 200c88c:	1185c83a 	sub	r2,r2,r6
 200c890:	1890d83a 	srl	r8,r3,r2
 200c894:	218e983a 	sll	r7,r4,r6
 200c898:	003f3e06 	br	200c594 <_fpadd_parts+0xb4>
 200c89c:	113f821e 	bne	r2,r4,200c6a8 <_fpadd_parts+0x1c8>
 200c8a0:	28c00117 	ldw	r3,4(r5)
 200c8a4:	98800117 	ldw	r2,4(r19)
 200c8a8:	10ff7f26 	beq	r2,r3,200c6a8 <_fpadd_parts+0x1c8>
 200c8ac:	04c08074 	movhi	r19,513
 200c8b0:	9cc22504 	addi	r19,r19,2196
 200c8b4:	003f7c06 	br	200c6a8 <_fpadd_parts+0x1c8>
 200c8b8:	2006d07a 	srli	r3,r4,1
 200c8bc:	008007c4 	movi	r2,31
 200c8c0:	1185c83a 	sub	r2,r2,r6
 200c8c4:	1894d83a 	srl	r10,r3,r2
 200c8c8:	2192983a 	sll	r9,r4,r6
 200c8cc:	003fd706 	br	200c82c <_fpadd_parts+0x34c>
 200c8d0:	9487883a 	add	r3,r18,r18
 200c8d4:	008007c4 	movi	r2,31
 200c8d8:	1185c83a 	sub	r2,r2,r6
 200c8dc:	1886983a 	sll	r3,r3,r2
 200c8e0:	899ad83a 	srl	r13,r17,r6
 200c8e4:	919cd83a 	srl	r14,r18,r6
 200c8e8:	1b5ab03a 	or	r13,r3,r13
 200c8ec:	003fc906 	br	200c814 <_fpadd_parts+0x334>

0200c8f0 <__subdf3>:
 200c8f0:	deffea04 	addi	sp,sp,-88
 200c8f4:	dcc01415 	stw	r19,80(sp)
 200c8f8:	dcc00404 	addi	r19,sp,16
 200c8fc:	2011883a 	mov	r8,r4
 200c900:	2813883a 	mov	r9,r5
 200c904:	dc401315 	stw	r17,76(sp)
 200c908:	d809883a 	mov	r4,sp
 200c90c:	980b883a 	mov	r5,r19
 200c910:	dc400904 	addi	r17,sp,36
 200c914:	dfc01515 	stw	ra,84(sp)
 200c918:	da400115 	stw	r9,4(sp)
 200c91c:	d9c00315 	stw	r7,12(sp)
 200c920:	da000015 	stw	r8,0(sp)
 200c924:	d9800215 	stw	r6,8(sp)
 200c928:	200427c0 	call	200427c <__unpack_d>
 200c92c:	d9000204 	addi	r4,sp,8
 200c930:	880b883a 	mov	r5,r17
 200c934:	200427c0 	call	200427c <__unpack_d>
 200c938:	d8800a17 	ldw	r2,40(sp)
 200c93c:	880b883a 	mov	r5,r17
 200c940:	9809883a 	mov	r4,r19
 200c944:	d9800e04 	addi	r6,sp,56
 200c948:	1080005c 	xori	r2,r2,1
 200c94c:	d8800a15 	stw	r2,40(sp)
 200c950:	200c4e00 	call	200c4e0 <_fpadd_parts>
 200c954:	1009883a 	mov	r4,r2
 200c958:	2003f680 	call	2003f68 <__pack_d>
 200c95c:	dfc01517 	ldw	ra,84(sp)
 200c960:	dcc01417 	ldw	r19,80(sp)
 200c964:	dc401317 	ldw	r17,76(sp)
 200c968:	dec01604 	addi	sp,sp,88
 200c96c:	f800283a 	ret

0200c970 <__adddf3>:
 200c970:	deffea04 	addi	sp,sp,-88
 200c974:	dcc01415 	stw	r19,80(sp)
 200c978:	dcc00404 	addi	r19,sp,16
 200c97c:	2011883a 	mov	r8,r4
 200c980:	2813883a 	mov	r9,r5
 200c984:	dc401315 	stw	r17,76(sp)
 200c988:	d809883a 	mov	r4,sp
 200c98c:	980b883a 	mov	r5,r19
 200c990:	dc400904 	addi	r17,sp,36
 200c994:	dfc01515 	stw	ra,84(sp)
 200c998:	da400115 	stw	r9,4(sp)
 200c99c:	d9c00315 	stw	r7,12(sp)
 200c9a0:	da000015 	stw	r8,0(sp)
 200c9a4:	d9800215 	stw	r6,8(sp)
 200c9a8:	200427c0 	call	200427c <__unpack_d>
 200c9ac:	d9000204 	addi	r4,sp,8
 200c9b0:	880b883a 	mov	r5,r17
 200c9b4:	200427c0 	call	200427c <__unpack_d>
 200c9b8:	d9800e04 	addi	r6,sp,56
 200c9bc:	9809883a 	mov	r4,r19
 200c9c0:	880b883a 	mov	r5,r17
 200c9c4:	200c4e00 	call	200c4e0 <_fpadd_parts>
 200c9c8:	1009883a 	mov	r4,r2
 200c9cc:	2003f680 	call	2003f68 <__pack_d>
 200c9d0:	dfc01517 	ldw	ra,84(sp)
 200c9d4:	dcc01417 	ldw	r19,80(sp)
 200c9d8:	dc401317 	ldw	r17,76(sp)
 200c9dc:	dec01604 	addi	sp,sp,88
 200c9e0:	f800283a 	ret

0200c9e4 <__eqdf2>:
 200c9e4:	deffef04 	addi	sp,sp,-68
 200c9e8:	dc400f15 	stw	r17,60(sp)
 200c9ec:	dc400404 	addi	r17,sp,16
 200c9f0:	2005883a 	mov	r2,r4
 200c9f4:	2807883a 	mov	r3,r5
 200c9f8:	dc000e15 	stw	r16,56(sp)
 200c9fc:	d809883a 	mov	r4,sp
 200ca00:	880b883a 	mov	r5,r17
 200ca04:	dc000904 	addi	r16,sp,36
 200ca08:	d8c00115 	stw	r3,4(sp)
 200ca0c:	d8800015 	stw	r2,0(sp)
 200ca10:	d9800215 	stw	r6,8(sp)
 200ca14:	dfc01015 	stw	ra,64(sp)
 200ca18:	d9c00315 	stw	r7,12(sp)
 200ca1c:	200427c0 	call	200427c <__unpack_d>
 200ca20:	d9000204 	addi	r4,sp,8
 200ca24:	800b883a 	mov	r5,r16
 200ca28:	200427c0 	call	200427c <__unpack_d>
 200ca2c:	d8800417 	ldw	r2,16(sp)
 200ca30:	00c00044 	movi	r3,1
 200ca34:	180d883a 	mov	r6,r3
 200ca38:	1880062e 	bgeu	r3,r2,200ca54 <__eqdf2+0x70>
 200ca3c:	d8800917 	ldw	r2,36(sp)
 200ca40:	8809883a 	mov	r4,r17
 200ca44:	800b883a 	mov	r5,r16
 200ca48:	1880022e 	bgeu	r3,r2,200ca54 <__eqdf2+0x70>
 200ca4c:	200cd640 	call	200cd64 <__fpcmp_parts_d>
 200ca50:	100d883a 	mov	r6,r2
 200ca54:	3005883a 	mov	r2,r6
 200ca58:	dfc01017 	ldw	ra,64(sp)
 200ca5c:	dc400f17 	ldw	r17,60(sp)
 200ca60:	dc000e17 	ldw	r16,56(sp)
 200ca64:	dec01104 	addi	sp,sp,68
 200ca68:	f800283a 	ret

0200ca6c <__nedf2>:
 200ca6c:	deffef04 	addi	sp,sp,-68
 200ca70:	dc400f15 	stw	r17,60(sp)
 200ca74:	dc400404 	addi	r17,sp,16
 200ca78:	2005883a 	mov	r2,r4
 200ca7c:	2807883a 	mov	r3,r5
 200ca80:	dc000e15 	stw	r16,56(sp)
 200ca84:	d809883a 	mov	r4,sp
 200ca88:	880b883a 	mov	r5,r17
 200ca8c:	dc000904 	addi	r16,sp,36
 200ca90:	d8c00115 	stw	r3,4(sp)
 200ca94:	d8800015 	stw	r2,0(sp)
 200ca98:	d9800215 	stw	r6,8(sp)
 200ca9c:	dfc01015 	stw	ra,64(sp)
 200caa0:	d9c00315 	stw	r7,12(sp)
 200caa4:	200427c0 	call	200427c <__unpack_d>
 200caa8:	d9000204 	addi	r4,sp,8
 200caac:	800b883a 	mov	r5,r16
 200cab0:	200427c0 	call	200427c <__unpack_d>
 200cab4:	d8800417 	ldw	r2,16(sp)
 200cab8:	00c00044 	movi	r3,1
 200cabc:	180d883a 	mov	r6,r3
 200cac0:	1880062e 	bgeu	r3,r2,200cadc <__nedf2+0x70>
 200cac4:	d8800917 	ldw	r2,36(sp)
 200cac8:	8809883a 	mov	r4,r17
 200cacc:	800b883a 	mov	r5,r16
 200cad0:	1880022e 	bgeu	r3,r2,200cadc <__nedf2+0x70>
 200cad4:	200cd640 	call	200cd64 <__fpcmp_parts_d>
 200cad8:	100d883a 	mov	r6,r2
 200cadc:	3005883a 	mov	r2,r6
 200cae0:	dfc01017 	ldw	ra,64(sp)
 200cae4:	dc400f17 	ldw	r17,60(sp)
 200cae8:	dc000e17 	ldw	r16,56(sp)
 200caec:	dec01104 	addi	sp,sp,68
 200caf0:	f800283a 	ret

0200caf4 <__gtdf2>:
 200caf4:	deffef04 	addi	sp,sp,-68
 200caf8:	dc400f15 	stw	r17,60(sp)
 200cafc:	dc400404 	addi	r17,sp,16
 200cb00:	2005883a 	mov	r2,r4
 200cb04:	2807883a 	mov	r3,r5
 200cb08:	dc000e15 	stw	r16,56(sp)
 200cb0c:	d809883a 	mov	r4,sp
 200cb10:	880b883a 	mov	r5,r17
 200cb14:	dc000904 	addi	r16,sp,36
 200cb18:	d8c00115 	stw	r3,4(sp)
 200cb1c:	d8800015 	stw	r2,0(sp)
 200cb20:	d9800215 	stw	r6,8(sp)
 200cb24:	dfc01015 	stw	ra,64(sp)
 200cb28:	d9c00315 	stw	r7,12(sp)
 200cb2c:	200427c0 	call	200427c <__unpack_d>
 200cb30:	d9000204 	addi	r4,sp,8
 200cb34:	800b883a 	mov	r5,r16
 200cb38:	200427c0 	call	200427c <__unpack_d>
 200cb3c:	d8800417 	ldw	r2,16(sp)
 200cb40:	00c00044 	movi	r3,1
 200cb44:	01bfffc4 	movi	r6,-1
 200cb48:	1880062e 	bgeu	r3,r2,200cb64 <__gtdf2+0x70>
 200cb4c:	d8800917 	ldw	r2,36(sp)
 200cb50:	8809883a 	mov	r4,r17
 200cb54:	800b883a 	mov	r5,r16
 200cb58:	1880022e 	bgeu	r3,r2,200cb64 <__gtdf2+0x70>
 200cb5c:	200cd640 	call	200cd64 <__fpcmp_parts_d>
 200cb60:	100d883a 	mov	r6,r2
 200cb64:	3005883a 	mov	r2,r6
 200cb68:	dfc01017 	ldw	ra,64(sp)
 200cb6c:	dc400f17 	ldw	r17,60(sp)
 200cb70:	dc000e17 	ldw	r16,56(sp)
 200cb74:	dec01104 	addi	sp,sp,68
 200cb78:	f800283a 	ret

0200cb7c <__gedf2>:
 200cb7c:	deffef04 	addi	sp,sp,-68
 200cb80:	dc400f15 	stw	r17,60(sp)
 200cb84:	dc400404 	addi	r17,sp,16
 200cb88:	2005883a 	mov	r2,r4
 200cb8c:	2807883a 	mov	r3,r5
 200cb90:	dc000e15 	stw	r16,56(sp)
 200cb94:	d809883a 	mov	r4,sp
 200cb98:	880b883a 	mov	r5,r17
 200cb9c:	dc000904 	addi	r16,sp,36
 200cba0:	d8c00115 	stw	r3,4(sp)
 200cba4:	d8800015 	stw	r2,0(sp)
 200cba8:	d9800215 	stw	r6,8(sp)
 200cbac:	dfc01015 	stw	ra,64(sp)
 200cbb0:	d9c00315 	stw	r7,12(sp)
 200cbb4:	200427c0 	call	200427c <__unpack_d>
 200cbb8:	d9000204 	addi	r4,sp,8
 200cbbc:	800b883a 	mov	r5,r16
 200cbc0:	200427c0 	call	200427c <__unpack_d>
 200cbc4:	d8800417 	ldw	r2,16(sp)
 200cbc8:	00c00044 	movi	r3,1
 200cbcc:	01bfffc4 	movi	r6,-1
 200cbd0:	1880062e 	bgeu	r3,r2,200cbec <__gedf2+0x70>
 200cbd4:	d8800917 	ldw	r2,36(sp)
 200cbd8:	8809883a 	mov	r4,r17
 200cbdc:	800b883a 	mov	r5,r16
 200cbe0:	1880022e 	bgeu	r3,r2,200cbec <__gedf2+0x70>
 200cbe4:	200cd640 	call	200cd64 <__fpcmp_parts_d>
 200cbe8:	100d883a 	mov	r6,r2
 200cbec:	3005883a 	mov	r2,r6
 200cbf0:	dfc01017 	ldw	ra,64(sp)
 200cbf4:	dc400f17 	ldw	r17,60(sp)
 200cbf8:	dc000e17 	ldw	r16,56(sp)
 200cbfc:	dec01104 	addi	sp,sp,68
 200cc00:	f800283a 	ret

0200cc04 <__ltdf2>:
 200cc04:	deffef04 	addi	sp,sp,-68
 200cc08:	dc400f15 	stw	r17,60(sp)
 200cc0c:	dc400404 	addi	r17,sp,16
 200cc10:	2005883a 	mov	r2,r4
 200cc14:	2807883a 	mov	r3,r5
 200cc18:	dc000e15 	stw	r16,56(sp)
 200cc1c:	d809883a 	mov	r4,sp
 200cc20:	880b883a 	mov	r5,r17
 200cc24:	dc000904 	addi	r16,sp,36
 200cc28:	d8c00115 	stw	r3,4(sp)
 200cc2c:	d8800015 	stw	r2,0(sp)
 200cc30:	d9800215 	stw	r6,8(sp)
 200cc34:	dfc01015 	stw	ra,64(sp)
 200cc38:	d9c00315 	stw	r7,12(sp)
 200cc3c:	200427c0 	call	200427c <__unpack_d>
 200cc40:	d9000204 	addi	r4,sp,8
 200cc44:	800b883a 	mov	r5,r16
 200cc48:	200427c0 	call	200427c <__unpack_d>
 200cc4c:	d8800417 	ldw	r2,16(sp)
 200cc50:	00c00044 	movi	r3,1
 200cc54:	180d883a 	mov	r6,r3
 200cc58:	1880062e 	bgeu	r3,r2,200cc74 <__ltdf2+0x70>
 200cc5c:	d8800917 	ldw	r2,36(sp)
 200cc60:	8809883a 	mov	r4,r17
 200cc64:	800b883a 	mov	r5,r16
 200cc68:	1880022e 	bgeu	r3,r2,200cc74 <__ltdf2+0x70>
 200cc6c:	200cd640 	call	200cd64 <__fpcmp_parts_d>
 200cc70:	100d883a 	mov	r6,r2
 200cc74:	3005883a 	mov	r2,r6
 200cc78:	dfc01017 	ldw	ra,64(sp)
 200cc7c:	dc400f17 	ldw	r17,60(sp)
 200cc80:	dc000e17 	ldw	r16,56(sp)
 200cc84:	dec01104 	addi	sp,sp,68
 200cc88:	f800283a 	ret

0200cc8c <__fixdfsi>:
 200cc8c:	defff804 	addi	sp,sp,-32
 200cc90:	2005883a 	mov	r2,r4
 200cc94:	2807883a 	mov	r3,r5
 200cc98:	d809883a 	mov	r4,sp
 200cc9c:	d9400204 	addi	r5,sp,8
 200cca0:	d8c00115 	stw	r3,4(sp)
 200cca4:	d8800015 	stw	r2,0(sp)
 200cca8:	dfc00715 	stw	ra,28(sp)
 200ccac:	200427c0 	call	200427c <__unpack_d>
 200ccb0:	d8c00217 	ldw	r3,8(sp)
 200ccb4:	00800084 	movi	r2,2
 200ccb8:	1880051e 	bne	r3,r2,200ccd0 <__fixdfsi+0x44>
 200ccbc:	0007883a 	mov	r3,zero
 200ccc0:	1805883a 	mov	r2,r3
 200ccc4:	dfc00717 	ldw	ra,28(sp)
 200ccc8:	dec00804 	addi	sp,sp,32
 200cccc:	f800283a 	ret
 200ccd0:	00800044 	movi	r2,1
 200ccd4:	10fff92e 	bgeu	r2,r3,200ccbc <__fixdfsi+0x30>
 200ccd8:	00800104 	movi	r2,4
 200ccdc:	18800426 	beq	r3,r2,200ccf0 <__fixdfsi+0x64>
 200cce0:	d8c00417 	ldw	r3,16(sp)
 200cce4:	183ff516 	blt	r3,zero,200ccbc <__fixdfsi+0x30>
 200cce8:	00800784 	movi	r2,30
 200ccec:	10c0080e 	bge	r2,r3,200cd10 <__fixdfsi+0x84>
 200ccf0:	d8800317 	ldw	r2,12(sp)
 200ccf4:	1000121e 	bne	r2,zero,200cd40 <__fixdfsi+0xb4>
 200ccf8:	00e00034 	movhi	r3,32768
 200ccfc:	18ffffc4 	addi	r3,r3,-1
 200cd00:	1805883a 	mov	r2,r3
 200cd04:	dfc00717 	ldw	ra,28(sp)
 200cd08:	dec00804 	addi	sp,sp,32
 200cd0c:	f800283a 	ret
 200cd10:	00800f04 	movi	r2,60
 200cd14:	10d1c83a 	sub	r8,r2,r3
 200cd18:	40bff804 	addi	r2,r8,-32
 200cd1c:	d9800517 	ldw	r6,20(sp)
 200cd20:	d9c00617 	ldw	r7,24(sp)
 200cd24:	10000816 	blt	r2,zero,200cd48 <__fixdfsi+0xbc>
 200cd28:	3888d83a 	srl	r4,r7,r2
 200cd2c:	d8800317 	ldw	r2,12(sp)
 200cd30:	2007883a 	mov	r3,r4
 200cd34:	103fe226 	beq	r2,zero,200ccc0 <__fixdfsi+0x34>
 200cd38:	0107c83a 	sub	r3,zero,r4
 200cd3c:	003fe006 	br	200ccc0 <__fixdfsi+0x34>
 200cd40:	00e00034 	movhi	r3,32768
 200cd44:	003fde06 	br	200ccc0 <__fixdfsi+0x34>
 200cd48:	39c7883a 	add	r3,r7,r7
 200cd4c:	008007c4 	movi	r2,31
 200cd50:	1205c83a 	sub	r2,r2,r8
 200cd54:	1886983a 	sll	r3,r3,r2
 200cd58:	3208d83a 	srl	r4,r6,r8
 200cd5c:	1908b03a 	or	r4,r3,r4
 200cd60:	003ff206 	br	200cd2c <__fixdfsi+0xa0>

0200cd64 <__fpcmp_parts_d>:
 200cd64:	21800017 	ldw	r6,0(r4)
 200cd68:	00c00044 	movi	r3,1
 200cd6c:	19800a2e 	bgeu	r3,r6,200cd98 <__fpcmp_parts_d+0x34>
 200cd70:	28800017 	ldw	r2,0(r5)
 200cd74:	1880082e 	bgeu	r3,r2,200cd98 <__fpcmp_parts_d+0x34>
 200cd78:	00c00104 	movi	r3,4
 200cd7c:	30c02626 	beq	r6,r3,200ce18 <__fpcmp_parts_d+0xb4>
 200cd80:	10c02226 	beq	r2,r3,200ce0c <__fpcmp_parts_d+0xa8>
 200cd84:	00c00084 	movi	r3,2
 200cd88:	30c00526 	beq	r6,r3,200cda0 <__fpcmp_parts_d+0x3c>
 200cd8c:	10c0071e 	bne	r2,r3,200cdac <__fpcmp_parts_d+0x48>
 200cd90:	20800117 	ldw	r2,4(r4)
 200cd94:	1000091e 	bne	r2,zero,200cdbc <__fpcmp_parts_d+0x58>
 200cd98:	00800044 	movi	r2,1
 200cd9c:	f800283a 	ret
 200cda0:	10c01a1e 	bne	r2,r3,200ce0c <__fpcmp_parts_d+0xa8>
 200cda4:	0005883a 	mov	r2,zero
 200cda8:	f800283a 	ret
 200cdac:	22000117 	ldw	r8,4(r4)
 200cdb0:	28800117 	ldw	r2,4(r5)
 200cdb4:	40800326 	beq	r8,r2,200cdc4 <__fpcmp_parts_d+0x60>
 200cdb8:	403ff726 	beq	r8,zero,200cd98 <__fpcmp_parts_d+0x34>
 200cdbc:	00bfffc4 	movi	r2,-1
 200cdc0:	f800283a 	ret
 200cdc4:	20c00217 	ldw	r3,8(r4)
 200cdc8:	28800217 	ldw	r2,8(r5)
 200cdcc:	10fffa16 	blt	r2,r3,200cdb8 <__fpcmp_parts_d+0x54>
 200cdd0:	18800916 	blt	r3,r2,200cdf8 <__fpcmp_parts_d+0x94>
 200cdd4:	21c00417 	ldw	r7,16(r4)
 200cdd8:	28c00417 	ldw	r3,16(r5)
 200cddc:	21800317 	ldw	r6,12(r4)
 200cde0:	28800317 	ldw	r2,12(r5)
 200cde4:	19fff436 	bltu	r3,r7,200cdb8 <__fpcmp_parts_d+0x54>
 200cde8:	38c00526 	beq	r7,r3,200ce00 <__fpcmp_parts_d+0x9c>
 200cdec:	38c00236 	bltu	r7,r3,200cdf8 <__fpcmp_parts_d+0x94>
 200cdf0:	19ffec1e 	bne	r3,r7,200cda4 <__fpcmp_parts_d+0x40>
 200cdf4:	30bfeb2e 	bgeu	r6,r2,200cda4 <__fpcmp_parts_d+0x40>
 200cdf8:	403fe71e 	bne	r8,zero,200cd98 <__fpcmp_parts_d+0x34>
 200cdfc:	003fef06 	br	200cdbc <__fpcmp_parts_d+0x58>
 200ce00:	11bffa2e 	bgeu	r2,r6,200cdec <__fpcmp_parts_d+0x88>
 200ce04:	403fe426 	beq	r8,zero,200cd98 <__fpcmp_parts_d+0x34>
 200ce08:	003fec06 	br	200cdbc <__fpcmp_parts_d+0x58>
 200ce0c:	28800117 	ldw	r2,4(r5)
 200ce10:	103fe11e 	bne	r2,zero,200cd98 <__fpcmp_parts_d+0x34>
 200ce14:	003fe906 	br	200cdbc <__fpcmp_parts_d+0x58>
 200ce18:	11bfdd1e 	bne	r2,r6,200cd90 <__fpcmp_parts_d+0x2c>
 200ce1c:	28c00117 	ldw	r3,4(r5)
 200ce20:	20800117 	ldw	r2,4(r4)
 200ce24:	1885c83a 	sub	r2,r3,r2
 200ce28:	f800283a 	ret

0200ce2c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 200ce2c:	defff804 	addi	sp,sp,-32
 200ce30:	dfc00715 	stw	ra,28(sp)
 200ce34:	df000615 	stw	fp,24(sp)
 200ce38:	df000604 	addi	fp,sp,24
 200ce3c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 200ce40:	e0bffc17 	ldw	r2,-16(fp)
 200ce44:	1004803a 	cmplt	r2,r2,zero
 200ce48:	1000091e 	bne	r2,zero,200ce70 <close+0x44>
 200ce4c:	e13ffc17 	ldw	r4,-16(fp)
 200ce50:	01400304 	movi	r5,12
 200ce54:	2003b380 	call	2003b38 <__mulsi3>
 200ce58:	1007883a 	mov	r3,r2
 200ce5c:	00808074 	movhi	r2,513
 200ce60:	10850904 	addi	r2,r2,5156
 200ce64:	1887883a 	add	r3,r3,r2
 200ce68:	e0ffff15 	stw	r3,-4(fp)
 200ce6c:	00000106 	br	200ce74 <close+0x48>
 200ce70:	e03fff15 	stw	zero,-4(fp)
 200ce74:	e0bfff17 	ldw	r2,-4(fp)
 200ce78:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 200ce7c:	e0bffb17 	ldw	r2,-20(fp)
 200ce80:	1005003a 	cmpeq	r2,r2,zero
 200ce84:	10001d1e 	bne	r2,zero,200cefc <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 200ce88:	e0bffb17 	ldw	r2,-20(fp)
 200ce8c:	10800017 	ldw	r2,0(r2)
 200ce90:	10800417 	ldw	r2,16(r2)
 200ce94:	1005003a 	cmpeq	r2,r2,zero
 200ce98:	1000071e 	bne	r2,zero,200ceb8 <close+0x8c>
 200ce9c:	e0bffb17 	ldw	r2,-20(fp)
 200cea0:	10800017 	ldw	r2,0(r2)
 200cea4:	10800417 	ldw	r2,16(r2)
 200cea8:	e13ffb17 	ldw	r4,-20(fp)
 200ceac:	103ee83a 	callr	r2
 200ceb0:	e0bffe15 	stw	r2,-8(fp)
 200ceb4:	00000106 	br	200cebc <close+0x90>
 200ceb8:	e03ffe15 	stw	zero,-8(fp)
 200cebc:	e0bffe17 	ldw	r2,-8(fp)
 200cec0:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 200cec4:	e13ffc17 	ldw	r4,-16(fp)
 200cec8:	200d7940 	call	200d794 <alt_release_fd>
    if (rval < 0)
 200cecc:	e0bffa17 	ldw	r2,-24(fp)
 200ced0:	1004403a 	cmpge	r2,r2,zero
 200ced4:	1000071e 	bne	r2,zero,200cef4 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 200ced8:	200cf2c0 	call	200cf2c <alt_get_errno>
 200cedc:	e0fffa17 	ldw	r3,-24(fp)
 200cee0:	00c7c83a 	sub	r3,zero,r3
 200cee4:	10c00015 	stw	r3,0(r2)
      return -1;
 200cee8:	00bfffc4 	movi	r2,-1
 200ceec:	e0bffd15 	stw	r2,-12(fp)
 200cef0:	00000806 	br	200cf14 <close+0xe8>
    }
    return 0;
 200cef4:	e03ffd15 	stw	zero,-12(fp)
 200cef8:	00000606 	br	200cf14 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200cefc:	200cf2c0 	call	200cf2c <alt_get_errno>
 200cf00:	1007883a 	mov	r3,r2
 200cf04:	00801444 	movi	r2,81
 200cf08:	18800015 	stw	r2,0(r3)
    return -1;
 200cf0c:	00bfffc4 	movi	r2,-1
 200cf10:	e0bffd15 	stw	r2,-12(fp)
 200cf14:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 200cf18:	e037883a 	mov	sp,fp
 200cf1c:	dfc00117 	ldw	ra,4(sp)
 200cf20:	df000017 	ldw	fp,0(sp)
 200cf24:	dec00204 	addi	sp,sp,8
 200cf28:	f800283a 	ret

0200cf2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200cf2c:	defffd04 	addi	sp,sp,-12
 200cf30:	dfc00215 	stw	ra,8(sp)
 200cf34:	df000115 	stw	fp,4(sp)
 200cf38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200cf3c:	00808074 	movhi	r2,513
 200cf40:	1085bd04 	addi	r2,r2,5876
 200cf44:	10800017 	ldw	r2,0(r2)
 200cf48:	1005003a 	cmpeq	r2,r2,zero
 200cf4c:	1000061e 	bne	r2,zero,200cf68 <alt_get_errno+0x3c>
 200cf50:	00808074 	movhi	r2,513
 200cf54:	1085bd04 	addi	r2,r2,5876
 200cf58:	10800017 	ldw	r2,0(r2)
 200cf5c:	103ee83a 	callr	r2
 200cf60:	e0bfff15 	stw	r2,-4(fp)
 200cf64:	00000306 	br	200cf74 <alt_get_errno+0x48>
 200cf68:	00808074 	movhi	r2,513
 200cf6c:	10889704 	addi	r2,r2,8796
 200cf70:	e0bfff15 	stw	r2,-4(fp)
 200cf74:	e0bfff17 	ldw	r2,-4(fp)
}
 200cf78:	e037883a 	mov	sp,fp
 200cf7c:	dfc00117 	ldw	ra,4(sp)
 200cf80:	df000017 	ldw	fp,0(sp)
 200cf84:	dec00204 	addi	sp,sp,8
 200cf88:	f800283a 	ret

0200cf8c <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 200cf8c:	defffd04 	addi	sp,sp,-12
 200cf90:	df000215 	stw	fp,8(sp)
 200cf94:	df000204 	addi	fp,sp,8
 200cf98:	e13ffe15 	stw	r4,-8(fp)
 200cf9c:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 200cfa0:	e037883a 	mov	sp,fp
 200cfa4:	df000017 	ldw	fp,0(sp)
 200cfa8:	dec00104 	addi	sp,sp,4
 200cfac:	f800283a 	ret

0200cfb0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 200cfb0:	deffff04 	addi	sp,sp,-4
 200cfb4:	df000015 	stw	fp,0(sp)
 200cfb8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 200cfbc:	e037883a 	mov	sp,fp
 200cfc0:	df000017 	ldw	fp,0(sp)
 200cfc4:	dec00104 	addi	sp,sp,4
 200cfc8:	f800283a 	ret

0200cfcc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 200cfcc:	defffc04 	addi	sp,sp,-16
 200cfd0:	df000315 	stw	fp,12(sp)
 200cfd4:	df000304 	addi	fp,sp,12
 200cfd8:	e13ffd15 	stw	r4,-12(fp)
 200cfdc:	e17ffe15 	stw	r5,-8(fp)
 200cfe0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 200cfe4:	e0bfff17 	ldw	r2,-4(fp)
}
 200cfe8:	e037883a 	mov	sp,fp
 200cfec:	df000017 	ldw	fp,0(sp)
 200cff0:	dec00104 	addi	sp,sp,4
 200cff4:	f800283a 	ret

0200cff8 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 200cff8:	defffb04 	addi	sp,sp,-20
 200cffc:	dfc00415 	stw	ra,16(sp)
 200d000:	df000315 	stw	fp,12(sp)
 200d004:	df000304 	addi	fp,sp,12
 200d008:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 200d00c:	e13ffe17 	ldw	r4,-8(fp)
 200d010:	d1600d04 	addi	r5,gp,-32716
 200d014:	200f7c40 	call	200f7c4 <alt_find_dev>
 200d018:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
 200d01c:	e0bffd17 	ldw	r2,-12(fp)
 200d020:	1005003a 	cmpeq	r2,r2,zero
 200d024:	10000b1e 	bne	r2,zero,200d054 <alt_flash_open_dev+0x5c>
 200d028:	e0bffd17 	ldw	r2,-12(fp)
 200d02c:	10800317 	ldw	r2,12(r2)
 200d030:	1005003a 	cmpeq	r2,r2,zero
 200d034:	1000071e 	bne	r2,zero,200d054 <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
 200d038:	e0bffd17 	ldw	r2,-12(fp)
 200d03c:	10800317 	ldw	r2,12(r2)
 200d040:	e13ffd17 	ldw	r4,-12(fp)
 200d044:	e17ffe17 	ldw	r5,-8(fp)
 200d048:	103ee83a 	callr	r2
 200d04c:	e0bfff15 	stw	r2,-4(fp)
 200d050:	00000206 	br	200d05c <alt_flash_open_dev+0x64>
  }

  return dev;
 200d054:	e0bffd17 	ldw	r2,-12(fp)
 200d058:	e0bfff15 	stw	r2,-4(fp)
 200d05c:	e0bfff17 	ldw	r2,-4(fp)
}
 200d060:	e037883a 	mov	sp,fp
 200d064:	dfc00117 	ldw	ra,4(sp)
 200d068:	df000017 	ldw	fp,0(sp)
 200d06c:	dec00204 	addi	sp,sp,8
 200d070:	f800283a 	ret

0200d074 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 200d074:	defffd04 	addi	sp,sp,-12
 200d078:	dfc00215 	stw	ra,8(sp)
 200d07c:	df000115 	stw	fp,4(sp)
 200d080:	df000104 	addi	fp,sp,4
 200d084:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 200d088:	e0bfff17 	ldw	r2,-4(fp)
 200d08c:	1005003a 	cmpeq	r2,r2,zero
 200d090:	1000081e 	bne	r2,zero,200d0b4 <alt_flash_close_dev+0x40>
 200d094:	e0bfff17 	ldw	r2,-4(fp)
 200d098:	10800417 	ldw	r2,16(r2)
 200d09c:	1005003a 	cmpeq	r2,r2,zero
 200d0a0:	1000041e 	bne	r2,zero,200d0b4 <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
 200d0a4:	e0bfff17 	ldw	r2,-4(fp)
 200d0a8:	10800417 	ldw	r2,16(r2)
 200d0ac:	e13fff17 	ldw	r4,-4(fp)
 200d0b0:	103ee83a 	callr	r2
  }
  return;
}
 200d0b4:	e037883a 	mov	sp,fp
 200d0b8:	dfc00117 	ldw	ra,4(sp)
 200d0bc:	df000017 	ldw	fp,0(sp)
 200d0c0:	dec00204 	addi	sp,sp,8
 200d0c4:	f800283a 	ret

0200d0c8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 200d0c8:	defff904 	addi	sp,sp,-28
 200d0cc:	dfc00615 	stw	ra,24(sp)
 200d0d0:	df000515 	stw	fp,20(sp)
 200d0d4:	df000504 	addi	fp,sp,20
 200d0d8:	e13ffc15 	stw	r4,-16(fp)
 200d0dc:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200d0e0:	e0bffc17 	ldw	r2,-16(fp)
 200d0e4:	1004803a 	cmplt	r2,r2,zero
 200d0e8:	1000091e 	bne	r2,zero,200d110 <fstat+0x48>
 200d0ec:	e13ffc17 	ldw	r4,-16(fp)
 200d0f0:	01400304 	movi	r5,12
 200d0f4:	2003b380 	call	2003b38 <__mulsi3>
 200d0f8:	1007883a 	mov	r3,r2
 200d0fc:	00808074 	movhi	r2,513
 200d100:	10850904 	addi	r2,r2,5156
 200d104:	1887883a 	add	r3,r3,r2
 200d108:	e0ffff15 	stw	r3,-4(fp)
 200d10c:	00000106 	br	200d114 <fstat+0x4c>
 200d110:	e03fff15 	stw	zero,-4(fp)
 200d114:	e0bfff17 	ldw	r2,-4(fp)
 200d118:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200d11c:	e0bffb17 	ldw	r2,-20(fp)
 200d120:	1005003a 	cmpeq	r2,r2,zero
 200d124:	1000121e 	bne	r2,zero,200d170 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 200d128:	e0bffb17 	ldw	r2,-20(fp)
 200d12c:	10800017 	ldw	r2,0(r2)
 200d130:	10800817 	ldw	r2,32(r2)
 200d134:	1005003a 	cmpeq	r2,r2,zero
 200d138:	1000081e 	bne	r2,zero,200d15c <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 200d13c:	e0bffb17 	ldw	r2,-20(fp)
 200d140:	10800017 	ldw	r2,0(r2)
 200d144:	10800817 	ldw	r2,32(r2)
 200d148:	e13ffb17 	ldw	r4,-20(fp)
 200d14c:	e17ffd17 	ldw	r5,-12(fp)
 200d150:	103ee83a 	callr	r2
 200d154:	e0bffe15 	stw	r2,-8(fp)
 200d158:	00000b06 	br	200d188 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 200d15c:	e0fffd17 	ldw	r3,-12(fp)
 200d160:	00880004 	movi	r2,8192
 200d164:	18800115 	stw	r2,4(r3)
      return 0;
 200d168:	e03ffe15 	stw	zero,-8(fp)
 200d16c:	00000606 	br	200d188 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200d170:	200d1a00 	call	200d1a0 <alt_get_errno>
 200d174:	1007883a 	mov	r3,r2
 200d178:	00801444 	movi	r2,81
 200d17c:	18800015 	stw	r2,0(r3)
    return -1;
 200d180:	00bfffc4 	movi	r2,-1
 200d184:	e0bffe15 	stw	r2,-8(fp)
 200d188:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 200d18c:	e037883a 	mov	sp,fp
 200d190:	dfc00117 	ldw	ra,4(sp)
 200d194:	df000017 	ldw	fp,0(sp)
 200d198:	dec00204 	addi	sp,sp,8
 200d19c:	f800283a 	ret

0200d1a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200d1a0:	defffd04 	addi	sp,sp,-12
 200d1a4:	dfc00215 	stw	ra,8(sp)
 200d1a8:	df000115 	stw	fp,4(sp)
 200d1ac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200d1b0:	00808074 	movhi	r2,513
 200d1b4:	1085bd04 	addi	r2,r2,5876
 200d1b8:	10800017 	ldw	r2,0(r2)
 200d1bc:	1005003a 	cmpeq	r2,r2,zero
 200d1c0:	1000061e 	bne	r2,zero,200d1dc <alt_get_errno+0x3c>
 200d1c4:	00808074 	movhi	r2,513
 200d1c8:	1085bd04 	addi	r2,r2,5876
 200d1cc:	10800017 	ldw	r2,0(r2)
 200d1d0:	103ee83a 	callr	r2
 200d1d4:	e0bfff15 	stw	r2,-4(fp)
 200d1d8:	00000306 	br	200d1e8 <alt_get_errno+0x48>
 200d1dc:	00808074 	movhi	r2,513
 200d1e0:	10889704 	addi	r2,r2,8796
 200d1e4:	e0bfff15 	stw	r2,-4(fp)
 200d1e8:	e0bfff17 	ldw	r2,-4(fp)
}
 200d1ec:	e037883a 	mov	sp,fp
 200d1f0:	dfc00117 	ldw	ra,4(sp)
 200d1f4:	df000017 	ldw	fp,0(sp)
 200d1f8:	dec00204 	addi	sp,sp,8
 200d1fc:	f800283a 	ret

0200d200 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 200d200:	deffeb04 	addi	sp,sp,-84
 200d204:	dfc01415 	stw	ra,80(sp)
 200d208:	df001315 	stw	fp,76(sp)
 200d20c:	df001304 	addi	fp,sp,76
 200d210:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200d214:	e0bffd17 	ldw	r2,-12(fp)
 200d218:	1004803a 	cmplt	r2,r2,zero
 200d21c:	1000091e 	bne	r2,zero,200d244 <isatty+0x44>
 200d220:	e13ffd17 	ldw	r4,-12(fp)
 200d224:	01400304 	movi	r5,12
 200d228:	2003b380 	call	2003b38 <__mulsi3>
 200d22c:	1007883a 	mov	r3,r2
 200d230:	00808074 	movhi	r2,513
 200d234:	10850904 	addi	r2,r2,5156
 200d238:	1887883a 	add	r3,r3,r2
 200d23c:	e0ffff15 	stw	r3,-4(fp)
 200d240:	00000106 	br	200d248 <isatty+0x48>
 200d244:	e03fff15 	stw	zero,-4(fp)
 200d248:	e0bfff17 	ldw	r2,-4(fp)
 200d24c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 200d250:	e0bfed17 	ldw	r2,-76(fp)
 200d254:	1005003a 	cmpeq	r2,r2,zero
 200d258:	10000f1e 	bne	r2,zero,200d298 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 200d25c:	e0bfed17 	ldw	r2,-76(fp)
 200d260:	10800017 	ldw	r2,0(r2)
 200d264:	10800817 	ldw	r2,32(r2)
 200d268:	1004c03a 	cmpne	r2,r2,zero
 200d26c:	1000031e 	bne	r2,zero,200d27c <isatty+0x7c>
    {
      return 1;
 200d270:	00800044 	movi	r2,1
 200d274:	e0bffe15 	stw	r2,-8(fp)
 200d278:	00000c06 	br	200d2ac <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 200d27c:	e17fee04 	addi	r5,fp,-72
 200d280:	e13ffd17 	ldw	r4,-12(fp)
 200d284:	200d0c80 	call	200d0c8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 200d288:	e0bfef17 	ldw	r2,-68(fp)
 200d28c:	10880020 	cmpeqi	r2,r2,8192
 200d290:	e0bffe15 	stw	r2,-8(fp)
 200d294:	00000506 	br	200d2ac <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200d298:	200d2c40 	call	200d2c4 <alt_get_errno>
 200d29c:	1007883a 	mov	r3,r2
 200d2a0:	00801444 	movi	r2,81
 200d2a4:	18800015 	stw	r2,0(r3)
    return 0;
 200d2a8:	e03ffe15 	stw	zero,-8(fp)
 200d2ac:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 200d2b0:	e037883a 	mov	sp,fp
 200d2b4:	dfc00117 	ldw	ra,4(sp)
 200d2b8:	df000017 	ldw	fp,0(sp)
 200d2bc:	dec00204 	addi	sp,sp,8
 200d2c0:	f800283a 	ret

0200d2c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200d2c4:	defffd04 	addi	sp,sp,-12
 200d2c8:	dfc00215 	stw	ra,8(sp)
 200d2cc:	df000115 	stw	fp,4(sp)
 200d2d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200d2d4:	00808074 	movhi	r2,513
 200d2d8:	1085bd04 	addi	r2,r2,5876
 200d2dc:	10800017 	ldw	r2,0(r2)
 200d2e0:	1005003a 	cmpeq	r2,r2,zero
 200d2e4:	1000061e 	bne	r2,zero,200d300 <alt_get_errno+0x3c>
 200d2e8:	00808074 	movhi	r2,513
 200d2ec:	1085bd04 	addi	r2,r2,5876
 200d2f0:	10800017 	ldw	r2,0(r2)
 200d2f4:	103ee83a 	callr	r2
 200d2f8:	e0bfff15 	stw	r2,-4(fp)
 200d2fc:	00000306 	br	200d30c <alt_get_errno+0x48>
 200d300:	00808074 	movhi	r2,513
 200d304:	10889704 	addi	r2,r2,8796
 200d308:	e0bfff15 	stw	r2,-4(fp)
 200d30c:	e0bfff17 	ldw	r2,-4(fp)
}
 200d310:	e037883a 	mov	sp,fp
 200d314:	dfc00117 	ldw	ra,4(sp)
 200d318:	df000017 	ldw	fp,0(sp)
 200d31c:	dec00204 	addi	sp,sp,8
 200d320:	f800283a 	ret

0200d324 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 200d324:	defffe04 	addi	sp,sp,-8
 200d328:	dfc00115 	stw	ra,4(sp)
 200d32c:	df000015 	stw	fp,0(sp)
 200d330:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 200d334:	01008074 	movhi	r4,513
 200d338:	2105c404 	addi	r4,r4,5904
 200d33c:	01408074 	movhi	r5,513
 200d340:	2942fa04 	addi	r5,r5,3048
 200d344:	01808074 	movhi	r6,513
 200d348:	3185c404 	addi	r6,r6,5904
 200d34c:	200d3a40 	call	200d3a4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 200d350:	01008034 	movhi	r4,512
 200d354:	21000804 	addi	r4,r4,32
 200d358:	01408034 	movhi	r5,512
 200d35c:	29400804 	addi	r5,r5,32
 200d360:	01808034 	movhi	r6,512
 200d364:	31806e04 	addi	r6,r6,440
 200d368:	200d3a40 	call	200d3a4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 200d36c:	01008074 	movhi	r4,513
 200d370:	2101af04 	addi	r4,r4,1724
 200d374:	01408074 	movhi	r5,513
 200d378:	2941af04 	addi	r5,r5,1724
 200d37c:	01808074 	movhi	r6,513
 200d380:	3182fa04 	addi	r6,r6,3048
 200d384:	200d3a40 	call	200d3a4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 200d388:	200cfb00 	call	200cfb0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 200d38c:	200f8580 	call	200f858 <alt_icache_flush_all>
}
 200d390:	e037883a 	mov	sp,fp
 200d394:	dfc00117 	ldw	ra,4(sp)
 200d398:	df000017 	ldw	fp,0(sp)
 200d39c:	dec00204 	addi	sp,sp,8
 200d3a0:	f800283a 	ret

0200d3a4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 200d3a4:	defffc04 	addi	sp,sp,-16
 200d3a8:	df000315 	stw	fp,12(sp)
 200d3ac:	df000304 	addi	fp,sp,12
 200d3b0:	e13ffd15 	stw	r4,-12(fp)
 200d3b4:	e17ffe15 	stw	r5,-8(fp)
 200d3b8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 200d3bc:	e0fffe17 	ldw	r3,-8(fp)
 200d3c0:	e0bffd17 	ldw	r2,-12(fp)
 200d3c4:	18800e26 	beq	r3,r2,200d400 <alt_load_section+0x5c>
  {
    while( to != end )
 200d3c8:	00000a06 	br	200d3f4 <alt_load_section+0x50>
    {
      *to++ = *from++;
 200d3cc:	e0bffd17 	ldw	r2,-12(fp)
 200d3d0:	10c00017 	ldw	r3,0(r2)
 200d3d4:	e0bffe17 	ldw	r2,-8(fp)
 200d3d8:	10c00015 	stw	r3,0(r2)
 200d3dc:	e0bffe17 	ldw	r2,-8(fp)
 200d3e0:	10800104 	addi	r2,r2,4
 200d3e4:	e0bffe15 	stw	r2,-8(fp)
 200d3e8:	e0bffd17 	ldw	r2,-12(fp)
 200d3ec:	10800104 	addi	r2,r2,4
 200d3f0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 200d3f4:	e0fffe17 	ldw	r3,-8(fp)
 200d3f8:	e0bfff17 	ldw	r2,-4(fp)
 200d3fc:	18bff31e 	bne	r3,r2,200d3cc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 200d400:	e037883a 	mov	sp,fp
 200d404:	df000017 	ldw	fp,0(sp)
 200d408:	dec00104 	addi	sp,sp,4
 200d40c:	f800283a 	ret

0200d410 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 200d410:	defff804 	addi	sp,sp,-32
 200d414:	dfc00715 	stw	ra,28(sp)
 200d418:	df000615 	stw	fp,24(sp)
 200d41c:	df000604 	addi	fp,sp,24
 200d420:	e13ffc15 	stw	r4,-16(fp)
 200d424:	e17ffd15 	stw	r5,-12(fp)
 200d428:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 200d42c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200d430:	e0bffc17 	ldw	r2,-16(fp)
 200d434:	1004803a 	cmplt	r2,r2,zero
 200d438:	1000091e 	bne	r2,zero,200d460 <lseek+0x50>
 200d43c:	e13ffc17 	ldw	r4,-16(fp)
 200d440:	01400304 	movi	r5,12
 200d444:	2003b380 	call	2003b38 <__mulsi3>
 200d448:	1007883a 	mov	r3,r2
 200d44c:	00808074 	movhi	r2,513
 200d450:	10850904 	addi	r2,r2,5156
 200d454:	1887883a 	add	r3,r3,r2
 200d458:	e0ffff15 	stw	r3,-4(fp)
 200d45c:	00000106 	br	200d464 <lseek+0x54>
 200d460:	e03fff15 	stw	zero,-4(fp)
 200d464:	e0bfff17 	ldw	r2,-4(fp)
 200d468:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 200d46c:	e0bffb17 	ldw	r2,-20(fp)
 200d470:	1005003a 	cmpeq	r2,r2,zero
 200d474:	1000111e 	bne	r2,zero,200d4bc <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 200d478:	e0bffb17 	ldw	r2,-20(fp)
 200d47c:	10800017 	ldw	r2,0(r2)
 200d480:	10800717 	ldw	r2,28(r2)
 200d484:	1005003a 	cmpeq	r2,r2,zero
 200d488:	1000091e 	bne	r2,zero,200d4b0 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 200d48c:	e0bffb17 	ldw	r2,-20(fp)
 200d490:	10800017 	ldw	r2,0(r2)
 200d494:	10800717 	ldw	r2,28(r2)
 200d498:	e13ffb17 	ldw	r4,-20(fp)
 200d49c:	e17ffd17 	ldw	r5,-12(fp)
 200d4a0:	e1bffe17 	ldw	r6,-8(fp)
 200d4a4:	103ee83a 	callr	r2
 200d4a8:	e0bffa15 	stw	r2,-24(fp)
 200d4ac:	00000506 	br	200d4c4 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 200d4b0:	00bfde84 	movi	r2,-134
 200d4b4:	e0bffa15 	stw	r2,-24(fp)
 200d4b8:	00000206 	br	200d4c4 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 200d4bc:	00bfebc4 	movi	r2,-81
 200d4c0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 200d4c4:	e0bffa17 	ldw	r2,-24(fp)
 200d4c8:	1004403a 	cmpge	r2,r2,zero
 200d4cc:	1000071e 	bne	r2,zero,200d4ec <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 200d4d0:	200d5040 	call	200d504 <alt_get_errno>
 200d4d4:	1007883a 	mov	r3,r2
 200d4d8:	e0bffa17 	ldw	r2,-24(fp)
 200d4dc:	0085c83a 	sub	r2,zero,r2
 200d4e0:	18800015 	stw	r2,0(r3)
    rc = -1;
 200d4e4:	00bfffc4 	movi	r2,-1
 200d4e8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 200d4ec:	e0bffa17 	ldw	r2,-24(fp)
}
 200d4f0:	e037883a 	mov	sp,fp
 200d4f4:	dfc00117 	ldw	ra,4(sp)
 200d4f8:	df000017 	ldw	fp,0(sp)
 200d4fc:	dec00204 	addi	sp,sp,8
 200d500:	f800283a 	ret

0200d504 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200d504:	defffd04 	addi	sp,sp,-12
 200d508:	dfc00215 	stw	ra,8(sp)
 200d50c:	df000115 	stw	fp,4(sp)
 200d510:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200d514:	00808074 	movhi	r2,513
 200d518:	1085bd04 	addi	r2,r2,5876
 200d51c:	10800017 	ldw	r2,0(r2)
 200d520:	1005003a 	cmpeq	r2,r2,zero
 200d524:	1000061e 	bne	r2,zero,200d540 <alt_get_errno+0x3c>
 200d528:	00808074 	movhi	r2,513
 200d52c:	1085bd04 	addi	r2,r2,5876
 200d530:	10800017 	ldw	r2,0(r2)
 200d534:	103ee83a 	callr	r2
 200d538:	e0bfff15 	stw	r2,-4(fp)
 200d53c:	00000306 	br	200d54c <alt_get_errno+0x48>
 200d540:	00808074 	movhi	r2,513
 200d544:	10889704 	addi	r2,r2,8796
 200d548:	e0bfff15 	stw	r2,-4(fp)
 200d54c:	e0bfff17 	ldw	r2,-4(fp)
}
 200d550:	e037883a 	mov	sp,fp
 200d554:	dfc00117 	ldw	ra,4(sp)
 200d558:	df000017 	ldw	fp,0(sp)
 200d55c:	dec00204 	addi	sp,sp,8
 200d560:	f800283a 	ret

0200d564 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 200d564:	defffd04 	addi	sp,sp,-12
 200d568:	dfc00215 	stw	ra,8(sp)
 200d56c:	df000115 	stw	fp,4(sp)
 200d570:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 200d574:	0009883a 	mov	r4,zero
 200d578:	200dc200 	call	200dc20 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 200d57c:	200dc540 	call	200dc54 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 200d580:	01008074 	movhi	r4,513
 200d584:	2102ec04 	addi	r4,r4,2992
 200d588:	01408074 	movhi	r5,513
 200d58c:	2942ec04 	addi	r5,r5,2992
 200d590:	01808074 	movhi	r6,513
 200d594:	3182ec04 	addi	r6,r6,2992
 200d598:	200f94c0 	call	200f94c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 200d59c:	200f6fc0 	call	200f6fc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 200d5a0:	01008074 	movhi	r4,513
 200d5a4:	213dd804 	addi	r4,r4,-2208
 200d5a8:	20102b00 	call	20102b0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 200d5ac:	d122ea17 	ldw	r4,-29784(gp)
 200d5b0:	d162eb17 	ldw	r5,-29780(gp)
 200d5b4:	d1a2ec17 	ldw	r6,-29776(gp)
 200d5b8:	200099c0 	call	200099c <main>
 200d5bc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 200d5c0:	01000044 	movi	r4,1
 200d5c4:	200ce2c0 	call	200ce2c <close>
  exit (result);
 200d5c8:	e13fff17 	ldw	r4,-4(fp)
 200d5cc:	20102c40 	call	20102c4 <exit>

0200d5d0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 200d5d0:	defffe04 	addi	sp,sp,-8
 200d5d4:	df000115 	stw	fp,4(sp)
 200d5d8:	df000104 	addi	fp,sp,4
 200d5dc:	e13fff15 	stw	r4,-4(fp)
}
 200d5e0:	e037883a 	mov	sp,fp
 200d5e4:	df000017 	ldw	fp,0(sp)
 200d5e8:	dec00104 	addi	sp,sp,4
 200d5ec:	f800283a 	ret

0200d5f0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 200d5f0:	defffe04 	addi	sp,sp,-8
 200d5f4:	df000115 	stw	fp,4(sp)
 200d5f8:	df000104 	addi	fp,sp,4
 200d5fc:	e13fff15 	stw	r4,-4(fp)
}
 200d600:	e037883a 	mov	sp,fp
 200d604:	df000017 	ldw	fp,0(sp)
 200d608:	dec00104 	addi	sp,sp,4
 200d60c:	f800283a 	ret

0200d610 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 200d610:	defff704 	addi	sp,sp,-36
 200d614:	dfc00815 	stw	ra,32(sp)
 200d618:	df000715 	stw	fp,28(sp)
 200d61c:	df000704 	addi	fp,sp,28
 200d620:	e13ffb15 	stw	r4,-20(fp)
 200d624:	e17ffc15 	stw	r5,-16(fp)
 200d628:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200d62c:	e0bffb17 	ldw	r2,-20(fp)
 200d630:	1004803a 	cmplt	r2,r2,zero
 200d634:	1000091e 	bne	r2,zero,200d65c <read+0x4c>
 200d638:	e13ffb17 	ldw	r4,-20(fp)
 200d63c:	01400304 	movi	r5,12
 200d640:	2003b380 	call	2003b38 <__mulsi3>
 200d644:	1007883a 	mov	r3,r2
 200d648:	00808074 	movhi	r2,513
 200d64c:	10850904 	addi	r2,r2,5156
 200d650:	1887883a 	add	r3,r3,r2
 200d654:	e0ffff15 	stw	r3,-4(fp)
 200d658:	00000106 	br	200d660 <read+0x50>
 200d65c:	e03fff15 	stw	zero,-4(fp)
 200d660:	e0bfff17 	ldw	r2,-4(fp)
 200d664:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 200d668:	e0bffa17 	ldw	r2,-24(fp)
 200d66c:	1005003a 	cmpeq	r2,r2,zero
 200d670:	1000241e 	bne	r2,zero,200d704 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200d674:	e0bffa17 	ldw	r2,-24(fp)
 200d678:	10800217 	ldw	r2,8(r2)
 200d67c:	108000cc 	andi	r2,r2,3
 200d680:	10800060 	cmpeqi	r2,r2,1
 200d684:	10001a1e 	bne	r2,zero,200d6f0 <read+0xe0>
 200d688:	e0bffa17 	ldw	r2,-24(fp)
 200d68c:	10800017 	ldw	r2,0(r2)
 200d690:	10800517 	ldw	r2,20(r2)
 200d694:	1005003a 	cmpeq	r2,r2,zero
 200d698:	1000151e 	bne	r2,zero,200d6f0 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 200d69c:	e0bffa17 	ldw	r2,-24(fp)
 200d6a0:	10800017 	ldw	r2,0(r2)
 200d6a4:	10800517 	ldw	r2,20(r2)
 200d6a8:	e17ffc17 	ldw	r5,-16(fp)
 200d6ac:	e1bffd17 	ldw	r6,-12(fp)
 200d6b0:	e13ffa17 	ldw	r4,-24(fp)
 200d6b4:	103ee83a 	callr	r2
 200d6b8:	e0bff915 	stw	r2,-28(fp)
 200d6bc:	e0bff917 	ldw	r2,-28(fp)
 200d6c0:	1004403a 	cmpge	r2,r2,zero
 200d6c4:	1000071e 	bne	r2,zero,200d6e4 <read+0xd4>
        {
          ALT_ERRNO = -rval;
 200d6c8:	200d7340 	call	200d734 <alt_get_errno>
 200d6cc:	e0fff917 	ldw	r3,-28(fp)
 200d6d0:	00c7c83a 	sub	r3,zero,r3
 200d6d4:	10c00015 	stw	r3,0(r2)
          return -1;
 200d6d8:	00bfffc4 	movi	r2,-1
 200d6dc:	e0bffe15 	stw	r2,-8(fp)
 200d6e0:	00000e06 	br	200d71c <read+0x10c>
        }
        return rval;
 200d6e4:	e0bff917 	ldw	r2,-28(fp)
 200d6e8:	e0bffe15 	stw	r2,-8(fp)
 200d6ec:	00000b06 	br	200d71c <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 200d6f0:	200d7340 	call	200d734 <alt_get_errno>
 200d6f4:	1007883a 	mov	r3,r2
 200d6f8:	00800344 	movi	r2,13
 200d6fc:	18800015 	stw	r2,0(r3)
 200d700:	00000406 	br	200d714 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 200d704:	200d7340 	call	200d734 <alt_get_errno>
 200d708:	1007883a 	mov	r3,r2
 200d70c:	00801444 	movi	r2,81
 200d710:	18800015 	stw	r2,0(r3)
  }
  return -1;
 200d714:	00bfffc4 	movi	r2,-1
 200d718:	e0bffe15 	stw	r2,-8(fp)
 200d71c:	e0bffe17 	ldw	r2,-8(fp)
}
 200d720:	e037883a 	mov	sp,fp
 200d724:	dfc00117 	ldw	ra,4(sp)
 200d728:	df000017 	ldw	fp,0(sp)
 200d72c:	dec00204 	addi	sp,sp,8
 200d730:	f800283a 	ret

0200d734 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200d734:	defffd04 	addi	sp,sp,-12
 200d738:	dfc00215 	stw	ra,8(sp)
 200d73c:	df000115 	stw	fp,4(sp)
 200d740:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200d744:	00808074 	movhi	r2,513
 200d748:	1085bd04 	addi	r2,r2,5876
 200d74c:	10800017 	ldw	r2,0(r2)
 200d750:	1005003a 	cmpeq	r2,r2,zero
 200d754:	1000061e 	bne	r2,zero,200d770 <alt_get_errno+0x3c>
 200d758:	00808074 	movhi	r2,513
 200d75c:	1085bd04 	addi	r2,r2,5876
 200d760:	10800017 	ldw	r2,0(r2)
 200d764:	103ee83a 	callr	r2
 200d768:	e0bfff15 	stw	r2,-4(fp)
 200d76c:	00000306 	br	200d77c <alt_get_errno+0x48>
 200d770:	00808074 	movhi	r2,513
 200d774:	10889704 	addi	r2,r2,8796
 200d778:	e0bfff15 	stw	r2,-4(fp)
 200d77c:	e0bfff17 	ldw	r2,-4(fp)
}
 200d780:	e037883a 	mov	sp,fp
 200d784:	dfc00117 	ldw	ra,4(sp)
 200d788:	df000017 	ldw	fp,0(sp)
 200d78c:	dec00204 	addi	sp,sp,8
 200d790:	f800283a 	ret

0200d794 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 200d794:	defffc04 	addi	sp,sp,-16
 200d798:	dfc00315 	stw	ra,12(sp)
 200d79c:	df000215 	stw	fp,8(sp)
 200d7a0:	dc000115 	stw	r16,4(sp)
 200d7a4:	df000104 	addi	fp,sp,4
 200d7a8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 200d7ac:	e0bfff17 	ldw	r2,-4(fp)
 200d7b0:	108000d0 	cmplti	r2,r2,3
 200d7b4:	10000f1e 	bne	r2,zero,200d7f4 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 200d7b8:	e13fff17 	ldw	r4,-4(fp)
 200d7bc:	04008074 	movhi	r16,513
 200d7c0:	84050904 	addi	r16,r16,5156
 200d7c4:	01400304 	movi	r5,12
 200d7c8:	2003b380 	call	2003b38 <__mulsi3>
 200d7cc:	1405883a 	add	r2,r2,r16
 200d7d0:	10800204 	addi	r2,r2,8
 200d7d4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 200d7d8:	e13fff17 	ldw	r4,-4(fp)
 200d7dc:	04008074 	movhi	r16,513
 200d7e0:	84050904 	addi	r16,r16,5156
 200d7e4:	01400304 	movi	r5,12
 200d7e8:	2003b380 	call	2003b38 <__mulsi3>
 200d7ec:	1405883a 	add	r2,r2,r16
 200d7f0:	10000015 	stw	zero,0(r2)
  }
}
 200d7f4:	e037883a 	mov	sp,fp
 200d7f8:	dfc00217 	ldw	ra,8(sp)
 200d7fc:	df000117 	ldw	fp,4(sp)
 200d800:	dc000017 	ldw	r16,0(sp)
 200d804:	dec00304 	addi	sp,sp,12
 200d808:	f800283a 	ret

0200d80c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 200d80c:	defff804 	addi	sp,sp,-32
 200d810:	df000715 	stw	fp,28(sp)
 200d814:	df000704 	addi	fp,sp,28
 200d818:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200d81c:	0005303a 	rdctl	r2,status
 200d820:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200d824:	e0fffb17 	ldw	r3,-20(fp)
 200d828:	00bfff84 	movi	r2,-2
 200d82c:	1884703a 	and	r2,r3,r2
 200d830:	1001703a 	wrctl	status,r2
  
  return context;
 200d834:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 200d838:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 200d83c:	d0a00f17 	ldw	r2,-32708(gp)
 200d840:	10c000c4 	addi	r3,r2,3
 200d844:	00bfff04 	movi	r2,-4
 200d848:	1884703a 	and	r2,r3,r2
 200d84c:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 200d850:	d0e00f17 	ldw	r3,-32708(gp)
 200d854:	e0bffe17 	ldw	r2,-8(fp)
 200d858:	1887883a 	add	r3,r3,r2
 200d85c:	00810034 	movhi	r2,1024
 200d860:	10800004 	addi	r2,r2,0
 200d864:	10c0072e 	bgeu	r2,r3,200d884 <sbrk+0x78>
 200d868:	e0bffd17 	ldw	r2,-12(fp)
 200d86c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200d870:	e0bffa17 	ldw	r2,-24(fp)
 200d874:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 200d878:	00bfffc4 	movi	r2,-1
 200d87c:	e0bfff15 	stw	r2,-4(fp)
 200d880:	00000c06 	br	200d8b4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 200d884:	d0a00f17 	ldw	r2,-32708(gp)
 200d888:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 200d88c:	d0e00f17 	ldw	r3,-32708(gp)
 200d890:	e0bffe17 	ldw	r2,-8(fp)
 200d894:	1885883a 	add	r2,r3,r2
 200d898:	d0a00f15 	stw	r2,-32708(gp)
 200d89c:	e0bffd17 	ldw	r2,-12(fp)
 200d8a0:	e0bff915 	stw	r2,-28(fp)
 200d8a4:	e0bff917 	ldw	r2,-28(fp)
 200d8a8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 200d8ac:	e0bffc17 	ldw	r2,-16(fp)
 200d8b0:	e0bfff15 	stw	r2,-4(fp)
 200d8b4:	e0bfff17 	ldw	r2,-4(fp)
} 
 200d8b8:	e037883a 	mov	sp,fp
 200d8bc:	df000017 	ldw	fp,0(sp)
 200d8c0:	dec00104 	addi	sp,sp,4
 200d8c4:	f800283a 	ret

0200d8c8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 200d8c8:	defffa04 	addi	sp,sp,-24
 200d8cc:	df000515 	stw	fp,20(sp)
 200d8d0:	df000504 	addi	fp,sp,20
 200d8d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200d8d8:	0005303a 	rdctl	r2,status
 200d8dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200d8e0:	e0fffd17 	ldw	r3,-12(fp)
 200d8e4:	00bfff84 	movi	r2,-2
 200d8e8:	1884703a 	and	r2,r3,r2
 200d8ec:	1001703a 	wrctl	status,r2
  
  return context;
 200d8f0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 200d8f4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 200d8f8:	e0bfff17 	ldw	r2,-4(fp)
 200d8fc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 200d900:	e0bffc17 	ldw	r2,-16(fp)
 200d904:	10c00017 	ldw	r3,0(r2)
 200d908:	e0bffc17 	ldw	r2,-16(fp)
 200d90c:	10800117 	ldw	r2,4(r2)
 200d910:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 200d914:	e0bffc17 	ldw	r2,-16(fp)
 200d918:	10c00117 	ldw	r3,4(r2)
 200d91c:	e0bffc17 	ldw	r2,-16(fp)
 200d920:	10800017 	ldw	r2,0(r2)
 200d924:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 200d928:	e0fffc17 	ldw	r3,-16(fp)
 200d92c:	e0bffc17 	ldw	r2,-16(fp)
 200d930:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 200d934:	e0fffc17 	ldw	r3,-16(fp)
 200d938:	e0bffc17 	ldw	r2,-16(fp)
 200d93c:	18800015 	stw	r2,0(r3)
 200d940:	e0bffe17 	ldw	r2,-8(fp)
 200d944:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200d948:	e0bffb17 	ldw	r2,-20(fp)
 200d94c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 200d950:	e037883a 	mov	sp,fp
 200d954:	df000017 	ldw	fp,0(sp)
 200d958:	dec00104 	addi	sp,sp,4
 200d95c:	f800283a 	ret

0200d960 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 200d960:	defffb04 	addi	sp,sp,-20
 200d964:	dfc00415 	stw	ra,16(sp)
 200d968:	df000315 	stw	fp,12(sp)
 200d96c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 200d970:	d0a01017 	ldw	r2,-32704(gp)
 200d974:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 200d978:	d0a2ee17 	ldw	r2,-29768(gp)
 200d97c:	10800044 	addi	r2,r2,1
 200d980:	d0a2ee15 	stw	r2,-29768(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 200d984:	00003106 	br	200da4c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 200d988:	e0bffe17 	ldw	r2,-8(fp)
 200d98c:	10800017 	ldw	r2,0(r2)
 200d990:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 200d994:	e0bffe17 	ldw	r2,-8(fp)
 200d998:	10800403 	ldbu	r2,16(r2)
 200d99c:	10803fcc 	andi	r2,r2,255
 200d9a0:	1005003a 	cmpeq	r2,r2,zero
 200d9a4:	1000051e 	bne	r2,zero,200d9bc <alt_tick+0x5c>
 200d9a8:	d0a2ee17 	ldw	r2,-29768(gp)
 200d9ac:	1004c03a 	cmpne	r2,r2,zero
 200d9b0:	1000021e 	bne	r2,zero,200d9bc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 200d9b4:	e0bffe17 	ldw	r2,-8(fp)
 200d9b8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 200d9bc:	e0bffe17 	ldw	r2,-8(fp)
 200d9c0:	10c00217 	ldw	r3,8(r2)
 200d9c4:	d0a2ee17 	ldw	r2,-29768(gp)
 200d9c8:	10c01e36 	bltu	r2,r3,200da44 <alt_tick+0xe4>
 200d9cc:	e0bffe17 	ldw	r2,-8(fp)
 200d9d0:	10800403 	ldbu	r2,16(r2)
 200d9d4:	10803fcc 	andi	r2,r2,255
 200d9d8:	1004c03a 	cmpne	r2,r2,zero
 200d9dc:	1000191e 	bne	r2,zero,200da44 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 200d9e0:	e0bffe17 	ldw	r2,-8(fp)
 200d9e4:	10c00317 	ldw	r3,12(r2)
 200d9e8:	e0bffe17 	ldw	r2,-8(fp)
 200d9ec:	11000517 	ldw	r4,20(r2)
 200d9f0:	183ee83a 	callr	r3
 200d9f4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 200d9f8:	e0bffd17 	ldw	r2,-12(fp)
 200d9fc:	1004c03a 	cmpne	r2,r2,zero
 200da00:	1000031e 	bne	r2,zero,200da10 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 200da04:	e13ffe17 	ldw	r4,-8(fp)
 200da08:	200d8c80 	call	200d8c8 <alt_alarm_stop>
 200da0c:	00000d06 	br	200da44 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 200da10:	e0bffe17 	ldw	r2,-8(fp)
 200da14:	10c00217 	ldw	r3,8(r2)
 200da18:	e0bffd17 	ldw	r2,-12(fp)
 200da1c:	1887883a 	add	r3,r3,r2
 200da20:	e0bffe17 	ldw	r2,-8(fp)
 200da24:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 200da28:	e0bffe17 	ldw	r2,-8(fp)
 200da2c:	10c00217 	ldw	r3,8(r2)
 200da30:	d0a2ee17 	ldw	r2,-29768(gp)
 200da34:	1880032e 	bgeu	r3,r2,200da44 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 200da38:	e0fffe17 	ldw	r3,-8(fp)
 200da3c:	00800044 	movi	r2,1
 200da40:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 200da44:	e0bfff17 	ldw	r2,-4(fp)
 200da48:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 200da4c:	d0e01004 	addi	r3,gp,-32704
 200da50:	e0bffe17 	ldw	r2,-8(fp)
 200da54:	10ffcc1e 	bne	r2,r3,200d988 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 200da58:	e037883a 	mov	sp,fp
 200da5c:	dfc00117 	ldw	ra,4(sp)
 200da60:	df000017 	ldw	fp,0(sp)
 200da64:	dec00204 	addi	sp,sp,8
 200da68:	f800283a 	ret

0200da6c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 200da6c:	defffd04 	addi	sp,sp,-12
 200da70:	dfc00215 	stw	ra,8(sp)
 200da74:	df000115 	stw	fp,4(sp)
 200da78:	df000104 	addi	fp,sp,4
 200da7c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 200da80:	e13fff17 	ldw	r4,-4(fp)
 200da84:	200f48c0 	call	200f48c <alt_busy_sleep>
}
 200da88:	e037883a 	mov	sp,fp
 200da8c:	dfc00117 	ldw	ra,4(sp)
 200da90:	df000017 	ldw	fp,0(sp)
 200da94:	dec00204 	addi	sp,sp,8
 200da98:	f800283a 	ret

0200da9c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 200da9c:	defff704 	addi	sp,sp,-36
 200daa0:	dfc00815 	stw	ra,32(sp)
 200daa4:	df000715 	stw	fp,28(sp)
 200daa8:	df000704 	addi	fp,sp,28
 200daac:	e13ffb15 	stw	r4,-20(fp)
 200dab0:	e17ffc15 	stw	r5,-16(fp)
 200dab4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200dab8:	e0bffb17 	ldw	r2,-20(fp)
 200dabc:	1004803a 	cmplt	r2,r2,zero
 200dac0:	1000091e 	bne	r2,zero,200dae8 <write+0x4c>
 200dac4:	e13ffb17 	ldw	r4,-20(fp)
 200dac8:	01400304 	movi	r5,12
 200dacc:	2003b380 	call	2003b38 <__mulsi3>
 200dad0:	1007883a 	mov	r3,r2
 200dad4:	00808074 	movhi	r2,513
 200dad8:	10850904 	addi	r2,r2,5156
 200dadc:	1887883a 	add	r3,r3,r2
 200dae0:	e0ffff15 	stw	r3,-4(fp)
 200dae4:	00000106 	br	200daec <write+0x50>
 200dae8:	e03fff15 	stw	zero,-4(fp)
 200daec:	e0bfff17 	ldw	r2,-4(fp)
 200daf0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 200daf4:	e0bffa17 	ldw	r2,-24(fp)
 200daf8:	1005003a 	cmpeq	r2,r2,zero
 200dafc:	1000241e 	bne	r2,zero,200db90 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 200db00:	e0bffa17 	ldw	r2,-24(fp)
 200db04:	10800217 	ldw	r2,8(r2)
 200db08:	108000cc 	andi	r2,r2,3
 200db0c:	1005003a 	cmpeq	r2,r2,zero
 200db10:	10001a1e 	bne	r2,zero,200db7c <write+0xe0>
 200db14:	e0bffa17 	ldw	r2,-24(fp)
 200db18:	10800017 	ldw	r2,0(r2)
 200db1c:	10800617 	ldw	r2,24(r2)
 200db20:	1005003a 	cmpeq	r2,r2,zero
 200db24:	1000151e 	bne	r2,zero,200db7c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 200db28:	e0bffa17 	ldw	r2,-24(fp)
 200db2c:	10800017 	ldw	r2,0(r2)
 200db30:	10800617 	ldw	r2,24(r2)
 200db34:	e17ffc17 	ldw	r5,-16(fp)
 200db38:	e1bffd17 	ldw	r6,-12(fp)
 200db3c:	e13ffa17 	ldw	r4,-24(fp)
 200db40:	103ee83a 	callr	r2
 200db44:	e0bff915 	stw	r2,-28(fp)
 200db48:	e0bff917 	ldw	r2,-28(fp)
 200db4c:	1004403a 	cmpge	r2,r2,zero
 200db50:	1000071e 	bne	r2,zero,200db70 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 200db54:	200dbc00 	call	200dbc0 <alt_get_errno>
 200db58:	e0fff917 	ldw	r3,-28(fp)
 200db5c:	00c7c83a 	sub	r3,zero,r3
 200db60:	10c00015 	stw	r3,0(r2)
        return -1;
 200db64:	00bfffc4 	movi	r2,-1
 200db68:	e0bffe15 	stw	r2,-8(fp)
 200db6c:	00000e06 	br	200dba8 <write+0x10c>
      }
      return rval;
 200db70:	e0bff917 	ldw	r2,-28(fp)
 200db74:	e0bffe15 	stw	r2,-8(fp)
 200db78:	00000b06 	br	200dba8 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 200db7c:	200dbc00 	call	200dbc0 <alt_get_errno>
 200db80:	1007883a 	mov	r3,r2
 200db84:	00800344 	movi	r2,13
 200db88:	18800015 	stw	r2,0(r3)
 200db8c:	00000406 	br	200dba0 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 200db90:	200dbc00 	call	200dbc0 <alt_get_errno>
 200db94:	1007883a 	mov	r3,r2
 200db98:	00801444 	movi	r2,81
 200db9c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 200dba0:	00bfffc4 	movi	r2,-1
 200dba4:	e0bffe15 	stw	r2,-8(fp)
 200dba8:	e0bffe17 	ldw	r2,-8(fp)
}
 200dbac:	e037883a 	mov	sp,fp
 200dbb0:	dfc00117 	ldw	ra,4(sp)
 200dbb4:	df000017 	ldw	fp,0(sp)
 200dbb8:	dec00204 	addi	sp,sp,8
 200dbbc:	f800283a 	ret

0200dbc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200dbc0:	defffd04 	addi	sp,sp,-12
 200dbc4:	dfc00215 	stw	ra,8(sp)
 200dbc8:	df000115 	stw	fp,4(sp)
 200dbcc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200dbd0:	00808074 	movhi	r2,513
 200dbd4:	1085bd04 	addi	r2,r2,5876
 200dbd8:	10800017 	ldw	r2,0(r2)
 200dbdc:	1005003a 	cmpeq	r2,r2,zero
 200dbe0:	1000061e 	bne	r2,zero,200dbfc <alt_get_errno+0x3c>
 200dbe4:	00808074 	movhi	r2,513
 200dbe8:	1085bd04 	addi	r2,r2,5876
 200dbec:	10800017 	ldw	r2,0(r2)
 200dbf0:	103ee83a 	callr	r2
 200dbf4:	e0bfff15 	stw	r2,-4(fp)
 200dbf8:	00000306 	br	200dc08 <alt_get_errno+0x48>
 200dbfc:	00808074 	movhi	r2,513
 200dc00:	10889704 	addi	r2,r2,8796
 200dc04:	e0bfff15 	stw	r2,-4(fp)
 200dc08:	e0bfff17 	ldw	r2,-4(fp)
}
 200dc0c:	e037883a 	mov	sp,fp
 200dc10:	dfc00117 	ldw	ra,4(sp)
 200dc14:	df000017 	ldw	fp,0(sp)
 200dc18:	dec00204 	addi	sp,sp,8
 200dc1c:	f800283a 	ret

0200dc20 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 200dc20:	defffd04 	addi	sp,sp,-12
 200dc24:	dfc00215 	stw	ra,8(sp)
 200dc28:	df000115 	stw	fp,4(sp)
 200dc2c:	df000104 	addi	fp,sp,4
 200dc30:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, cpu);
 200dc34:	200fe680 	call	200fe68 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 200dc38:	00800044 	movi	r2,1
 200dc3c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 200dc40:	e037883a 	mov	sp,fp
 200dc44:	dfc00117 	ldw	ra,4(sp)
 200dc48:	df000017 	ldw	fp,0(sp)
 200dc4c:	dec00204 	addi	sp,sp,8
 200dc50:	f800283a 	ret

0200dc54 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 200dc54:	defffe04 	addi	sp,sp,-8
 200dc58:	dfc00115 	stw	ra,4(sp)
 200dc5c:	df000015 	stw	fp,0(sp)
 200dc60:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 200dc64:	01014034 	movhi	r4,1280
 200dc68:	000b883a 	mov	r5,zero
 200dc6c:	000d883a 	mov	r6,zero
 200dc70:	01c0fa04 	movi	r7,1000
 200dc74:	200e9980 	call	200e998 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
 200dc78:	01008074 	movhi	r4,513
 200dc7c:	21056904 	addi	r4,r4,5540
 200dc80:	200dce80 	call	200dce8 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 200dc84:	01008074 	movhi	r4,513
 200dc88:	21059b04 	addi	r4,r4,5740
 200dc8c:	200dcb00 	call	200dcb0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_RS232_INIT ( UART_0, uart_0);
 200dc90:	01008074 	movhi	r4,513
 200dc94:	2105a604 	addi	r4,r4,5784
 200dc98:	200dcb00 	call	200dcb0 <alt_dev_reg>
}
 200dc9c:	e037883a 	mov	sp,fp
 200dca0:	dfc00117 	ldw	ra,4(sp)
 200dca4:	df000017 	ldw	fp,0(sp)
 200dca8:	dec00204 	addi	sp,sp,8
 200dcac:	f800283a 	ret

0200dcb0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 200dcb0:	defffd04 	addi	sp,sp,-12
 200dcb4:	dfc00215 	stw	ra,8(sp)
 200dcb8:	df000115 	stw	fp,4(sp)
 200dcbc:	df000104 	addi	fp,sp,4
 200dcc0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 200dcc4:	e13fff17 	ldw	r4,-4(fp)
 200dcc8:	01408074 	movhi	r5,513
 200dccc:	2945ba04 	addi	r5,r5,5864
 200dcd0:	200f5e80 	call	200f5e8 <alt_dev_llist_insert>
}
 200dcd4:	e037883a 	mov	sp,fp
 200dcd8:	dfc00117 	ldw	ra,4(sp)
 200dcdc:	df000017 	ldw	fp,0(sp)
 200dce0:	dec00204 	addi	sp,sp,8
 200dce4:	f800283a 	ret

0200dce8 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 200dce8:	defffc04 	addi	sp,sp,-16
 200dcec:	dfc00315 	stw	ra,12(sp)
 200dcf0:	df000215 	stw	fp,8(sp)
 200dcf4:	df000204 	addi	fp,sp,8
 200dcf8:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 200dcfc:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 200dd00:	e13fff17 	ldw	r4,-4(fp)
 200dd04:	200dd740 	call	200dd74 <alt_epcs_flash_query>
 200dd08:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 200dd0c:	e0bffe17 	ldw	r2,-8(fp)
 200dd10:	1004c03a 	cmpne	r2,r2,zero
 200dd14:	1000031e 	bne	r2,zero,200dd24 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 200dd18:	e13fff17 	ldw	r4,-4(fp)
 200dd1c:	200dd3c0 	call	200dd3c <alt_flash_device_register>
 200dd20:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 200dd24:	e0bffe17 	ldw	r2,-8(fp)
}
 200dd28:	e037883a 	mov	sp,fp
 200dd2c:	dfc00117 	ldw	ra,4(sp)
 200dd30:	df000017 	ldw	fp,0(sp)
 200dd34:	dec00204 	addi	sp,sp,8
 200dd38:	f800283a 	ret

0200dd3c <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 200dd3c:	defffd04 	addi	sp,sp,-12
 200dd40:	dfc00215 	stw	ra,8(sp)
 200dd44:	df000115 	stw	fp,4(sp)
 200dd48:	df000104 	addi	fp,sp,4
 200dd4c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 200dd50:	e13fff17 	ldw	r4,-4(fp)
 200dd54:	01408074 	movhi	r5,513
 200dd58:	2945be04 	addi	r5,r5,5880
 200dd5c:	200f5e80 	call	200f5e8 <alt_dev_llist_insert>
}
 200dd60:	e037883a 	mov	sp,fp
 200dd64:	dfc00117 	ldw	ra,4(sp)
 200dd68:	df000017 	ldw	fp,0(sp)
 200dd6c:	dec00204 	addi	sp,sp,8
 200dd70:	f800283a 	ret

0200dd74 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 200dd74:	defffc04 	addi	sp,sp,-16
 200dd78:	dfc00315 	stw	ra,12(sp)
 200dd7c:	df000215 	stw	fp,8(sp)
 200dd80:	df000204 	addi	fp,sp,8
 200dd84:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 200dd88:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 200dd8c:	e0bfff17 	ldw	r2,-4(fp)
 200dd90:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
 200dd94:	e0bfff17 	ldw	r2,-4(fp)
 200dd98:	11002d17 	ldw	r4,180(r2)
 200dd9c:	200f2f00 	call	200f2f0 <epcs_read_electronic_signature>
 200dda0:	10c03fcc 	andi	r3,r2,255
 200dda4:	e0bfff17 	ldw	r2,-4(fp)
 200dda8:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 200ddac:	e0bfff17 	ldw	r2,-4(fp)
 200ddb0:	10802f17 	ldw	r2,188(r2)
 200ddb4:	10800598 	cmpnei	r2,r2,22
 200ddb8:	10000a1e 	bne	r2,zero,200dde4 <alt_epcs_flash_query+0x70>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 200ddbc:	e0ffff17 	ldw	r3,-4(fp)
 200ddc0:	00802034 	movhi	r2,128
 200ddc4:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
 200ddc8:	e0ffff17 	ldw	r3,-4(fp)
 200ddcc:	00802004 	movi	r2,128
 200ddd0:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 200ddd4:	e0ffff17 	ldw	r3,-4(fp)
 200ddd8:	00800074 	movhi	r2,1
 200dddc:	18801015 	stw	r2,64(r3)
 200dde0:	00007306 	br	200dfb0 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 200dde4:	e0bfff17 	ldw	r2,-4(fp)
 200dde8:	10802f17 	ldw	r2,188(r2)
 200ddec:	10800518 	cmpnei	r2,r2,20
 200ddf0:	10000a1e 	bne	r2,zero,200de1c <alt_epcs_flash_query+0xa8>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 200ddf4:	e0ffff17 	ldw	r3,-4(fp)
 200ddf8:	00800834 	movhi	r2,32
 200ddfc:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
 200de00:	e0ffff17 	ldw	r3,-4(fp)
 200de04:	00800804 	movi	r2,32
 200de08:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 200de0c:	e0ffff17 	ldw	r3,-4(fp)
 200de10:	00800074 	movhi	r2,1
 200de14:	18801015 	stw	r2,64(r3)
 200de18:	00006506 	br	200dfb0 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 200de1c:	e0bfff17 	ldw	r2,-4(fp)
 200de20:	10802f17 	ldw	r2,188(r2)
 200de24:	108004d8 	cmpnei	r2,r2,19
 200de28:	10000a1e 	bne	r2,zero,200de54 <alt_epcs_flash_query+0xe0>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 200de2c:	e0ffff17 	ldw	r3,-4(fp)
 200de30:	00800434 	movhi	r2,16
 200de34:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
 200de38:	e0ffff17 	ldw	r3,-4(fp)
 200de3c:	00800404 	movi	r2,16
 200de40:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 200de44:	e0ffff17 	ldw	r3,-4(fp)
 200de48:	00800074 	movhi	r2,1
 200de4c:	18801015 	stw	r2,64(r3)
 200de50:	00005706 	br	200dfb0 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 200de54:	e0bfff17 	ldw	r2,-4(fp)
 200de58:	10802f17 	ldw	r2,188(r2)
 200de5c:	10800498 	cmpnei	r2,r2,18
 200de60:	10000a1e 	bne	r2,zero,200de8c <alt_epcs_flash_query+0x118>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 200de64:	e0ffff17 	ldw	r3,-4(fp)
 200de68:	00800234 	movhi	r2,8
 200de6c:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
 200de70:	e0ffff17 	ldw	r3,-4(fp)
 200de74:	00800204 	movi	r2,8
 200de78:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 200de7c:	e0ffff17 	ldw	r3,-4(fp)
 200de80:	00800074 	movhi	r2,1
 200de84:	18801015 	stw	r2,64(r3)
 200de88:	00004906 	br	200dfb0 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 200de8c:	e0bfff17 	ldw	r2,-4(fp)
 200de90:	10802f17 	ldw	r2,188(r2)
 200de94:	10800418 	cmpnei	r2,r2,16
 200de98:	10000a1e 	bne	r2,zero,200dec4 <alt_epcs_flash_query+0x150>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 200de9c:	e0ffff17 	ldw	r3,-4(fp)
 200dea0:	008000b4 	movhi	r2,2
 200dea4:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
 200dea8:	e0ffff17 	ldw	r3,-4(fp)
 200deac:	00800104 	movi	r2,4
 200deb0:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
 200deb4:	e0ffff17 	ldw	r3,-4(fp)
 200deb8:	00a00014 	movui	r2,32768
 200debc:	18801015 	stw	r2,64(r3)
 200dec0:	00003b06 	br	200dfb0 <alt_epcs_flash_query+0x23c>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 200dec4:	e0bfff17 	ldw	r2,-4(fp)
 200dec8:	11002d17 	ldw	r4,180(r2)
 200decc:	200f35c0 	call	200f35c <epcs_read_device_id>
 200ded0:	1007883a 	mov	r3,r2
 200ded4:	e0bfff17 	ldw	r2,-4(fp)
 200ded8:	10c02f15 	stw	r3,188(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 200dedc:	e0bfff17 	ldw	r2,-4(fp)
 200dee0:	10c02f17 	ldw	r3,188(r2)
 200dee4:	00804034 	movhi	r2,256
 200dee8:	10bfffc4 	addi	r2,r2,-1
 200deec:	1886703a 	and	r3,r3,r2
 200def0:	00800874 	movhi	r2,33
 200def4:	10ae8604 	addi	r2,r2,-17896
 200def8:	18800a1e 	bne	r3,r2,200df24 <alt_epcs_flash_query+0x1b0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 200defc:	e0ffff17 	ldw	r3,-4(fp)
 200df00:	00804034 	movhi	r2,256
 200df04:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 200df08:	e0ffff17 	ldw	r3,-4(fp)
 200df0c:	00804004 	movi	r2,256
 200df10:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 200df14:	e0ffff17 	ldw	r3,-4(fp)
 200df18:	00800074 	movhi	r2,1
 200df1c:	18801015 	stw	r2,64(r3)
 200df20:	00002306 	br	200dfb0 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 200df24:	e0bfff17 	ldw	r2,-4(fp)
 200df28:	10802f17 	ldw	r2,188(r2)
 200df2c:	10803fcc 	andi	r2,r2,255
 200df30:	10800618 	cmpnei	r2,r2,24
 200df34:	10000a1e 	bne	r2,zero,200df60 <alt_epcs_flash_query+0x1ec>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 200df38:	e0ffff17 	ldw	r3,-4(fp)
 200df3c:	00804034 	movhi	r2,256
 200df40:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
 200df44:	e0ffff17 	ldw	r3,-4(fp)
 200df48:	00801004 	movi	r2,64
 200df4c:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;
 200df50:	e0ffff17 	ldw	r3,-4(fp)
 200df54:	00800134 	movhi	r2,4
 200df58:	18801015 	stw	r2,64(r3)
 200df5c:	00001406 	br	200dfb0 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 200df60:	e0bfff17 	ldw	r2,-4(fp)
 200df64:	10802f17 	ldw	r2,188(r2)
 200df68:	10803fcc 	andi	r2,r2,255
 200df6c:	10800658 	cmpnei	r2,r2,25
 200df70:	10000d1e 	bne	r2,zero,200dfa8 <alt_epcs_flash_query+0x234>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 200df74:	e0ffff17 	ldw	r3,-4(fp)
 200df78:	00808034 	movhi	r2,512
 200df7c:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 200df80:	e0ffff17 	ldw	r3,-4(fp)
 200df84:	00808004 	movi	r2,512
 200df88:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 200df8c:	e0ffff17 	ldw	r3,-4(fp)
 200df90:	00800074 	movhi	r2,1
 200df94:	18801015 	stw	r2,64(r3)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 200df98:	e0ffff17 	ldw	r3,-4(fp)
 200df9c:	00800044 	movi	r2,1
 200dfa0:	18803115 	stw	r2,196(r3)
 200dfa4:	00000206 	br	200dfb0 <alt_epcs_flash_query+0x23c>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 200dfa8:	00bffb44 	movi	r2,-19
 200dfac:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 200dfb0:	e0bfff17 	ldw	r2,-4(fp)
 200dfb4:	10800e17 	ldw	r2,56(r2)
 200dfb8:	1007883a 	mov	r3,r2
 200dfbc:	e0bfff17 	ldw	r2,-4(fp)
 200dfc0:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 200dfc4:	e0ffff17 	ldw	r3,-4(fp)
 200dfc8:	00800044 	movi	r2,1
 200dfcc:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
 200dfd0:	e0bfff17 	ldw	r2,-4(fp)
 200dfd4:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 200dfd8:	e0ffff17 	ldw	r3,-4(fp)
 200dfdc:	00804004 	movi	r2,256
 200dfe0:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
 200dfe4:	e0bffe17 	ldw	r2,-8(fp)
}
 200dfe8:	e037883a 	mov	sp,fp
 200dfec:	dfc00117 	ldw	ra,4(sp)
 200dff0:	df000017 	ldw	fp,0(sp)
 200dff4:	dec00204 	addi	sp,sp,8
 200dff8:	f800283a 	ret

0200dffc <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 200dffc:	deffeb04 	addi	sp,sp,-84
 200e000:	dfc01415 	stw	ra,80(sp)
 200e004:	df001315 	stw	fp,76(sp)
 200e008:	df001304 	addi	fp,sp,76
 200e00c:	e13ff915 	stw	r4,-28(fp)
 200e010:	e17ffa15 	stw	r5,-24(fp)
 200e014:	e1bffb15 	stw	r6,-20(fp)
 200e018:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 200e01c:	00800804 	movi	r2,32
 200e020:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
 200e024:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
 200e028:	00002c06 	br	200e0dc <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 200e02c:	e0bff017 	ldw	r2,-64(fp)
 200e030:	e0bfff15 	stw	r2,-4(fp)
 200e034:	e0fffc17 	ldw	r3,-16(fp)
 200e038:	e0fffe15 	stw	r3,-8(fp)
 200e03c:	e0bfff17 	ldw	r2,-4(fp)
 200e040:	e0fffe17 	ldw	r3,-8(fp)
 200e044:	10c0022e 	bgeu	r2,r3,200e050 <alt_epcs_flash_memcmp+0x54>
 200e048:	e0bfff17 	ldw	r2,-4(fp)
 200e04c:	e0bffe15 	stw	r2,-8(fp)
 200e050:	e0fffe17 	ldw	r3,-8(fp)
 200e054:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 200e058:	e0fffb17 	ldw	r3,-20(fp)
 200e05c:	e0bfef17 	ldw	r2,-68(fp)
 200e060:	188b883a 	add	r5,r3,r2
 200e064:	e1bff104 	addi	r6,fp,-60
 200e068:	e13ff917 	ldw	r4,-28(fp)
 200e06c:	e1ffee17 	ldw	r7,-72(fp)
 200e070:	200e6340 	call	200e634 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 200e074:	1004403a 	cmpge	r2,r2,zero
 200e078:	1000031e 	bne	r2,zero,200e088 <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 200e07c:	00bfffc4 	movi	r2,-1
 200e080:	e0bffd15 	stw	r2,-12(fp)
 200e084:	00001906 	br	200e0ec <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 200e088:	e0fffa17 	ldw	r3,-24(fp)
 200e08c:	e0bfef17 	ldw	r2,-68(fp)
 200e090:	1889883a 	add	r4,r3,r2
 200e094:	e1bfee17 	ldw	r6,-72(fp)
 200e098:	e17ff104 	addi	r5,fp,-60
 200e09c:	20102fc0 	call	20102fc <memcmp>
 200e0a0:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
 200e0a4:	e0bfed17 	ldw	r2,-76(fp)
 200e0a8:	1005003a 	cmpeq	r2,r2,zero
 200e0ac:	1000031e 	bne	r2,zero,200e0bc <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
 200e0b0:	e0ffed17 	ldw	r3,-76(fp)
 200e0b4:	e0fffd15 	stw	r3,-12(fp)
 200e0b8:	00000c06 	br	200e0ec <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
 200e0bc:	e0ffee17 	ldw	r3,-72(fp)
 200e0c0:	e0bffc17 	ldw	r2,-16(fp)
 200e0c4:	10c5c83a 	sub	r2,r2,r3
 200e0c8:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
 200e0cc:	e0ffef17 	ldw	r3,-68(fp)
 200e0d0:	e0bfee17 	ldw	r2,-72(fp)
 200e0d4:	1885883a 	add	r2,r3,r2
 200e0d8:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 200e0dc:	e0bffc17 	ldw	r2,-16(fp)
 200e0e0:	1004c03a 	cmpne	r2,r2,zero
 200e0e4:	103fd11e 	bne	r2,zero,200e02c <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 200e0e8:	e03ffd15 	stw	zero,-12(fp)
 200e0ec:	e0bffd17 	ldw	r2,-12(fp)
}
 200e0f0:	e037883a 	mov	sp,fp
 200e0f4:	dfc00117 	ldw	ra,4(sp)
 200e0f8:	df000017 	ldw	fp,0(sp)
 200e0fc:	dec00204 	addi	sp,sp,8
 200e100:	f800283a 	ret

0200e104 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 200e104:	defff204 	addi	sp,sp,-56
 200e108:	dfc00d15 	stw	ra,52(sp)
 200e10c:	df000c15 	stw	fp,48(sp)
 200e110:	df000c04 	addi	fp,sp,48
 200e114:	e13ffa15 	stw	r4,-24(fp)
 200e118:	e17ffb15 	stw	r5,-20(fp)
 200e11c:	e1bffc15 	stw	r6,-16(fp)
 200e120:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
 200e124:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 200e128:	e03ff815 	stw	zero,-32(fp)
 200e12c:	00008b06 	br	200e35c <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 200e130:	e0bff817 	ldw	r2,-32(fp)
 200e134:	e0fffa17 	ldw	r3,-24(fp)
 200e138:	1004913a 	slli	r2,r2,4
 200e13c:	10c5883a 	add	r2,r2,r3
 200e140:	10800d04 	addi	r2,r2,52
 200e144:	10c00017 	ldw	r3,0(r2)
 200e148:	e0bffb17 	ldw	r2,-20(fp)
 200e14c:	10c08016 	blt	r2,r3,200e350 <alt_epcs_flash_write+0x24c>
 200e150:	e0bff817 	ldw	r2,-32(fp)
 200e154:	e0fffa17 	ldw	r3,-24(fp)
 200e158:	1004913a 	slli	r2,r2,4
 200e15c:	10c5883a 	add	r2,r2,r3
 200e160:	10800d04 	addi	r2,r2,52
 200e164:	11000017 	ldw	r4,0(r2)
 200e168:	e0bff817 	ldw	r2,-32(fp)
 200e16c:	e0fffa17 	ldw	r3,-24(fp)
 200e170:	1004913a 	slli	r2,r2,4
 200e174:	10c5883a 	add	r2,r2,r3
 200e178:	10800e04 	addi	r2,r2,56
 200e17c:	10800017 	ldw	r2,0(r2)
 200e180:	2087883a 	add	r3,r4,r2
 200e184:	e0bffb17 	ldw	r2,-20(fp)
 200e188:	10c0710e 	bge	r2,r3,200e350 <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 200e18c:	e0bff817 	ldw	r2,-32(fp)
 200e190:	e0fffa17 	ldw	r3,-24(fp)
 200e194:	1004913a 	slli	r2,r2,4
 200e198:	10c5883a 	add	r2,r2,r3
 200e19c:	10800d04 	addi	r2,r2,52
 200e1a0:	10800017 	ldw	r2,0(r2)
 200e1a4:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 200e1a8:	e03ff715 	stw	zero,-36(fp)
 200e1ac:	00006006 	br	200e330 <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
 200e1b0:	e0fffb17 	ldw	r3,-20(fp)
 200e1b4:	e0bff517 	ldw	r2,-44(fp)
 200e1b8:	18805116 	blt	r3,r2,200e300 <alt_epcs_flash_write+0x1fc>
 200e1bc:	e0bff817 	ldw	r2,-32(fp)
 200e1c0:	e0fffa17 	ldw	r3,-24(fp)
 200e1c4:	1004913a 	slli	r2,r2,4
 200e1c8:	10c5883a 	add	r2,r2,r3
 200e1cc:	10801004 	addi	r2,r2,64
 200e1d0:	10c00017 	ldw	r3,0(r2)
 200e1d4:	e0bff517 	ldw	r2,-44(fp)
 200e1d8:	1887883a 	add	r3,r3,r2
 200e1dc:	e0bffb17 	ldw	r2,-20(fp)
 200e1e0:	10c0470e 	bge	r2,r3,200e300 <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 200e1e4:	e0bff817 	ldw	r2,-32(fp)
 200e1e8:	e0fffa17 	ldw	r3,-24(fp)
 200e1ec:	1004913a 	slli	r2,r2,4
 200e1f0:	10c5883a 	add	r2,r2,r3
 200e1f4:	10801004 	addi	r2,r2,64
 200e1f8:	10c00017 	ldw	r3,0(r2)
 200e1fc:	e0bff517 	ldw	r2,-44(fp)
 200e200:	1887883a 	add	r3,r3,r2
 200e204:	e0bffb17 	ldw	r2,-20(fp)
 200e208:	1885c83a 	sub	r2,r3,r2
 200e20c:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 200e210:	e0bff617 	ldw	r2,-40(fp)
 200e214:	e0bfff15 	stw	r2,-4(fp)
 200e218:	e0fffd17 	ldw	r3,-12(fp)
 200e21c:	e0fffe15 	stw	r3,-8(fp)
 200e220:	e0bfff17 	ldw	r2,-4(fp)
 200e224:	e0fffe17 	ldw	r3,-8(fp)
 200e228:	10c0020e 	bge	r2,r3,200e234 <alt_epcs_flash_write+0x130>
 200e22c:	e0bfff17 	ldw	r2,-4(fp)
 200e230:	e0bffe15 	stw	r2,-8(fp)
 200e234:	e0fffe17 	ldw	r3,-8(fp)
 200e238:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 200e23c:	e1fff617 	ldw	r7,-40(fp)
 200e240:	e13ffa17 	ldw	r4,-24(fp)
 200e244:	e17ffc17 	ldw	r5,-16(fp)
 200e248:	e1bffb17 	ldw	r6,-20(fp)
 200e24c:	200dffc0 	call	200dffc <alt_epcs_flash_memcmp>
 200e250:	1005003a 	cmpeq	r2,r2,zero
 200e254:	1000131e 	bne	r2,zero,200e2a4 <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 200e258:	e0bffa17 	ldw	r2,-24(fp)
 200e25c:	10800817 	ldw	r2,32(r2)
 200e260:	e13ffa17 	ldw	r4,-24(fp)
 200e264:	e17ff517 	ldw	r5,-44(fp)
 200e268:	103ee83a 	callr	r2
 200e26c:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
 200e270:	e0bff917 	ldw	r2,-28(fp)
 200e274:	1004c03a 	cmpne	r2,r2,zero
 200e278:	10000a1e 	bne	r2,zero,200e2a4 <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
 200e27c:	e0bffa17 	ldw	r2,-24(fp)
 200e280:	10c00917 	ldw	r3,36(r2)
 200e284:	e0bff617 	ldw	r2,-40(fp)
 200e288:	d8800015 	stw	r2,0(sp)
 200e28c:	e13ffa17 	ldw	r4,-24(fp)
 200e290:	e17ff517 	ldw	r5,-44(fp)
 200e294:	e1bffb17 	ldw	r6,-20(fp)
 200e298:	e1fffc17 	ldw	r7,-16(fp)
 200e29c:	183ee83a 	callr	r3
 200e2a0:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 200e2a4:	e0fffd17 	ldw	r3,-12(fp)
 200e2a8:	e0bff617 	ldw	r2,-40(fp)
 200e2ac:	18802f26 	beq	r3,r2,200e36c <alt_epcs_flash_write+0x268>
 200e2b0:	e0bff917 	ldw	r2,-28(fp)
 200e2b4:	1004c03a 	cmpne	r2,r2,zero
 200e2b8:	10002c1e 	bne	r2,zero,200e36c <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
 200e2bc:	e0fffd17 	ldw	r3,-12(fp)
 200e2c0:	e0bff617 	ldw	r2,-40(fp)
 200e2c4:	1885c83a 	sub	r2,r3,r2
 200e2c8:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 200e2cc:	e0bff817 	ldw	r2,-32(fp)
 200e2d0:	e0fffa17 	ldw	r3,-24(fp)
 200e2d4:	1004913a 	slli	r2,r2,4
 200e2d8:	10c5883a 	add	r2,r2,r3
 200e2dc:	10801004 	addi	r2,r2,64
 200e2e0:	10c00017 	ldw	r3,0(r2)
 200e2e4:	e0bff517 	ldw	r2,-44(fp)
 200e2e8:	1885883a 	add	r2,r3,r2
 200e2ec:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 200e2f0:	e0fffc17 	ldw	r3,-16(fp)
 200e2f4:	e0bff617 	ldw	r2,-40(fp)
 200e2f8:	1885883a 	add	r2,r3,r2
 200e2fc:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 200e300:	e0bff817 	ldw	r2,-32(fp)
 200e304:	e0fffa17 	ldw	r3,-24(fp)
 200e308:	1004913a 	slli	r2,r2,4
 200e30c:	10c5883a 	add	r2,r2,r3
 200e310:	10801004 	addi	r2,r2,64
 200e314:	10c00017 	ldw	r3,0(r2)
 200e318:	e0bff517 	ldw	r2,-44(fp)
 200e31c:	10c5883a 	add	r2,r2,r3
 200e320:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 200e324:	e0bff717 	ldw	r2,-36(fp)
 200e328:	10800044 	addi	r2,r2,1
 200e32c:	e0bff715 	stw	r2,-36(fp)
 200e330:	e0bff817 	ldw	r2,-32(fp)
 200e334:	e0fffa17 	ldw	r3,-24(fp)
 200e338:	1004913a 	slli	r2,r2,4
 200e33c:	10c5883a 	add	r2,r2,r3
 200e340:	10800f04 	addi	r2,r2,60
 200e344:	10c00017 	ldw	r3,0(r2)
 200e348:	e0bff717 	ldw	r2,-36(fp)
 200e34c:	10ff9816 	blt	r2,r3,200e1b0 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 200e350:	e0bff817 	ldw	r2,-32(fp)
 200e354:	10800044 	addi	r2,r2,1
 200e358:	e0bff815 	stw	r2,-32(fp)
 200e35c:	e0bffa17 	ldw	r2,-24(fp)
 200e360:	10c00c17 	ldw	r3,48(r2)
 200e364:	e0bff817 	ldw	r2,-32(fp)
 200e368:	10ff7116 	blt	r2,r3,200e130 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 200e36c:	e0bff917 	ldw	r2,-28(fp)
}
 200e370:	e037883a 	mov	sp,fp
 200e374:	dfc00117 	ldw	ra,4(sp)
 200e378:	df000017 	ldw	fp,0(sp)
 200e37c:	dec00204 	addi	sp,sp,8
 200e380:	f800283a 	ret

0200e384 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 200e384:	defffa04 	addi	sp,sp,-24
 200e388:	df000515 	stw	fp,20(sp)
 200e38c:	df000504 	addi	fp,sp,20
 200e390:	e13ffd15 	stw	r4,-12(fp)
 200e394:	e17ffe15 	stw	r5,-8(fp)
 200e398:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 200e39c:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 200e3a0:	e0bffd17 	ldw	r2,-12(fp)
 200e3a4:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
 200e3a8:	e0bffb17 	ldw	r2,-20(fp)
 200e3ac:	10c00c17 	ldw	r3,48(r2)
 200e3b0:	e0bfff17 	ldw	r2,-4(fp)
 200e3b4:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 200e3b8:	e0bffb17 	ldw	r2,-20(fp)
 200e3bc:	10800c17 	ldw	r2,48(r2)
 200e3c0:	1004c03a 	cmpne	r2,r2,zero
 200e3c4:	1000031e 	bne	r2,zero,200e3d4 <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
 200e3c8:	00bffec4 	movi	r2,-5
 200e3cc:	e0bffc15 	stw	r2,-16(fp)
 200e3d0:	00000b06 	br	200e400 <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 200e3d4:	e0bffb17 	ldw	r2,-20(fp)
 200e3d8:	10800c17 	ldw	r2,48(r2)
 200e3dc:	10800250 	cmplti	r2,r2,9
 200e3e0:	1000031e 	bne	r2,zero,200e3f0 <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
 200e3e4:	00bffd04 	movi	r2,-12
 200e3e8:	e0bffc15 	stw	r2,-16(fp)
 200e3ec:	00000406 	br	200e400 <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
 200e3f0:	e0bffb17 	ldw	r2,-20(fp)
 200e3f4:	10c00d04 	addi	r3,r2,52
 200e3f8:	e0bffe17 	ldw	r2,-8(fp)
 200e3fc:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 200e400:	e0bffc17 	ldw	r2,-16(fp)
}
 200e404:	e037883a 	mov	sp,fp
 200e408:	df000017 	ldw	fp,0(sp)
 200e40c:	dec00104 	addi	sp,sp,4
 200e410:	f800283a 	ret

0200e414 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 200e414:	defffa04 	addi	sp,sp,-24
 200e418:	dfc00515 	stw	ra,20(sp)
 200e41c:	df000415 	stw	fp,16(sp)
 200e420:	df000404 	addi	fp,sp,16
 200e424:	e13ffe15 	stw	r4,-8(fp)
 200e428:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 200e42c:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200e430:	e0bffe17 	ldw	r2,-8(fp)
 200e434:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 200e438:	e13ffe17 	ldw	r4,-8(fp)
 200e43c:	e17fff17 	ldw	r5,-4(fp)
 200e440:	200e4840 	call	200e484 <alt_epcs_test_address>
 200e444:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
 200e448:	e0bffd17 	ldw	r2,-12(fp)
 200e44c:	1004803a 	cmplt	r2,r2,zero
 200e450:	1000061e 	bne	r2,zero,200e46c <alt_epcs_flash_erase_block+0x58>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 200e454:	e0bffc17 	ldw	r2,-16(fp)
 200e458:	11002d17 	ldw	r4,180(r2)
 200e45c:	e17fff17 	ldw	r5,-4(fp)
 200e460:	e0bffc17 	ldw	r2,-16(fp)
 200e464:	11803117 	ldw	r6,196(r2)
 200e468:	200ee180 	call	200ee18 <epcs_sector_erase>
  }
  return ret_code;
 200e46c:	e0bffd17 	ldw	r2,-12(fp)
}
 200e470:	e037883a 	mov	sp,fp
 200e474:	dfc00117 	ldw	ra,4(sp)
 200e478:	df000017 	ldw	fp,0(sp)
 200e47c:	dec00204 	addi	sp,sp,8
 200e480:	f800283a 	ret

0200e484 <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 200e484:	defff904 	addi	sp,sp,-28
 200e488:	df000615 	stw	fp,24(sp)
 200e48c:	df000604 	addi	fp,sp,24
 200e490:	e13ffe15 	stw	r4,-8(fp)
 200e494:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 200e498:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200e49c:	e0bffe17 	ldw	r2,-8(fp)
 200e4a0:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 200e4a4:	e0bffc17 	ldw	r2,-16(fp)
 200e4a8:	10800c17 	ldw	r2,48(r2)
 200e4ac:	10bfffc4 	addi	r2,r2,-1
 200e4b0:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 200e4b4:	e0bffb17 	ldw	r2,-20(fp)
 200e4b8:	e0fffc17 	ldw	r3,-16(fp)
 200e4bc:	1004913a 	slli	r2,r2,4
 200e4c0:	10c5883a 	add	r2,r2,r3
 200e4c4:	10800d04 	addi	r2,r2,52
 200e4c8:	11000017 	ldw	r4,0(r2)
 200e4cc:	e0bffb17 	ldw	r2,-20(fp)
 200e4d0:	e0fffc17 	ldw	r3,-16(fp)
 200e4d4:	1004913a 	slli	r2,r2,4
 200e4d8:	10c5883a 	add	r2,r2,r3
 200e4dc:	10800e04 	addi	r2,r2,56
 200e4e0:	10800017 	ldw	r2,0(r2)
 200e4e4:	2085883a 	add	r2,r4,r2
 200e4e8:	10bfffc4 	addi	r2,r2,-1
 200e4ec:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
 200e4f0:	e0ffff17 	ldw	r3,-4(fp)
 200e4f4:	e0bffa17 	ldw	r2,-24(fp)
 200e4f8:	10c0022e 	bgeu	r2,r3,200e504 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 200e4fc:	00bffec4 	movi	r2,-5
 200e500:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
 200e504:	e0bffd17 	ldw	r2,-12(fp)
}
 200e508:	e037883a 	mov	sp,fp
 200e50c:	df000017 	ldw	fp,0(sp)
 200e510:	dec00104 	addi	sp,sp,4
 200e514:	f800283a 	ret

0200e518 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 200e518:	defff204 	addi	sp,sp,-56
 200e51c:	dfc00d15 	stw	ra,52(sp)
 200e520:	df000c15 	stw	fp,48(sp)
 200e524:	df000c04 	addi	fp,sp,48
 200e528:	e13ffa15 	stw	r4,-24(fp)
 200e52c:	e17ffb15 	stw	r5,-20(fp)
 200e530:	e1bffc15 	stw	r6,-16(fp)
 200e534:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200e538:	e0bffa17 	ldw	r2,-24(fp)
 200e53c:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 200e540:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 200e544:	e13ffa17 	ldw	r4,-24(fp)
 200e548:	e17ffc17 	ldw	r5,-16(fp)
 200e54c:	200e4840 	call	200e484 <alt_epcs_test_address>
 200e550:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 200e554:	e0bff917 	ldw	r2,-28(fp)
 200e558:	1004803a 	cmplt	r2,r2,zero
 200e55c:	10002f1e 	bne	r2,zero,200e61c <alt_epcs_flash_write_block+0x104>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 200e560:	00002b06 	br	200e610 <alt_epcs_flash_write_block+0xf8>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 200e564:	e0bff817 	ldw	r2,-32(fp)
 200e568:	10c03017 	ldw	r3,192(r2)
 200e56c:	e0bffc17 	ldw	r2,-16(fp)
 200e570:	1887883a 	add	r3,r3,r2
 200e574:	e0bff817 	ldw	r2,-32(fp)
 200e578:	10803017 	ldw	r2,192(r2)
 200e57c:	0085c83a 	sub	r2,zero,r2
 200e580:	1884703a 	and	r2,r3,r2
 200e584:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 200e588:	e0fff517 	ldw	r3,-44(fp)
 200e58c:	e0bffc17 	ldw	r2,-16(fp)
 200e590:	1885c83a 	sub	r2,r3,r2
 200e594:	e0c00217 	ldw	r3,8(fp)
 200e598:	e0ffff15 	stw	r3,-4(fp)
 200e59c:	e0bffe15 	stw	r2,-8(fp)
 200e5a0:	e0bfff17 	ldw	r2,-4(fp)
 200e5a4:	e0fffe17 	ldw	r3,-8(fp)
 200e5a8:	10c0020e 	bge	r2,r3,200e5b4 <alt_epcs_flash_write_block+0x9c>
 200e5ac:	e0bfff17 	ldw	r2,-4(fp)
 200e5b0:	e0bffe15 	stw	r2,-8(fp)
 200e5b4:	e0fffe17 	ldw	r3,-8(fp)
 200e5b8:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 200e5bc:	e0bff817 	ldw	r2,-32(fp)
 200e5c0:	11002d17 	ldw	r4,180(r2)
 200e5c4:	e0fffd17 	ldw	r3,-12(fp)
 200e5c8:	e0bff717 	ldw	r2,-36(fp)
 200e5cc:	188d883a 	add	r6,r3,r2
 200e5d0:	e0bff817 	ldw	r2,-32(fp)
 200e5d4:	10803117 	ldw	r2,196(r2)
 200e5d8:	d8800015 	stw	r2,0(sp)
 200e5dc:	e17ffc17 	ldw	r5,-16(fp)
 200e5e0:	e1fff617 	ldw	r7,-40(fp)
 200e5e4:	200f1800 	call	200f180 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 200e5e8:	e0c00217 	ldw	r3,8(fp)
 200e5ec:	e0bff617 	ldw	r2,-40(fp)
 200e5f0:	1885c83a 	sub	r2,r3,r2
 200e5f4:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 200e5f8:	e0fff717 	ldw	r3,-36(fp)
 200e5fc:	e0bff617 	ldw	r2,-40(fp)
 200e600:	1885883a 	add	r2,r3,r2
 200e604:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 200e608:	e0bff517 	ldw	r2,-44(fp)
 200e60c:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 200e610:	e0800217 	ldw	r2,8(fp)
 200e614:	1004c03a 	cmpne	r2,r2,zero
 200e618:	103fd21e 	bne	r2,zero,200e564 <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 200e61c:	e0bff917 	ldw	r2,-28(fp)
}
 200e620:	e037883a 	mov	sp,fp
 200e624:	dfc00117 	ldw	ra,4(sp)
 200e628:	df000017 	ldw	fp,0(sp)
 200e62c:	dec00204 	addi	sp,sp,8
 200e630:	f800283a 	ret

0200e634 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 200e634:	defff704 	addi	sp,sp,-36
 200e638:	dfc00815 	stw	ra,32(sp)
 200e63c:	df000715 	stw	fp,28(sp)
 200e640:	df000704 	addi	fp,sp,28
 200e644:	e13ffc15 	stw	r4,-16(fp)
 200e648:	e17ffd15 	stw	r5,-12(fp)
 200e64c:	e1bffe15 	stw	r6,-8(fp)
 200e650:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 200e654:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200e658:	e0bffc17 	ldw	r2,-16(fp)
 200e65c:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 200e660:	e13ffc17 	ldw	r4,-16(fp)
 200e664:	e17ffd17 	ldw	r5,-12(fp)
 200e668:	200e4840 	call	200e484 <alt_epcs_test_address>
 200e66c:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
 200e670:	e0bffb17 	ldw	r2,-20(fp)
 200e674:	1004803a 	cmplt	r2,r2,zero
 200e678:	10000e1e 	bne	r2,zero,200e6b4 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 200e67c:	e0bffa17 	ldw	r2,-24(fp)
 200e680:	11002d17 	ldw	r4,180(r2)
 200e684:	e1bffe17 	ldw	r6,-8(fp)
 200e688:	e0bffa17 	ldw	r2,-24(fp)
 200e68c:	10803117 	ldw	r2,196(r2)
 200e690:	d8800015 	stw	r2,0(sp)
 200e694:	e17ffd17 	ldw	r5,-12(fp)
 200e698:	e1ffff17 	ldw	r7,-4(fp)
 200e69c:	200ef800 	call	200ef80 <epcs_read_buffer>
 200e6a0:	e0bffb15 	stw	r2,-20(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 200e6a4:	e0fffb17 	ldw	r3,-20(fp)
 200e6a8:	e0bfff17 	ldw	r2,-4(fp)
 200e6ac:	1880011e 	bne	r3,r2,200e6b4 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 200e6b0:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
 200e6b4:	e0bffb17 	ldw	r2,-20(fp)
}
 200e6b8:	e037883a 	mov	sp,fp
 200e6bc:	dfc00117 	ldw	ra,4(sp)
 200e6c0:	df000017 	ldw	fp,0(sp)
 200e6c4:	dec00204 	addi	sp,sp,8
 200e6c8:	f800283a 	ret

0200e6cc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 200e6cc:	defffa04 	addi	sp,sp,-24
 200e6d0:	dfc00515 	stw	ra,20(sp)
 200e6d4:	df000415 	stw	fp,16(sp)
 200e6d8:	df000404 	addi	fp,sp,16
 200e6dc:	e13ffd15 	stw	r4,-12(fp)
 200e6e0:	e17ffe15 	stw	r5,-8(fp)
 200e6e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200e6e8:	e0bffd17 	ldw	r2,-12(fp)
 200e6ec:	10800017 	ldw	r2,0(r2)
 200e6f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 200e6f4:	e0bffc17 	ldw	r2,-16(fp)
 200e6f8:	11000a04 	addi	r4,r2,40
 200e6fc:	e0bffd17 	ldw	r2,-12(fp)
 200e700:	11c00217 	ldw	r7,8(r2)
 200e704:	e17ffe17 	ldw	r5,-8(fp)
 200e708:	e1bfff17 	ldw	r6,-4(fp)
 200e70c:	200e77c0 	call	200e77c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 200e710:	e037883a 	mov	sp,fp
 200e714:	dfc00117 	ldw	ra,4(sp)
 200e718:	df000017 	ldw	fp,0(sp)
 200e71c:	dec00204 	addi	sp,sp,8
 200e720:	f800283a 	ret

0200e724 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 200e724:	defffa04 	addi	sp,sp,-24
 200e728:	dfc00515 	stw	ra,20(sp)
 200e72c:	df000415 	stw	fp,16(sp)
 200e730:	df000404 	addi	fp,sp,16
 200e734:	e13ffd15 	stw	r4,-12(fp)
 200e738:	e17ffe15 	stw	r5,-8(fp)
 200e73c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200e740:	e0bffd17 	ldw	r2,-12(fp)
 200e744:	10800017 	ldw	r2,0(r2)
 200e748:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 200e74c:	e0bffc17 	ldw	r2,-16(fp)
 200e750:	11000a04 	addi	r4,r2,40
 200e754:	e0bffd17 	ldw	r2,-12(fp)
 200e758:	11c00217 	ldw	r7,8(r2)
 200e75c:	e17ffe17 	ldw	r5,-8(fp)
 200e760:	e1bfff17 	ldw	r6,-4(fp)
 200e764:	200e8800 	call	200e880 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 200e768:	e037883a 	mov	sp,fp
 200e76c:	dfc00117 	ldw	ra,4(sp)
 200e770:	df000017 	ldw	fp,0(sp)
 200e774:	dec00204 	addi	sp,sp,8
 200e778:	f800283a 	ret

0200e77c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 200e77c:	defff604 	addi	sp,sp,-40
 200e780:	df000915 	stw	fp,36(sp)
 200e784:	df000904 	addi	fp,sp,36
 200e788:	e13ffb15 	stw	r4,-20(fp)
 200e78c:	e17ffc15 	stw	r5,-16(fp)
 200e790:	e1bffd15 	stw	r6,-12(fp)
 200e794:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
 200e798:	e0bffb17 	ldw	r2,-20(fp)
 200e79c:	10800017 	ldw	r2,0(r2)
 200e7a0:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
 200e7a4:	e0bffc17 	ldw	r2,-16(fp)
 200e7a8:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
 200e7ac:	e0bffd17 	ldw	r2,-12(fp)
 200e7b0:	1007883a 	mov	r3,r2
 200e7b4:	e0bffc17 	ldw	r2,-16(fp)
 200e7b8:	10c5883a 	add	r2,r2,r3
 200e7bc:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
 200e7c0:	00001606 	br	200e81c <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 200e7c4:	e0bffa17 	ldw	r2,-24(fp)
 200e7c8:	10800037 	ldwio	r2,0(r2)
 200e7cc:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 200e7d0:	e0bff717 	ldw	r2,-36(fp)
 200e7d4:	10a0000c 	andi	r2,r2,32768
 200e7d8:	1005003a 	cmpeq	r2,r2,zero
 200e7dc:	1000081e 	bne	r2,zero,200e800 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 200e7e0:	e0bff717 	ldw	r2,-36(fp)
 200e7e4:	1007883a 	mov	r3,r2
 200e7e8:	e0bff917 	ldw	r2,-28(fp)
 200e7ec:	10c00005 	stb	r3,0(r2)
 200e7f0:	e0bff917 	ldw	r2,-28(fp)
 200e7f4:	10800044 	addi	r2,r2,1
 200e7f8:	e0bff915 	stw	r2,-28(fp)
 200e7fc:	00000706 	br	200e81c <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
 200e800:	e0fff917 	ldw	r3,-28(fp)
 200e804:	e0bffc17 	ldw	r2,-16(fp)
 200e808:	1880071e 	bne	r3,r2,200e828 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
 200e80c:	e0bffe17 	ldw	r2,-8(fp)
 200e810:	1090000c 	andi	r2,r2,16384
 200e814:	1004c03a 	cmpne	r2,r2,zero
 200e818:	1000031e 	bne	r2,zero,200e828 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 200e81c:	e0fff917 	ldw	r3,-28(fp)
 200e820:	e0bff817 	ldw	r2,-32(fp)
 200e824:	18bfe736 	bltu	r3,r2,200e7c4 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
 200e828:	e0fff917 	ldw	r3,-28(fp)
 200e82c:	e0bffc17 	ldw	r2,-16(fp)
 200e830:	18800526 	beq	r3,r2,200e848 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
 200e834:	e0fff917 	ldw	r3,-28(fp)
 200e838:	e0bffc17 	ldw	r2,-16(fp)
 200e83c:	1887c83a 	sub	r3,r3,r2
 200e840:	e0ffff15 	stw	r3,-4(fp)
 200e844:	00000906 	br	200e86c <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
 200e848:	e0bffe17 	ldw	r2,-8(fp)
 200e84c:	1090000c 	andi	r2,r2,16384
 200e850:	1005003a 	cmpeq	r2,r2,zero
 200e854:	1000031e 	bne	r2,zero,200e864 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
 200e858:	00bffd44 	movi	r2,-11
 200e85c:	e0bfff15 	stw	r2,-4(fp)
 200e860:	00000206 	br	200e86c <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
 200e864:	00bffec4 	movi	r2,-5
 200e868:	e0bfff15 	stw	r2,-4(fp)
 200e86c:	e0bfff17 	ldw	r2,-4(fp)
}
 200e870:	e037883a 	mov	sp,fp
 200e874:	df000017 	ldw	fp,0(sp)
 200e878:	dec00104 	addi	sp,sp,4
 200e87c:	f800283a 	ret

0200e880 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 200e880:	defff904 	addi	sp,sp,-28
 200e884:	df000615 	stw	fp,24(sp)
 200e888:	df000604 	addi	fp,sp,24
 200e88c:	e13ffc15 	stw	r4,-16(fp)
 200e890:	e17ffd15 	stw	r5,-12(fp)
 200e894:	e1bffe15 	stw	r6,-8(fp)
 200e898:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 200e89c:	e0bffc17 	ldw	r2,-16(fp)
 200e8a0:	10800017 	ldw	r2,0(r2)
 200e8a4:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
 200e8a8:	e0bffe17 	ldw	r2,-8(fp)
 200e8ac:	1007883a 	mov	r3,r2
 200e8b0:	e0bffd17 	ldw	r2,-12(fp)
 200e8b4:	10c5883a 	add	r2,r2,r3
 200e8b8:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 200e8bc:	00001106 	br	200e904 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 200e8c0:	e0bffb17 	ldw	r2,-20(fp)
 200e8c4:	10800104 	addi	r2,r2,4
 200e8c8:	10800037 	ldwio	r2,0(r2)
 200e8cc:	10bfffec 	andhi	r2,r2,65535
 200e8d0:	1005003a 	cmpeq	r2,r2,zero
 200e8d4:	10000b1e 	bne	r2,zero,200e904 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 200e8d8:	e13ffb17 	ldw	r4,-20(fp)
 200e8dc:	e0bffd17 	ldw	r2,-12(fp)
 200e8e0:	10800003 	ldbu	r2,0(r2)
 200e8e4:	10c03fcc 	andi	r3,r2,255
 200e8e8:	18c0201c 	xori	r3,r3,128
 200e8ec:	18ffe004 	addi	r3,r3,-128
 200e8f0:	e0bffd17 	ldw	r2,-12(fp)
 200e8f4:	10800044 	addi	r2,r2,1
 200e8f8:	e0bffd15 	stw	r2,-12(fp)
 200e8fc:	2005883a 	mov	r2,r4
 200e900:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 200e904:	e0fffd17 	ldw	r3,-12(fp)
 200e908:	e0bffa17 	ldw	r2,-24(fp)
 200e90c:	18bfec36 	bltu	r3,r2,200e8c0 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 200e910:	e0bffe17 	ldw	r2,-8(fp)
}
 200e914:	e037883a 	mov	sp,fp
 200e918:	df000017 	ldw	fp,0(sp)
 200e91c:	dec00104 	addi	sp,sp,4
 200e920:	f800283a 	ret

0200e924 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 200e924:	defff904 	addi	sp,sp,-28
 200e928:	dfc00615 	stw	ra,24(sp)
 200e92c:	df000515 	stw	fp,20(sp)
 200e930:	df000504 	addi	fp,sp,20
 200e934:	e13ffe15 	stw	r4,-8(fp)
 200e938:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 200e93c:	e0bffe17 	ldw	r2,-8(fp)
 200e940:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 200e944:	e0bffe17 	ldw	r2,-8(fp)
 200e948:	10800104 	addi	r2,r2,4
 200e94c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200e950:	0005303a 	rdctl	r2,status
 200e954:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200e958:	e0fffc17 	ldw	r3,-16(fp)
 200e95c:	00bfff84 	movi	r2,-2
 200e960:	1884703a 	and	r2,r3,r2
 200e964:	1001703a 	wrctl	status,r2
  
  return context;
 200e968:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 200e96c:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 200e970:	200d9600 	call	200d960 <alt_tick>
 200e974:	e0bffd17 	ldw	r2,-12(fp)
 200e978:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200e97c:	e0bffb17 	ldw	r2,-20(fp)
 200e980:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 200e984:	e037883a 	mov	sp,fp
 200e988:	dfc00117 	ldw	ra,4(sp)
 200e98c:	df000017 	ldw	fp,0(sp)
 200e990:	dec00204 	addi	sp,sp,8
 200e994:	f800283a 	ret

0200e998 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 200e998:	defff904 	addi	sp,sp,-28
 200e99c:	dfc00615 	stw	ra,24(sp)
 200e9a0:	df000515 	stw	fp,20(sp)
 200e9a4:	df000504 	addi	fp,sp,20
 200e9a8:	e13ffc15 	stw	r4,-16(fp)
 200e9ac:	e17ffd15 	stw	r5,-12(fp)
 200e9b0:	e1bffe15 	stw	r6,-8(fp)
 200e9b4:	e1ffff15 	stw	r7,-4(fp)
 200e9b8:	e0bfff17 	ldw	r2,-4(fp)
 200e9bc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 200e9c0:	00808074 	movhi	r2,513
 200e9c4:	10889e04 	addi	r2,r2,8824
 200e9c8:	10800017 	ldw	r2,0(r2)
 200e9cc:	1004c03a 	cmpne	r2,r2,zero
 200e9d0:	1000041e 	bne	r2,zero,200e9e4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 200e9d4:	00c08074 	movhi	r3,513
 200e9d8:	18c89e04 	addi	r3,r3,8824
 200e9dc:	e0bffb17 	ldw	r2,-20(fp)
 200e9e0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 200e9e4:	e0bffc17 	ldw	r2,-16(fp)
 200e9e8:	10800104 	addi	r2,r2,4
 200e9ec:	1007883a 	mov	r3,r2
 200e9f0:	008001c4 	movi	r2,7
 200e9f4:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 200e9f8:	e13ffe17 	ldw	r4,-8(fp)
 200e9fc:	e17ffc17 	ldw	r5,-16(fp)
 200ea00:	01808074 	movhi	r6,513
 200ea04:	31ba4904 	addi	r6,r6,-5852
 200ea08:	200f9c40 	call	200f9c4 <alt_irq_register>
#endif  
}
 200ea0c:	e037883a 	mov	sp,fp
 200ea10:	dfc00117 	ldw	ra,4(sp)
 200ea14:	df000017 	ldw	fp,0(sp)
 200ea18:	dec00204 	addi	sp,sp,8
 200ea1c:	f800283a 	ret

0200ea20 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 200ea20:	defffd04 	addi	sp,sp,-12
 200ea24:	df000215 	stw	fp,8(sp)
 200ea28:	df000204 	addi	fp,sp,8
 200ea2c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 200ea30:	e0bfff17 	ldw	r2,-4(fp)
 200ea34:	10800a17 	ldw	r2,40(r2)
 200ea38:	10800104 	addi	r2,r2,4
 200ea3c:	10800037 	ldwio	r2,0(r2)
 200ea40:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 200ea44:	e0bffe17 	ldw	r2,-8(fp)
 200ea48:	10800054 	ori	r2,r2,1
 200ea4c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 200ea50:	e0bfff17 	ldw	r2,-4(fp)
 200ea54:	10800a17 	ldw	r2,40(r2)
 200ea58:	10800104 	addi	r2,r2,4
 200ea5c:	e0fffe17 	ldw	r3,-8(fp)
 200ea60:	10c00035 	stwio	r3,0(r2)
}
 200ea64:	e037883a 	mov	sp,fp
 200ea68:	df000017 	ldw	fp,0(sp)
 200ea6c:	dec00104 	addi	sp,sp,4
 200ea70:	f800283a 	ret

0200ea74 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 200ea74:	defffd04 	addi	sp,sp,-12
 200ea78:	df000215 	stw	fp,8(sp)
 200ea7c:	df000204 	addi	fp,sp,8
 200ea80:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 200ea84:	e0bfff17 	ldw	r2,-4(fp)
 200ea88:	10800a17 	ldw	r2,40(r2)
 200ea8c:	10800104 	addi	r2,r2,4
 200ea90:	10800037 	ldwio	r2,0(r2)
 200ea94:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 200ea98:	e0fffe17 	ldw	r3,-8(fp)
 200ea9c:	00bfff84 	movi	r2,-2
 200eaa0:	1884703a 	and	r2,r3,r2
 200eaa4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 200eaa8:	e0bfff17 	ldw	r2,-4(fp)
 200eaac:	10800a17 	ldw	r2,40(r2)
 200eab0:	10800104 	addi	r2,r2,4
 200eab4:	e0fffe17 	ldw	r3,-8(fp)
 200eab8:	10c00035 	stwio	r3,0(r2)
}
 200eabc:	e037883a 	mov	sp,fp
 200eac0:	df000017 	ldw	fp,0(sp)
 200eac4:	dec00104 	addi	sp,sp,4
 200eac8:	f800283a 	ret

0200eacc <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 200eacc:	defffd04 	addi	sp,sp,-12
 200ead0:	df000215 	stw	fp,8(sp)
 200ead4:	df000204 	addi	fp,sp,8
 200ead8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 200eadc:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 200eae0:	e0bfff17 	ldw	r2,-4(fp)
 200eae4:	10800a17 	ldw	r2,40(r2)
 200eae8:	10800084 	addi	r2,r2,2
 200eaec:	1080002b 	ldhuio	r2,0(r2)
 200eaf0:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 200eaf4:	e0bffe0b 	ldhu	r2,-8(fp)
}
 200eaf8:	e037883a 	mov	sp,fp
 200eafc:	df000017 	ldw	fp,0(sp)
 200eb00:	dec00104 	addi	sp,sp,4
 200eb04:	f800283a 	ret

0200eb08 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 200eb08:	defffd04 	addi	sp,sp,-12
 200eb0c:	df000215 	stw	fp,8(sp)
 200eb10:	df000204 	addi	fp,sp,8
 200eb14:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 200eb18:	e0bfff17 	ldw	r2,-4(fp)
 200eb1c:	10800a17 	ldw	r2,40(r2)
 200eb20:	10800104 	addi	r2,r2,4
 200eb24:	10800037 	ldwio	r2,0(r2)
 200eb28:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 200eb2c:	e0bffe17 	ldw	r2,-8(fp)
 200eb30:	10bfffec 	andhi	r2,r2,65535
 200eb34:	1004d43a 	srli	r2,r2,16
}
 200eb38:	e037883a 	mov	sp,fp
 200eb3c:	df000017 	ldw	fp,0(sp)
 200eb40:	dec00104 	addi	sp,sp,4
 200eb44:	f800283a 	ret

0200eb48 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 200eb48:	defffc04 	addi	sp,sp,-16
 200eb4c:	df000315 	stw	fp,12(sp)
 200eb50:	df000304 	addi	fp,sp,12
 200eb54:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 200eb58:	e0bffe17 	ldw	r2,-8(fp)
 200eb5c:	1080800c 	andi	r2,r2,512
 200eb60:	1004d27a 	srli	r2,r2,9
 200eb64:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
 200eb68:	e0bffd17 	ldw	r2,-12(fp)
 200eb6c:	1005003a 	cmpeq	r2,r2,zero
 200eb70:	1000031e 	bne	r2,zero,200eb80 <alt_up_rs232_check_parity+0x38>
 200eb74:	00bfffc4 	movi	r2,-1
 200eb78:	e0bfff15 	stw	r2,-4(fp)
 200eb7c:	00000106 	br	200eb84 <alt_up_rs232_check_parity+0x3c>
 200eb80:	e03fff15 	stw	zero,-4(fp)
 200eb84:	e0bfff17 	ldw	r2,-4(fp)
}
 200eb88:	e037883a 	mov	sp,fp
 200eb8c:	df000017 	ldw	fp,0(sp)
 200eb90:	dec00104 	addi	sp,sp,4
 200eb94:	f800283a 	ret

0200eb98 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 200eb98:	defffc04 	addi	sp,sp,-16
 200eb9c:	df000315 	stw	fp,12(sp)
 200eba0:	df000304 	addi	fp,sp,12
 200eba4:	e13ffe15 	stw	r4,-8(fp)
 200eba8:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 200ebac:	e0bffe17 	ldw	r2,-8(fp)
 200ebb0:	10800a17 	ldw	r2,40(r2)
 200ebb4:	10800037 	ldwio	r2,0(r2)
 200ebb8:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 200ebbc:	e0bffe17 	ldw	r2,-8(fp)
 200ebc0:	10800a17 	ldw	r2,40(r2)
 200ebc4:	e0ffff03 	ldbu	r3,-4(fp)
 200ebc8:	10c00035 	stwio	r3,0(r2)
	return 0;
 200ebcc:	0005883a 	mov	r2,zero
}
 200ebd0:	e037883a 	mov	sp,fp
 200ebd4:	df000017 	ldw	fp,0(sp)
 200ebd8:	dec00104 	addi	sp,sp,4
 200ebdc:	f800283a 	ret

0200ebe0 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 200ebe0:	defffa04 	addi	sp,sp,-24
 200ebe4:	dfc00515 	stw	ra,20(sp)
 200ebe8:	df000415 	stw	fp,16(sp)
 200ebec:	df000404 	addi	fp,sp,16
 200ebf0:	e13ffd15 	stw	r4,-12(fp)
 200ebf4:	e17ffe15 	stw	r5,-8(fp)
 200ebf8:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 200ebfc:	e0bffd17 	ldw	r2,-12(fp)
 200ec00:	10800a17 	ldw	r2,40(r2)
 200ec04:	10800037 	ldwio	r2,0(r2)
 200ec08:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 200ec0c:	e0bffc17 	ldw	r2,-16(fp)
 200ec10:	1007883a 	mov	r3,r2
 200ec14:	e0bffe17 	ldw	r2,-8(fp)
 200ec18:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 200ec1c:	e13ffc17 	ldw	r4,-16(fp)
 200ec20:	200eb480 	call	200eb48 <alt_up_rs232_check_parity>
 200ec24:	1007883a 	mov	r3,r2
 200ec28:	e0bfff17 	ldw	r2,-4(fp)
 200ec2c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 200ec30:	e0bffc17 	ldw	r2,-16(fp)
 200ec34:	10a0000c 	andi	r2,r2,32768
 200ec38:	1004d3fa 	srli	r2,r2,15
 200ec3c:	10bfffc4 	addi	r2,r2,-1
}
 200ec40:	e037883a 	mov	sp,fp
 200ec44:	dfc00117 	ldw	ra,4(sp)
 200ec48:	df000017 	ldw	fp,0(sp)
 200ec4c:	dec00204 	addi	sp,sp,8
 200ec50:	f800283a 	ret

0200ec54 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 200ec54:	defff804 	addi	sp,sp,-32
 200ec58:	dfc00715 	stw	ra,28(sp)
 200ec5c:	df000615 	stw	fp,24(sp)
 200ec60:	df000604 	addi	fp,sp,24
 200ec64:	e13ffd15 	stw	r4,-12(fp)
 200ec68:	e17ffe15 	stw	r5,-8(fp)
 200ec6c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 200ec70:	e0bffd17 	ldw	r2,-12(fp)
 200ec74:	10800017 	ldw	r2,0(r2)
 200ec78:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 200ec7c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 200ec80:	00000c06 	br	200ecb4 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
 200ec84:	e17ffe17 	ldw	r5,-8(fp)
 200ec88:	e0bffe17 	ldw	r2,-8(fp)
 200ec8c:	10800044 	addi	r2,r2,1
 200ec90:	e0bffe15 	stw	r2,-8(fp)
 200ec94:	e1bffc04 	addi	r6,fp,-16
 200ec98:	e13ffb17 	ldw	r4,-20(fp)
 200ec9c:	200ebe00 	call	200ebe0 <alt_up_rs232_read_data>
 200eca0:	1004c03a 	cmpne	r2,r2,zero
 200eca4:	1000091e 	bne	r2,zero,200eccc <alt_up_rs232_read_fd+0x78>
			count++;
 200eca8:	e0bffa17 	ldw	r2,-24(fp)
 200ecac:	10800044 	addi	r2,r2,1
 200ecb0:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 200ecb4:	e0bfff17 	ldw	r2,-4(fp)
 200ecb8:	10bfffc4 	addi	r2,r2,-1
 200ecbc:	e0bfff15 	stw	r2,-4(fp)
 200ecc0:	e0bfff17 	ldw	r2,-4(fp)
 200ecc4:	10bfffd8 	cmpnei	r2,r2,-1
 200ecc8:	103fee1e 	bne	r2,zero,200ec84 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 200eccc:	e0bffa17 	ldw	r2,-24(fp)
}
 200ecd0:	e037883a 	mov	sp,fp
 200ecd4:	dfc00117 	ldw	ra,4(sp)
 200ecd8:	df000017 	ldw	fp,0(sp)
 200ecdc:	dec00204 	addi	sp,sp,8
 200ece0:	f800283a 	ret

0200ece4 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 200ece4:	defff904 	addi	sp,sp,-28
 200ece8:	dfc00615 	stw	ra,24(sp)
 200ecec:	df000515 	stw	fp,20(sp)
 200ecf0:	df000504 	addi	fp,sp,20
 200ecf4:	e13ffd15 	stw	r4,-12(fp)
 200ecf8:	e17ffe15 	stw	r5,-8(fp)
 200ecfc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 200ed00:	e0bffd17 	ldw	r2,-12(fp)
 200ed04:	10800017 	ldw	r2,0(r2)
 200ed08:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 200ed0c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 200ed10:	00000d06 	br	200ed48 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 200ed14:	e0bffe17 	ldw	r2,-8(fp)
 200ed18:	10800003 	ldbu	r2,0(r2)
 200ed1c:	11403fcc 	andi	r5,r2,255
 200ed20:	e13ffc17 	ldw	r4,-16(fp)
 200ed24:	200eb980 	call	200eb98 <alt_up_rs232_write_data>
 200ed28:	1004c03a 	cmpne	r2,r2,zero
 200ed2c:	10000c1e 	bne	r2,zero,200ed60 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
 200ed30:	e0bffb17 	ldw	r2,-20(fp)
 200ed34:	10800044 	addi	r2,r2,1
 200ed38:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 200ed3c:	e0bffe17 	ldw	r2,-8(fp)
 200ed40:	10800044 	addi	r2,r2,1
 200ed44:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 200ed48:	e0bfff17 	ldw	r2,-4(fp)
 200ed4c:	10bfffc4 	addi	r2,r2,-1
 200ed50:	e0bfff15 	stw	r2,-4(fp)
 200ed54:	e0bfff17 	ldw	r2,-4(fp)
 200ed58:	10bfffd8 	cmpnei	r2,r2,-1
 200ed5c:	103fed1e 	bne	r2,zero,200ed14 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
 200ed60:	e0bffb17 	ldw	r2,-20(fp)
}
 200ed64:	e037883a 	mov	sp,fp
 200ed68:	dfc00117 	ldw	ra,4(sp)
 200ed6c:	df000017 	ldw	fp,0(sp)
 200ed70:	dec00204 	addi	sp,sp,8
 200ed74:	f800283a 	ret

0200ed78 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 200ed78:	defffc04 	addi	sp,sp,-16
 200ed7c:	dfc00315 	stw	ra,12(sp)
 200ed80:	df000215 	stw	fp,8(sp)
 200ed84:	df000204 	addi	fp,sp,8
 200ed88:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 200ed8c:	e13fff17 	ldw	r4,-4(fp)
 200ed90:	01408074 	movhi	r5,513
 200ed94:	2945ba04 	addi	r5,r5,5864
 200ed98:	200f7c40 	call	200f7c4 <alt_find_dev>
 200ed9c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 200eda0:	e0bffe17 	ldw	r2,-8(fp)
}
 200eda4:	e037883a 	mov	sp,fp
 200eda8:	dfc00117 	ldw	ra,4(sp)
 200edac:	df000017 	ldw	fp,0(sp)
 200edb0:	dec00204 	addi	sp,sp,8
 200edb4:	f800283a 	ret

0200edb8 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 200edb8:	defff904 	addi	sp,sp,-28
 200edbc:	dfc00615 	stw	ra,24(sp)
 200edc0:	df000515 	stw	fp,20(sp)
 200edc4:	df000504 	addi	fp,sp,20
 200edc8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 200edcc:	00800144 	movi	r2,5
 200edd0:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 200edd4:	00800044 	movi	r2,1
 200edd8:	d8800015 	stw	r2,0(sp)
 200eddc:	e0bffe44 	addi	r2,fp,-7
 200ede0:	d8800115 	stw	r2,4(sp)
 200ede4:	d8000215 	stw	zero,8(sp)
 200ede8:	e13fff17 	ldw	r4,-4(fp)
 200edec:	000b883a 	mov	r5,zero
 200edf0:	01800044 	movi	r6,1
 200edf4:	e1fffe04 	addi	r7,fp,-8
 200edf8:	200fe880 	call	200fe88 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 200edfc:	e0bffe43 	ldbu	r2,-7(fp)
 200ee00:	10803fcc 	andi	r2,r2,255
}
 200ee04:	e037883a 	mov	sp,fp
 200ee08:	dfc00117 	ldw	ra,4(sp)
 200ee0c:	df000017 	ldw	fp,0(sp)
 200ee10:	dec00204 	addi	sp,sp,8
 200ee14:	f800283a 	ret

0200ee18 <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 200ee18:	defff604 	addi	sp,sp,-40
 200ee1c:	dfc00915 	stw	ra,36(sp)
 200ee20:	df000815 	stw	fp,32(sp)
 200ee24:	df000804 	addi	fp,sp,32
 200ee28:	e13ffd15 	stw	r4,-12(fp)
 200ee2c:	e17ffe15 	stw	r5,-8(fp)
 200ee30:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 200ee34:	e0bfff17 	ldw	r2,-4(fp)
 200ee38:	1005003a 	cmpeq	r2,r2,zero
 200ee3c:	1000121e 	bne	r2,zero,200ee88 <epcs_sector_erase+0x70>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 200ee40:	00bff604 	movi	r2,-40
 200ee44:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 200ee48:	e0bffe17 	ldw	r2,-8(fp)
 200ee4c:	1004d63a 	srli	r2,r2,24
 200ee50:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 200ee54:	e0bffe17 	ldw	r2,-8(fp)
 200ee58:	1004d43a 	srli	r2,r2,16
 200ee5c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 200ee60:	e0bffe17 	ldw	r2,-8(fp)
 200ee64:	1004d23a 	srli	r2,r2,8
 200ee68:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 200ee6c:	e0bffe17 	ldw	r2,-8(fp)
 200ee70:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 200ee74:	00800144 	movi	r2,5
 200ee78:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 200ee7c:	e13ffd17 	ldw	r4,-12(fp)
 200ee80:	200f3dc0 	call	200f3dc <epcs_enter_4_bytes_mode>
 200ee84:	00000c06 	br	200eeb8 <epcs_sector_erase+0xa0>
  }
  else
  {
      se[0] = epcs_se;
 200ee88:	00bff604 	movi	r2,-40
 200ee8c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 200ee90:	e0bffe17 	ldw	r2,-8(fp)
 200ee94:	1004d43a 	srli	r2,r2,16
 200ee98:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 200ee9c:	e0bffe17 	ldw	r2,-8(fp)
 200eea0:	1004d23a 	srli	r2,r2,8
 200eea4:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 200eea8:	e0bffe17 	ldw	r2,-8(fp)
 200eeac:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 200eeb0:	00800104 	movi	r2,4
 200eeb4:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 200eeb8:	e13ffd17 	ldw	r4,-12(fp)
 200eebc:	200f0cc0 	call	200f0cc <epcs_write_enable>

  alt_avalon_spi_command(
 200eec0:	e1bffb03 	ldbu	r6,-20(fp)
 200eec4:	e1fffb44 	addi	r7,fp,-19
 200eec8:	d8000015 	stw	zero,0(sp)
 200eecc:	d8000115 	stw	zero,4(sp)
 200eed0:	d8000215 	stw	zero,8(sp)
 200eed4:	e13ffd17 	ldw	r4,-12(fp)
 200eed8:	000b883a 	mov	r5,zero
 200eedc:	200fe880 	call	200fe88 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 200eee0:	e13ffd17 	ldw	r4,-12(fp)
 200eee4:	200ef100 	call	200ef10 <epcs_await_wip_released>

  if(four_bytes_mode)
 200eee8:	e0bfff17 	ldw	r2,-4(fp)
 200eeec:	1005003a 	cmpeq	r2,r2,zero
 200eef0:	1000021e 	bne	r2,zero,200eefc <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 200eef4:	e13ffd17 	ldw	r4,-12(fp)
 200eef8:	200f4340 	call	200f434 <epcs_exit_4_bytes_mode>
  }
}
 200eefc:	e037883a 	mov	sp,fp
 200ef00:	dfc00117 	ldw	ra,4(sp)
 200ef04:	df000017 	ldw	fp,0(sp)
 200ef08:	dec00204 	addi	sp,sp,8
 200ef0c:	f800283a 	ret

0200ef10 <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 200ef10:	defffd04 	addi	sp,sp,-12
 200ef14:	dfc00215 	stw	ra,8(sp)
 200ef18:	df000115 	stw	fp,4(sp)
 200ef1c:	df000104 	addi	fp,sp,4
 200ef20:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 200ef24:	e13fff17 	ldw	r4,-4(fp)
 200ef28:	200ef480 	call	200ef48 <epcs_test_wip>
 200ef2c:	1004c03a 	cmpne	r2,r2,zero
 200ef30:	103ffc1e 	bne	r2,zero,200ef24 <epcs_await_wip_released+0x14>
  {
  }
}
 200ef34:	e037883a 	mov	sp,fp
 200ef38:	dfc00117 	ldw	ra,4(sp)
 200ef3c:	df000017 	ldw	fp,0(sp)
 200ef40:	dec00204 	addi	sp,sp,8
 200ef44:	f800283a 	ret

0200ef48 <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 200ef48:	defffd04 	addi	sp,sp,-12
 200ef4c:	dfc00215 	stw	ra,8(sp)
 200ef50:	df000115 	stw	fp,4(sp)
 200ef54:	df000104 	addi	fp,sp,4
 200ef58:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 200ef5c:	e13fff17 	ldw	r4,-4(fp)
 200ef60:	200edb80 	call	200edb8 <epcs_read_status_register>
 200ef64:	10803fcc 	andi	r2,r2,255
 200ef68:	1080004c 	andi	r2,r2,1
}
 200ef6c:	e037883a 	mov	sp,fp
 200ef70:	dfc00117 	ldw	ra,4(sp)
 200ef74:	df000017 	ldw	fp,0(sp)
 200ef78:	dec00204 	addi	sp,sp,8
 200ef7c:	f800283a 	ret

0200ef80 <epcs_read_buffer>:
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 200ef80:	defff404 	addi	sp,sp,-48
 200ef84:	dfc00b15 	stw	ra,44(sp)
 200ef88:	df000a15 	stw	fp,40(sp)
 200ef8c:	df000a04 	addi	fp,sp,40
 200ef90:	e13ffc15 	stw	r4,-16(fp)
 200ef94:	e17ffd15 	stw	r5,-12(fp)
 200ef98:	e1bffe15 	stw	r6,-8(fp)
 200ef9c:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 200efa0:	008000c4 	movi	r2,3
 200efa4:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 200efa8:	e0800217 	ldw	r2,8(fp)
 200efac:	1005003a 	cmpeq	r2,r2,zero
 200efb0:	10001c1e 	bne	r2,zero,200f024 <epcs_read_buffer+0xa4>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 200efb4:	e0bffd17 	ldw	r2,-12(fp)
 200efb8:	1005d63a 	srai	r2,r2,24
 200efbc:	1007883a 	mov	r3,r2
 200efc0:	00bfffc4 	movi	r2,-1
 200efc4:	1884703a 	and	r2,r3,r2
 200efc8:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 200efcc:	e0bffd17 	ldw	r2,-12(fp)
 200efd0:	1005d43a 	srai	r2,r2,16
 200efd4:	1007883a 	mov	r3,r2
 200efd8:	00bfffc4 	movi	r2,-1
 200efdc:	1884703a 	and	r2,r3,r2
 200efe0:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 200efe4:	e0bffd17 	ldw	r2,-12(fp)
 200efe8:	1005d23a 	srai	r2,r2,8
 200efec:	1007883a 	mov	r3,r2
 200eff0:	00bfffc4 	movi	r2,-1
 200eff4:	1884703a 	and	r2,r3,r2
 200eff8:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 200effc:	e0bffd17 	ldw	r2,-12(fp)
 200f000:	1007883a 	mov	r3,r2
 200f004:	00bfffc4 	movi	r2,-1
 200f008:	1884703a 	and	r2,r3,r2
 200f00c:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 200f010:	00800144 	movi	r2,5
 200f014:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 200f018:	e13ffc17 	ldw	r4,-16(fp)
 200f01c:	200f3dc0 	call	200f3dc <epcs_enter_4_bytes_mode>
 200f020:	00001306 	br	200f070 <epcs_read_buffer+0xf0>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 200f024:	e0bffd17 	ldw	r2,-12(fp)
 200f028:	1005d43a 	srai	r2,r2,16
 200f02c:	1007883a 	mov	r3,r2
 200f030:	00bfffc4 	movi	r2,-1
 200f034:	1884703a 	and	r2,r3,r2
 200f038:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 200f03c:	e0bffd17 	ldw	r2,-12(fp)
 200f040:	1005d23a 	srai	r2,r2,8
 200f044:	1007883a 	mov	r3,r2
 200f048:	00bfffc4 	movi	r2,-1
 200f04c:	1884703a 	and	r2,r3,r2
 200f050:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 200f054:	e0bffd17 	ldw	r2,-12(fp)
 200f058:	1007883a 	mov	r3,r2
 200f05c:	00bfffc4 	movi	r2,-1
 200f060:	1884703a 	and	r2,r3,r2
 200f064:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 200f068:	00800104 	movi	r2,4
 200f06c:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 200f070:	e13ffc17 	ldw	r4,-16(fp)
 200f074:	200ef100 	call	200ef10 <epcs_await_wip_released>

  alt_avalon_spi_command(
 200f078:	e0bfff17 	ldw	r2,-4(fp)
 200f07c:	e1fffa04 	addi	r7,fp,-24
 200f080:	d8800015 	stw	r2,0(sp)
 200f084:	e0bffe17 	ldw	r2,-8(fp)
 200f088:	d8800115 	stw	r2,4(sp)
 200f08c:	d8000215 	stw	zero,8(sp)
 200f090:	e13ffc17 	ldw	r4,-16(fp)
 200f094:	000b883a 	mov	r5,zero
 200f098:	e1bff917 	ldw	r6,-28(fp)
 200f09c:	200fe880 	call	200fe88 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 200f0a0:	e0800217 	ldw	r2,8(fp)
 200f0a4:	1005003a 	cmpeq	r2,r2,zero
 200f0a8:	1000021e 	bne	r2,zero,200f0b4 <epcs_read_buffer+0x134>
  {
    epcs_exit_4_bytes_mode(base);
 200f0ac:	e13ffc17 	ldw	r4,-16(fp)
 200f0b0:	200f4340 	call	200f434 <epcs_exit_4_bytes_mode>
  }

  return length;
 200f0b4:	e0bfff17 	ldw	r2,-4(fp)
}
 200f0b8:	e037883a 	mov	sp,fp
 200f0bc:	dfc00117 	ldw	ra,4(sp)
 200f0c0:	df000017 	ldw	fp,0(sp)
 200f0c4:	dec00204 	addi	sp,sp,8
 200f0c8:	f800283a 	ret

0200f0cc <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 200f0cc:	defff904 	addi	sp,sp,-28
 200f0d0:	dfc00615 	stw	ra,24(sp)
 200f0d4:	df000515 	stw	fp,20(sp)
 200f0d8:	df000504 	addi	fp,sp,20
 200f0dc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 200f0e0:	00800184 	movi	r2,6
 200f0e4:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 200f0e8:	d8000015 	stw	zero,0(sp)
 200f0ec:	d8000115 	stw	zero,4(sp)
 200f0f0:	d8000215 	stw	zero,8(sp)
 200f0f4:	e13fff17 	ldw	r4,-4(fp)
 200f0f8:	000b883a 	mov	r5,zero
 200f0fc:	01800044 	movi	r6,1
 200f100:	e1fffe04 	addi	r7,fp,-8
 200f104:	200fe880 	call	200fe88 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 200f108:	e037883a 	mov	sp,fp
 200f10c:	dfc00117 	ldw	ra,4(sp)
 200f110:	df000017 	ldw	fp,0(sp)
 200f114:	dec00204 	addi	sp,sp,8
 200f118:	f800283a 	ret

0200f11c <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 200f11c:	defff804 	addi	sp,sp,-32
 200f120:	dfc00715 	stw	ra,28(sp)
 200f124:	df000615 	stw	fp,24(sp)
 200f128:	df000604 	addi	fp,sp,24
 200f12c:	e13ffe15 	stw	r4,-8(fp)
 200f130:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 200f134:	00800044 	movi	r2,1
 200f138:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 200f13c:	e0bfff03 	ldbu	r2,-4(fp)
 200f140:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 200f144:	d8000015 	stw	zero,0(sp)
 200f148:	d8000115 	stw	zero,4(sp)
 200f14c:	d8000215 	stw	zero,8(sp)
 200f150:	e13ffe17 	ldw	r4,-8(fp)
 200f154:	000b883a 	mov	r5,zero
 200f158:	01800084 	movi	r6,2
 200f15c:	e1fffd04 	addi	r7,fp,-12
 200f160:	200fe880 	call	200fe88 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 200f164:	e13ffe17 	ldw	r4,-8(fp)
 200f168:	200ef100 	call	200ef10 <epcs_await_wip_released>
}
 200f16c:	e037883a 	mov	sp,fp
 200f170:	dfc00117 	ldw	ra,4(sp)
 200f174:	df000017 	ldw	fp,0(sp)
 200f178:	dec00204 	addi	sp,sp,8
 200f17c:	f800283a 	ret

0200f180 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 200f180:	defff404 	addi	sp,sp,-48
 200f184:	dfc00b15 	stw	ra,44(sp)
 200f188:	df000a15 	stw	fp,40(sp)
 200f18c:	df000a04 	addi	fp,sp,40
 200f190:	e13ffc15 	stw	r4,-16(fp)
 200f194:	e17ffd15 	stw	r5,-12(fp)
 200f198:	e1bffe15 	stw	r6,-8(fp)
 200f19c:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 200f1a0:	00800084 	movi	r2,2
 200f1a4:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 200f1a8:	e0800217 	ldw	r2,8(fp)
 200f1ac:	1005003a 	cmpeq	r2,r2,zero
 200f1b0:	10001c1e 	bne	r2,zero,200f224 <epcs_write_buffer+0xa4>
  {
      pp[1] = (offset >> 24) & 0xFF;
 200f1b4:	e0bffd17 	ldw	r2,-12(fp)
 200f1b8:	1005d63a 	srai	r2,r2,24
 200f1bc:	1007883a 	mov	r3,r2
 200f1c0:	00bfffc4 	movi	r2,-1
 200f1c4:	1884703a 	and	r2,r3,r2
 200f1c8:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 200f1cc:	e0bffd17 	ldw	r2,-12(fp)
 200f1d0:	1005d43a 	srai	r2,r2,16
 200f1d4:	1007883a 	mov	r3,r2
 200f1d8:	00bfffc4 	movi	r2,-1
 200f1dc:	1884703a 	and	r2,r3,r2
 200f1e0:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 200f1e4:	e0bffd17 	ldw	r2,-12(fp)
 200f1e8:	1005d23a 	srai	r2,r2,8
 200f1ec:	1007883a 	mov	r3,r2
 200f1f0:	00bfffc4 	movi	r2,-1
 200f1f4:	1884703a 	and	r2,r3,r2
 200f1f8:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 200f1fc:	e0bffd17 	ldw	r2,-12(fp)
 200f200:	1007883a 	mov	r3,r2
 200f204:	00bfffc4 	movi	r2,-1
 200f208:	1884703a 	and	r2,r3,r2
 200f20c:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 200f210:	00800144 	movi	r2,5
 200f214:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 200f218:	e13ffc17 	ldw	r4,-16(fp)
 200f21c:	200f3dc0 	call	200f3dc <epcs_enter_4_bytes_mode>
 200f220:	00001306 	br	200f270 <epcs_write_buffer+0xf0>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 200f224:	e0bffd17 	ldw	r2,-12(fp)
 200f228:	1005d43a 	srai	r2,r2,16
 200f22c:	1007883a 	mov	r3,r2
 200f230:	00bfffc4 	movi	r2,-1
 200f234:	1884703a 	and	r2,r3,r2
 200f238:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 200f23c:	e0bffd17 	ldw	r2,-12(fp)
 200f240:	1005d23a 	srai	r2,r2,8
 200f244:	1007883a 	mov	r3,r2
 200f248:	00bfffc4 	movi	r2,-1
 200f24c:	1884703a 	and	r2,r3,r2
 200f250:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 200f254:	e0bffd17 	ldw	r2,-12(fp)
 200f258:	1007883a 	mov	r3,r2
 200f25c:	00bfffc4 	movi	r2,-1
 200f260:	1884703a 	and	r2,r3,r2
 200f264:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 200f268:	00800104 	movi	r2,4
 200f26c:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 200f270:	e13ffc17 	ldw	r4,-16(fp)
 200f274:	200f0cc0 	call	200f0cc <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 200f278:	e1fffa04 	addi	r7,fp,-24
 200f27c:	d8000015 	stw	zero,0(sp)
 200f280:	d8000115 	stw	zero,4(sp)
 200f284:	00800044 	movi	r2,1
 200f288:	d8800215 	stw	r2,8(sp)
 200f28c:	e13ffc17 	ldw	r4,-16(fp)
 200f290:	000b883a 	mov	r5,zero
 200f294:	e1bff917 	ldw	r6,-28(fp)
 200f298:	200fe880 	call	200fe88 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 200f29c:	e1bfff17 	ldw	r6,-4(fp)
 200f2a0:	d8000015 	stw	zero,0(sp)
 200f2a4:	d8000115 	stw	zero,4(sp)
 200f2a8:	d8000215 	stw	zero,8(sp)
 200f2ac:	e13ffc17 	ldw	r4,-16(fp)
 200f2b0:	000b883a 	mov	r5,zero
 200f2b4:	e1fffe17 	ldw	r7,-8(fp)
 200f2b8:	200fe880 	call	200fe88 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 200f2bc:	e13ffc17 	ldw	r4,-16(fp)
 200f2c0:	200ef100 	call	200ef10 <epcs_await_wip_released>

  if(four_bytes_mode)
 200f2c4:	e0800217 	ldw	r2,8(fp)
 200f2c8:	1005003a 	cmpeq	r2,r2,zero
 200f2cc:	1000021e 	bne	r2,zero,200f2d8 <epcs_write_buffer+0x158>
  {
    epcs_exit_4_bytes_mode(base);
 200f2d0:	e13ffc17 	ldw	r4,-16(fp)
 200f2d4:	200f4340 	call	200f434 <epcs_exit_4_bytes_mode>
  }

  return length;
 200f2d8:	e0bfff17 	ldw	r2,-4(fp)
}
 200f2dc:	e037883a 	mov	sp,fp
 200f2e0:	dfc00117 	ldw	ra,4(sp)
 200f2e4:	df000017 	ldw	fp,0(sp)
 200f2e8:	dec00204 	addi	sp,sp,8
 200f2ec:	f800283a 	ret

0200f2f0 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 200f2f0:	defff804 	addi	sp,sp,-32
 200f2f4:	dfc00715 	stw	ra,28(sp)
 200f2f8:	df000615 	stw	fp,24(sp)
 200f2fc:	df000604 	addi	fp,sp,24
 200f300:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 200f304:	00bfeac4 	movi	r2,-85
 200f308:	e0bffd05 	stb	r2,-12(fp)
 200f30c:	e03ffd45 	stb	zero,-11(fp)
 200f310:	e03ffd85 	stb	zero,-10(fp)
 200f314:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 200f318:	00800044 	movi	r2,1
 200f31c:	d8800015 	stw	r2,0(sp)
 200f320:	e0bffe04 	addi	r2,fp,-8
 200f324:	d8800115 	stw	r2,4(sp)
 200f328:	d8000215 	stw	zero,8(sp)
 200f32c:	e13fff17 	ldw	r4,-4(fp)
 200f330:	000b883a 	mov	r5,zero
 200f334:	01800104 	movi	r6,4
 200f338:	e1fffd04 	addi	r7,fp,-12
 200f33c:	200fe880 	call	200fe88 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 200f340:	e0bffe03 	ldbu	r2,-8(fp)
 200f344:	10803fcc 	andi	r2,r2,255
}
 200f348:	e037883a 	mov	sp,fp
 200f34c:	dfc00117 	ldw	ra,4(sp)
 200f350:	df000017 	ldw	fp,0(sp)
 200f354:	dec00204 	addi	sp,sp,8
 200f358:	f800283a 	ret

0200f35c <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 200f35c:	defff904 	addi	sp,sp,-28
 200f360:	dfc00615 	stw	ra,24(sp)
 200f364:	df000515 	stw	fp,20(sp)
 200f368:	df000504 	addi	fp,sp,20
 200f36c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 200f370:	00bfe7c4 	movi	r2,-97
 200f374:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 200f378:	008000c4 	movi	r2,3
 200f37c:	d8800015 	stw	r2,0(sp)
 200f380:	e0bffe44 	addi	r2,fp,-7
 200f384:	d8800115 	stw	r2,4(sp)
 200f388:	d8000215 	stw	zero,8(sp)
 200f38c:	e13fff17 	ldw	r4,-4(fp)
 200f390:	000b883a 	mov	r5,zero
 200f394:	01800044 	movi	r6,1
 200f398:	e1fffe04 	addi	r7,fp,-8
 200f39c:	200fe880 	call	200fe88 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 200f3a0:	e0bffe43 	ldbu	r2,-7(fp)
 200f3a4:	10803fcc 	andi	r2,r2,255
 200f3a8:	1006943a 	slli	r3,r2,16
 200f3ac:	e0bffe83 	ldbu	r2,-6(fp)
 200f3b0:	10803fcc 	andi	r2,r2,255
 200f3b4:	1004923a 	slli	r2,r2,8
 200f3b8:	1886b03a 	or	r3,r3,r2
 200f3bc:	e0bffec3 	ldbu	r2,-5(fp)
 200f3c0:	10803fcc 	andi	r2,r2,255
 200f3c4:	1884b03a 	or	r2,r3,r2
}
 200f3c8:	e037883a 	mov	sp,fp
 200f3cc:	dfc00117 	ldw	ra,4(sp)
 200f3d0:	df000017 	ldw	fp,0(sp)
 200f3d4:	dec00204 	addi	sp,sp,8
 200f3d8:	f800283a 	ret

0200f3dc <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 200f3dc:	defff904 	addi	sp,sp,-28
 200f3e0:	dfc00615 	stw	ra,24(sp)
 200f3e4:	df000515 	stw	fp,20(sp)
 200f3e8:	df000504 	addi	fp,sp,20
 200f3ec:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 200f3f0:	00bfedc4 	movi	r2,-73
 200f3f4:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 200f3f8:	e13fff17 	ldw	r4,-4(fp)
 200f3fc:	200f0cc0 	call	200f0cc <epcs_write_enable>

  alt_avalon_spi_command(
 200f400:	d8000015 	stw	zero,0(sp)
 200f404:	d8000115 	stw	zero,4(sp)
 200f408:	d8000215 	stw	zero,8(sp)
 200f40c:	e13fff17 	ldw	r4,-4(fp)
 200f410:	000b883a 	mov	r5,zero
 200f414:	01800044 	movi	r6,1
 200f418:	e1fffe04 	addi	r7,fp,-8
 200f41c:	200fe880 	call	200fe88 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 200f420:	e037883a 	mov	sp,fp
 200f424:	dfc00117 	ldw	ra,4(sp)
 200f428:	df000017 	ldw	fp,0(sp)
 200f42c:	dec00204 	addi	sp,sp,8
 200f430:	f800283a 	ret

0200f434 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 200f434:	defff904 	addi	sp,sp,-28
 200f438:	dfc00615 	stw	ra,24(sp)
 200f43c:	df000515 	stw	fp,20(sp)
 200f440:	df000504 	addi	fp,sp,20
 200f444:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 200f448:	00bffa44 	movi	r2,-23
 200f44c:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 200f450:	e13fff17 	ldw	r4,-4(fp)
 200f454:	200f0cc0 	call	200f0cc <epcs_write_enable>

  alt_avalon_spi_command(
 200f458:	d8000015 	stw	zero,0(sp)
 200f45c:	d8000115 	stw	zero,4(sp)
 200f460:	d8000215 	stw	zero,8(sp)
 200f464:	e13fff17 	ldw	r4,-4(fp)
 200f468:	000b883a 	mov	r5,zero
 200f46c:	01800044 	movi	r6,1
 200f470:	e1fffe04 	addi	r7,fp,-8
 200f474:	200fe880 	call	200fe88 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 200f478:	e037883a 	mov	sp,fp
 200f47c:	dfc00117 	ldw	ra,4(sp)
 200f480:	df000017 	ldw	fp,0(sp)
 200f484:	dec00204 	addi	sp,sp,8
 200f488:	f800283a 	ret

0200f48c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 200f48c:	defffa04 	addi	sp,sp,-24
 200f490:	dfc00515 	stw	ra,20(sp)
 200f494:	df000415 	stw	fp,16(sp)
 200f498:	df000404 	addi	fp,sp,16
 200f49c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 200f4a0:	00800244 	movi	r2,9
 200f4a4:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 200f4a8:	e13ffc17 	ldw	r4,-16(fp)
 200f4ac:	014003f4 	movhi	r5,15
 200f4b0:	29509004 	addi	r5,r5,16960
 200f4b4:	2003b380 	call	2003b38 <__mulsi3>
 200f4b8:	100b883a 	mov	r5,r2
 200f4bc:	01017db4 	movhi	r4,1526
 200f4c0:	21384004 	addi	r4,r4,-7936
 200f4c4:	2003b280 	call	2003b28 <__udivsi3>
 200f4c8:	100b883a 	mov	r5,r2
 200f4cc:	01200034 	movhi	r4,32768
 200f4d0:	213fffc4 	addi	r4,r4,-1
 200f4d4:	2003b280 	call	2003b28 <__udivsi3>
 200f4d8:	100b883a 	mov	r5,r2
 200f4dc:	e13fff17 	ldw	r4,-4(fp)
 200f4e0:	2003b280 	call	2003b28 <__udivsi3>
 200f4e4:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 200f4e8:	e0bffd17 	ldw	r2,-12(fp)
 200f4ec:	1005003a 	cmpeq	r2,r2,zero
 200f4f0:	10002a1e 	bne	r2,zero,200f59c <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
 200f4f4:	e03ffe15 	stw	zero,-8(fp)
 200f4f8:	00001706 	br	200f558 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 200f4fc:	00a00034 	movhi	r2,32768
 200f500:	10bfffc4 	addi	r2,r2,-1
 200f504:	10bfffc4 	addi	r2,r2,-1
 200f508:	103ffe1e 	bne	r2,zero,200f504 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 200f50c:	e13ffc17 	ldw	r4,-16(fp)
 200f510:	014003f4 	movhi	r5,15
 200f514:	29509004 	addi	r5,r5,16960
 200f518:	2003b380 	call	2003b38 <__mulsi3>
 200f51c:	100b883a 	mov	r5,r2
 200f520:	01017db4 	movhi	r4,1526
 200f524:	21384004 	addi	r4,r4,-7936
 200f528:	2003b280 	call	2003b28 <__udivsi3>
 200f52c:	100b883a 	mov	r5,r2
 200f530:	01200034 	movhi	r4,32768
 200f534:	213fffc4 	addi	r4,r4,-1
 200f538:	2003b280 	call	2003b28 <__udivsi3>
 200f53c:	1007883a 	mov	r3,r2
 200f540:	e0bfff17 	ldw	r2,-4(fp)
 200f544:	10c5c83a 	sub	r2,r2,r3
 200f548:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 200f54c:	e0bffe17 	ldw	r2,-8(fp)
 200f550:	10800044 	addi	r2,r2,1
 200f554:	e0bffe15 	stw	r2,-8(fp)
 200f558:	e0fffe17 	ldw	r3,-8(fp)
 200f55c:	e0bffd17 	ldw	r2,-12(fp)
 200f560:	18bfe616 	blt	r3,r2,200f4fc <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 200f564:	e13ffc17 	ldw	r4,-16(fp)
 200f568:	014003f4 	movhi	r5,15
 200f56c:	29509004 	addi	r5,r5,16960
 200f570:	2003b380 	call	2003b38 <__mulsi3>
 200f574:	100b883a 	mov	r5,r2
 200f578:	01017db4 	movhi	r4,1526
 200f57c:	21384004 	addi	r4,r4,-7936
 200f580:	2003b280 	call	2003b28 <__udivsi3>
 200f584:	1009883a 	mov	r4,r2
 200f588:	e17fff17 	ldw	r5,-4(fp)
 200f58c:	2003b380 	call	2003b38 <__mulsi3>
 200f590:	10bfffc4 	addi	r2,r2,-1
 200f594:	103ffe1e 	bne	r2,zero,200f590 <alt_busy_sleep+0x104>
 200f598:	00000d06 	br	200f5d0 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 200f59c:	e13ffc17 	ldw	r4,-16(fp)
 200f5a0:	014003f4 	movhi	r5,15
 200f5a4:	29509004 	addi	r5,r5,16960
 200f5a8:	2003b380 	call	2003b38 <__mulsi3>
 200f5ac:	100b883a 	mov	r5,r2
 200f5b0:	01017db4 	movhi	r4,1526
 200f5b4:	21384004 	addi	r4,r4,-7936
 200f5b8:	2003b280 	call	2003b28 <__udivsi3>
 200f5bc:	1009883a 	mov	r4,r2
 200f5c0:	e17fff17 	ldw	r5,-4(fp)
 200f5c4:	2003b380 	call	2003b38 <__mulsi3>
 200f5c8:	10bfffc4 	addi	r2,r2,-1
 200f5cc:	00bffe16 	blt	zero,r2,200f5c8 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 200f5d0:	0005883a 	mov	r2,zero
}
 200f5d4:	e037883a 	mov	sp,fp
 200f5d8:	dfc00117 	ldw	ra,4(sp)
 200f5dc:	df000017 	ldw	fp,0(sp)
 200f5e0:	dec00204 	addi	sp,sp,8
 200f5e4:	f800283a 	ret

0200f5e8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 200f5e8:	defff904 	addi	sp,sp,-28
 200f5ec:	dfc00615 	stw	ra,24(sp)
 200f5f0:	df000515 	stw	fp,20(sp)
 200f5f4:	df000504 	addi	fp,sp,20
 200f5f8:	e13ffd15 	stw	r4,-12(fp)
 200f5fc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 200f600:	e0bffd17 	ldw	r2,-12(fp)
 200f604:	1005003a 	cmpeq	r2,r2,zero
 200f608:	1000041e 	bne	r2,zero,200f61c <alt_dev_llist_insert+0x34>
 200f60c:	e0bffd17 	ldw	r2,-12(fp)
 200f610:	10800217 	ldw	r2,8(r2)
 200f614:	1004c03a 	cmpne	r2,r2,zero
 200f618:	1000071e 	bne	r2,zero,200f638 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 200f61c:	200f69c0 	call	200f69c <alt_get_errno>
 200f620:	1007883a 	mov	r3,r2
 200f624:	00800584 	movi	r2,22
 200f628:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 200f62c:	00bffa84 	movi	r2,-22
 200f630:	e0bfff15 	stw	r2,-4(fp)
 200f634:	00001306 	br	200f684 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 200f638:	e0fffd17 	ldw	r3,-12(fp)
 200f63c:	e0bffe17 	ldw	r2,-8(fp)
 200f640:	e0bffb15 	stw	r2,-20(fp)
 200f644:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200f648:	e0fffc17 	ldw	r3,-16(fp)
 200f64c:	e0bffb17 	ldw	r2,-20(fp)
 200f650:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 200f654:	e0bffb17 	ldw	r2,-20(fp)
 200f658:	10c00017 	ldw	r3,0(r2)
 200f65c:	e0bffc17 	ldw	r2,-16(fp)
 200f660:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200f664:	e0bffb17 	ldw	r2,-20(fp)
 200f668:	10c00017 	ldw	r3,0(r2)
 200f66c:	e0bffc17 	ldw	r2,-16(fp)
 200f670:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 200f674:	e0fffb17 	ldw	r3,-20(fp)
 200f678:	e0bffc17 	ldw	r2,-16(fp)
 200f67c:	18800015 	stw	r2,0(r3)

  return 0;  
 200f680:	e03fff15 	stw	zero,-4(fp)
 200f684:	e0bfff17 	ldw	r2,-4(fp)
}
 200f688:	e037883a 	mov	sp,fp
 200f68c:	dfc00117 	ldw	ra,4(sp)
 200f690:	df000017 	ldw	fp,0(sp)
 200f694:	dec00204 	addi	sp,sp,8
 200f698:	f800283a 	ret

0200f69c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200f69c:	defffd04 	addi	sp,sp,-12
 200f6a0:	dfc00215 	stw	ra,8(sp)
 200f6a4:	df000115 	stw	fp,4(sp)
 200f6a8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200f6ac:	00808074 	movhi	r2,513
 200f6b0:	1085bd04 	addi	r2,r2,5876
 200f6b4:	10800017 	ldw	r2,0(r2)
 200f6b8:	1005003a 	cmpeq	r2,r2,zero
 200f6bc:	1000061e 	bne	r2,zero,200f6d8 <alt_get_errno+0x3c>
 200f6c0:	00808074 	movhi	r2,513
 200f6c4:	1085bd04 	addi	r2,r2,5876
 200f6c8:	10800017 	ldw	r2,0(r2)
 200f6cc:	103ee83a 	callr	r2
 200f6d0:	e0bfff15 	stw	r2,-4(fp)
 200f6d4:	00000306 	br	200f6e4 <alt_get_errno+0x48>
 200f6d8:	00808074 	movhi	r2,513
 200f6dc:	10889704 	addi	r2,r2,8796
 200f6e0:	e0bfff15 	stw	r2,-4(fp)
 200f6e4:	e0bfff17 	ldw	r2,-4(fp)
}
 200f6e8:	e037883a 	mov	sp,fp
 200f6ec:	dfc00117 	ldw	ra,4(sp)
 200f6f0:	df000017 	ldw	fp,0(sp)
 200f6f4:	dec00204 	addi	sp,sp,8
 200f6f8:	f800283a 	ret

0200f6fc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 200f6fc:	defffd04 	addi	sp,sp,-12
 200f700:	dfc00215 	stw	ra,8(sp)
 200f704:	df000115 	stw	fp,4(sp)
 200f708:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200f70c:	00bfff04 	movi	r2,-4
 200f710:	00c08074 	movhi	r3,513
 200f714:	18c1af04 	addi	r3,r3,1724
 200f718:	1885883a 	add	r2,r3,r2
 200f71c:	e0bfff15 	stw	r2,-4(fp)
 200f720:	00000606 	br	200f73c <_do_ctors+0x40>
        (*ctor) (); 
 200f724:	e0bfff17 	ldw	r2,-4(fp)
 200f728:	10800017 	ldw	r2,0(r2)
 200f72c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200f730:	e0bfff17 	ldw	r2,-4(fp)
 200f734:	10bfff04 	addi	r2,r2,-4
 200f738:	e0bfff15 	stw	r2,-4(fp)
 200f73c:	e0ffff17 	ldw	r3,-4(fp)
 200f740:	00808074 	movhi	r2,513
 200f744:	1081ae04 	addi	r2,r2,1720
 200f748:	18bff62e 	bgeu	r3,r2,200f724 <_do_ctors+0x28>
        (*ctor) (); 
}
 200f74c:	e037883a 	mov	sp,fp
 200f750:	dfc00117 	ldw	ra,4(sp)
 200f754:	df000017 	ldw	fp,0(sp)
 200f758:	dec00204 	addi	sp,sp,8
 200f75c:	f800283a 	ret

0200f760 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 200f760:	defffd04 	addi	sp,sp,-12
 200f764:	dfc00215 	stw	ra,8(sp)
 200f768:	df000115 	stw	fp,4(sp)
 200f76c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 200f770:	00bfff04 	movi	r2,-4
 200f774:	00c08074 	movhi	r3,513
 200f778:	18c1af04 	addi	r3,r3,1724
 200f77c:	1885883a 	add	r2,r3,r2
 200f780:	e0bfff15 	stw	r2,-4(fp)
 200f784:	00000606 	br	200f7a0 <_do_dtors+0x40>
        (*dtor) (); 
 200f788:	e0bfff17 	ldw	r2,-4(fp)
 200f78c:	10800017 	ldw	r2,0(r2)
 200f790:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 200f794:	e0bfff17 	ldw	r2,-4(fp)
 200f798:	10bfff04 	addi	r2,r2,-4
 200f79c:	e0bfff15 	stw	r2,-4(fp)
 200f7a0:	e0ffff17 	ldw	r3,-4(fp)
 200f7a4:	00808074 	movhi	r2,513
 200f7a8:	1081af04 	addi	r2,r2,1724
 200f7ac:	18bff62e 	bgeu	r3,r2,200f788 <_do_dtors+0x28>
        (*dtor) (); 
}
 200f7b0:	e037883a 	mov	sp,fp
 200f7b4:	dfc00117 	ldw	ra,4(sp)
 200f7b8:	df000017 	ldw	fp,0(sp)
 200f7bc:	dec00204 	addi	sp,sp,8
 200f7c0:	f800283a 	ret

0200f7c4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 200f7c4:	defff904 	addi	sp,sp,-28
 200f7c8:	dfc00615 	stw	ra,24(sp)
 200f7cc:	df000515 	stw	fp,20(sp)
 200f7d0:	df000504 	addi	fp,sp,20
 200f7d4:	e13ffd15 	stw	r4,-12(fp)
 200f7d8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 200f7dc:	e0bffe17 	ldw	r2,-8(fp)
 200f7e0:	10800017 	ldw	r2,0(r2)
 200f7e4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 200f7e8:	e13ffd17 	ldw	r4,-12(fp)
 200f7ec:	2004cb80 	call	2004cb8 <strlen>
 200f7f0:	10800044 	addi	r2,r2,1
 200f7f4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 200f7f8:	00000d06 	br	200f830 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 200f7fc:	e0bffc17 	ldw	r2,-16(fp)
 200f800:	11000217 	ldw	r4,8(r2)
 200f804:	e1bffb17 	ldw	r6,-20(fp)
 200f808:	e17ffd17 	ldw	r5,-12(fp)
 200f80c:	20102fc0 	call	20102fc <memcmp>
 200f810:	1004c03a 	cmpne	r2,r2,zero
 200f814:	1000031e 	bne	r2,zero,200f824 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 200f818:	e0bffc17 	ldw	r2,-16(fp)
 200f81c:	e0bfff15 	stw	r2,-4(fp)
 200f820:	00000706 	br	200f840 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 200f824:	e0bffc17 	ldw	r2,-16(fp)
 200f828:	10800017 	ldw	r2,0(r2)
 200f82c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 200f830:	e0fffe17 	ldw	r3,-8(fp)
 200f834:	e0bffc17 	ldw	r2,-16(fp)
 200f838:	10fff01e 	bne	r2,r3,200f7fc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 200f83c:	e03fff15 	stw	zero,-4(fp)
 200f840:	e0bfff17 	ldw	r2,-4(fp)
}
 200f844:	e037883a 	mov	sp,fp
 200f848:	dfc00117 	ldw	ra,4(sp)
 200f84c:	df000017 	ldw	fp,0(sp)
 200f850:	dec00204 	addi	sp,sp,8
 200f854:	f800283a 	ret

0200f858 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 200f858:	deffff04 	addi	sp,sp,-4
 200f85c:	df000015 	stw	fp,0(sp)
 200f860:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 200f864:	e037883a 	mov	sp,fp
 200f868:	df000017 	ldw	fp,0(sp)
 200f86c:	dec00104 	addi	sp,sp,4
 200f870:	f800283a 	ret

0200f874 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 200f874:	defff804 	addi	sp,sp,-32
 200f878:	dfc00715 	stw	ra,28(sp)
 200f87c:	df000615 	stw	fp,24(sp)
 200f880:	dc000515 	stw	r16,20(sp)
 200f884:	df000504 	addi	fp,sp,20
 200f888:	e13ffc15 	stw	r4,-16(fp)
 200f88c:	e17ffd15 	stw	r5,-12(fp)
 200f890:	e1bffe15 	stw	r6,-8(fp)
 200f894:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 200f898:	e13ffd17 	ldw	r4,-12(fp)
 200f89c:	e17ffe17 	ldw	r5,-8(fp)
 200f8a0:	e1bfff17 	ldw	r6,-4(fp)
 200f8a4:	200fc7c0 	call	200fc7c <open>
 200f8a8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 200f8ac:	e0bffb17 	ldw	r2,-20(fp)
 200f8b0:	1004803a 	cmplt	r2,r2,zero
 200f8b4:	10001f1e 	bne	r2,zero,200f934 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 200f8b8:	e13ffb17 	ldw	r4,-20(fp)
 200f8bc:	04008074 	movhi	r16,513
 200f8c0:	84050904 	addi	r16,r16,5156
 200f8c4:	01400304 	movi	r5,12
 200f8c8:	2003b380 	call	2003b38 <__mulsi3>
 200f8cc:	1405883a 	add	r2,r2,r16
 200f8d0:	10c00017 	ldw	r3,0(r2)
 200f8d4:	e0bffc17 	ldw	r2,-16(fp)
 200f8d8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 200f8dc:	e13ffb17 	ldw	r4,-20(fp)
 200f8e0:	04008074 	movhi	r16,513
 200f8e4:	84050904 	addi	r16,r16,5156
 200f8e8:	01400304 	movi	r5,12
 200f8ec:	2003b380 	call	2003b38 <__mulsi3>
 200f8f0:	1405883a 	add	r2,r2,r16
 200f8f4:	10800104 	addi	r2,r2,4
 200f8f8:	10c00017 	ldw	r3,0(r2)
 200f8fc:	e0bffc17 	ldw	r2,-16(fp)
 200f900:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 200f904:	e13ffb17 	ldw	r4,-20(fp)
 200f908:	04008074 	movhi	r16,513
 200f90c:	84050904 	addi	r16,r16,5156
 200f910:	01400304 	movi	r5,12
 200f914:	2003b380 	call	2003b38 <__mulsi3>
 200f918:	1405883a 	add	r2,r2,r16
 200f91c:	10800204 	addi	r2,r2,8
 200f920:	10c00017 	ldw	r3,0(r2)
 200f924:	e0bffc17 	ldw	r2,-16(fp)
 200f928:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 200f92c:	e13ffb17 	ldw	r4,-20(fp)
 200f930:	200d7940 	call	200d794 <alt_release_fd>
  }
} 
 200f934:	e037883a 	mov	sp,fp
 200f938:	dfc00217 	ldw	ra,8(sp)
 200f93c:	df000117 	ldw	fp,4(sp)
 200f940:	dc000017 	ldw	r16,0(sp)
 200f944:	dec00304 	addi	sp,sp,12
 200f948:	f800283a 	ret

0200f94c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 200f94c:	defffb04 	addi	sp,sp,-20
 200f950:	dfc00415 	stw	ra,16(sp)
 200f954:	df000315 	stw	fp,12(sp)
 200f958:	df000304 	addi	fp,sp,12
 200f95c:	e13ffd15 	stw	r4,-12(fp)
 200f960:	e17ffe15 	stw	r5,-8(fp)
 200f964:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 200f968:	01008074 	movhi	r4,513
 200f96c:	21050c04 	addi	r4,r4,5168
 200f970:	e17ffd17 	ldw	r5,-12(fp)
 200f974:	01800044 	movi	r6,1
 200f978:	01c07fc4 	movi	r7,511
 200f97c:	200f8740 	call	200f874 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 200f980:	01008074 	movhi	r4,513
 200f984:	21050904 	addi	r4,r4,5156
 200f988:	e17ffe17 	ldw	r5,-8(fp)
 200f98c:	000d883a 	mov	r6,zero
 200f990:	01c07fc4 	movi	r7,511
 200f994:	200f8740 	call	200f874 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 200f998:	01008074 	movhi	r4,513
 200f99c:	21050f04 	addi	r4,r4,5180
 200f9a0:	e17fff17 	ldw	r5,-4(fp)
 200f9a4:	01800044 	movi	r6,1
 200f9a8:	01c07fc4 	movi	r7,511
 200f9ac:	200f8740 	call	200f874 <alt_open_fd>
}  
 200f9b0:	e037883a 	mov	sp,fp
 200f9b4:	dfc00117 	ldw	ra,4(sp)
 200f9b8:	df000017 	ldw	fp,0(sp)
 200f9bc:	dec00204 	addi	sp,sp,8
 200f9c0:	f800283a 	ret

0200f9c4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 200f9c4:	deffef04 	addi	sp,sp,-68
 200f9c8:	df001015 	stw	fp,64(sp)
 200f9cc:	df001004 	addi	fp,sp,64
 200f9d0:	e13ffc15 	stw	r4,-16(fp)
 200f9d4:	e17ffd15 	stw	r5,-12(fp)
 200f9d8:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 200f9dc:	00bffa84 	movi	r2,-22
 200f9e0:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 200f9e4:	e0bffc17 	ldw	r2,-16(fp)
 200f9e8:	10800828 	cmpgeui	r2,r2,32
 200f9ec:	1000601e 	bne	r2,zero,200fb70 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f9f0:	0005303a 	rdctl	r2,status
 200f9f4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f9f8:	e0fff917 	ldw	r3,-28(fp)
 200f9fc:	00bfff84 	movi	r2,-2
 200fa00:	1884703a 	and	r2,r3,r2
 200fa04:	1001703a 	wrctl	status,r2
  
  return context;
 200fa08:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 200fa0c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 200fa10:	e0bffc17 	ldw	r2,-16(fp)
 200fa14:	00c08074 	movhi	r3,513
 200fa18:	18c8ab04 	addi	r3,r3,8876
 200fa1c:	100490fa 	slli	r2,r2,3
 200fa20:	10c7883a 	add	r3,r2,r3
 200fa24:	e0bffe17 	ldw	r2,-8(fp)
 200fa28:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 200fa2c:	e0bffc17 	ldw	r2,-16(fp)
 200fa30:	00c08074 	movhi	r3,513
 200fa34:	18c8ab04 	addi	r3,r3,8876
 200fa38:	100490fa 	slli	r2,r2,3
 200fa3c:	10c5883a 	add	r2,r2,r3
 200fa40:	10c00104 	addi	r3,r2,4
 200fa44:	e0bffd17 	ldw	r2,-12(fp)
 200fa48:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 200fa4c:	e0bffe17 	ldw	r2,-8(fp)
 200fa50:	1005003a 	cmpeq	r2,r2,zero
 200fa54:	1000201e 	bne	r2,zero,200fad8 <alt_irq_register+0x114>
 200fa58:	e0bffc17 	ldw	r2,-16(fp)
 200fa5c:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200fa60:	0005303a 	rdctl	r2,status
 200fa64:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200fa68:	e0fff617 	ldw	r3,-40(fp)
 200fa6c:	00bfff84 	movi	r2,-2
 200fa70:	1884703a 	and	r2,r3,r2
 200fa74:	1001703a 	wrctl	status,r2
  
  return context;
 200fa78:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 200fa7c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 200fa80:	e0fff717 	ldw	r3,-36(fp)
 200fa84:	00800044 	movi	r2,1
 200fa88:	10c4983a 	sll	r2,r2,r3
 200fa8c:	1007883a 	mov	r3,r2
 200fa90:	00808074 	movhi	r2,513
 200fa94:	1088a004 	addi	r2,r2,8832
 200fa98:	10800017 	ldw	r2,0(r2)
 200fa9c:	1886b03a 	or	r3,r3,r2
 200faa0:	00808074 	movhi	r2,513
 200faa4:	1088a004 	addi	r2,r2,8832
 200faa8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200faac:	00808074 	movhi	r2,513
 200fab0:	1088a004 	addi	r2,r2,8832
 200fab4:	10800017 	ldw	r2,0(r2)
 200fab8:	100170fa 	wrctl	ienable,r2
 200fabc:	e0bff817 	ldw	r2,-32(fp)
 200fac0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200fac4:	e0bff517 	ldw	r2,-44(fp)
 200fac8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 200facc:	0005883a 	mov	r2,zero
 200fad0:	e0bfff15 	stw	r2,-4(fp)
 200fad4:	00002006 	br	200fb58 <alt_irq_register+0x194>
 200fad8:	e0bffc17 	ldw	r2,-16(fp)
 200fadc:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200fae0:	0005303a 	rdctl	r2,status
 200fae4:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200fae8:	e0fff217 	ldw	r3,-56(fp)
 200faec:	00bfff84 	movi	r2,-2
 200faf0:	1884703a 	and	r2,r3,r2
 200faf4:	1001703a 	wrctl	status,r2
  
  return context;
 200faf8:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 200fafc:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 200fb00:	e0fff317 	ldw	r3,-52(fp)
 200fb04:	00800044 	movi	r2,1
 200fb08:	10c4983a 	sll	r2,r2,r3
 200fb0c:	0084303a 	nor	r2,zero,r2
 200fb10:	1007883a 	mov	r3,r2
 200fb14:	00808074 	movhi	r2,513
 200fb18:	1088a004 	addi	r2,r2,8832
 200fb1c:	10800017 	ldw	r2,0(r2)
 200fb20:	1886703a 	and	r3,r3,r2
 200fb24:	00808074 	movhi	r2,513
 200fb28:	1088a004 	addi	r2,r2,8832
 200fb2c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200fb30:	00808074 	movhi	r2,513
 200fb34:	1088a004 	addi	r2,r2,8832
 200fb38:	10800017 	ldw	r2,0(r2)
 200fb3c:	100170fa 	wrctl	ienable,r2
 200fb40:	e0bff417 	ldw	r2,-48(fp)
 200fb44:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200fb48:	e0bff117 	ldw	r2,-60(fp)
 200fb4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 200fb50:	0005883a 	mov	r2,zero
 200fb54:	e0bfff15 	stw	r2,-4(fp)
 200fb58:	e0bfff17 	ldw	r2,-4(fp)
 200fb5c:	e0bffb15 	stw	r2,-20(fp)
 200fb60:	e0bffa17 	ldw	r2,-24(fp)
 200fb64:	e0bff015 	stw	r2,-64(fp)
 200fb68:	e0bff017 	ldw	r2,-64(fp)
 200fb6c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 200fb70:	e0bffb17 	ldw	r2,-20(fp)
}
 200fb74:	e037883a 	mov	sp,fp
 200fb78:	df000017 	ldw	fp,0(sp)
 200fb7c:	dec00104 	addi	sp,sp,4
 200fb80:	f800283a 	ret

0200fb84 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 200fb84:	defffa04 	addi	sp,sp,-24
 200fb88:	dfc00515 	stw	ra,20(sp)
 200fb8c:	df000415 	stw	fp,16(sp)
 200fb90:	dc000315 	stw	r16,12(sp)
 200fb94:	df000304 	addi	fp,sp,12
 200fb98:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 200fb9c:	e0bffe17 	ldw	r2,-8(fp)
 200fba0:	10800217 	ldw	r2,8(r2)
 200fba4:	10d00034 	orhi	r3,r2,16384
 200fba8:	e0bffe17 	ldw	r2,-8(fp)
 200fbac:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 200fbb0:	e03ffd15 	stw	zero,-12(fp)
 200fbb4:	00002306 	br	200fc44 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 200fbb8:	e13ffd17 	ldw	r4,-12(fp)
 200fbbc:	04008074 	movhi	r16,513
 200fbc0:	84050904 	addi	r16,r16,5156
 200fbc4:	01400304 	movi	r5,12
 200fbc8:	2003b380 	call	2003b38 <__mulsi3>
 200fbcc:	1405883a 	add	r2,r2,r16
 200fbd0:	10c00017 	ldw	r3,0(r2)
 200fbd4:	e0bffe17 	ldw	r2,-8(fp)
 200fbd8:	10800017 	ldw	r2,0(r2)
 200fbdc:	1880161e 	bne	r3,r2,200fc38 <alt_file_locked+0xb4>
 200fbe0:	e13ffd17 	ldw	r4,-12(fp)
 200fbe4:	04008074 	movhi	r16,513
 200fbe8:	84050904 	addi	r16,r16,5156
 200fbec:	01400304 	movi	r5,12
 200fbf0:	2003b380 	call	2003b38 <__mulsi3>
 200fbf4:	1405883a 	add	r2,r2,r16
 200fbf8:	10800204 	addi	r2,r2,8
 200fbfc:	10800017 	ldw	r2,0(r2)
 200fc00:	1004403a 	cmpge	r2,r2,zero
 200fc04:	10000c1e 	bne	r2,zero,200fc38 <alt_file_locked+0xb4>
 200fc08:	e13ffd17 	ldw	r4,-12(fp)
 200fc0c:	01400304 	movi	r5,12
 200fc10:	2003b380 	call	2003b38 <__mulsi3>
 200fc14:	1007883a 	mov	r3,r2
 200fc18:	00808074 	movhi	r2,513
 200fc1c:	10850904 	addi	r2,r2,5156
 200fc20:	1887883a 	add	r3,r3,r2
 200fc24:	e0bffe17 	ldw	r2,-8(fp)
 200fc28:	18800326 	beq	r3,r2,200fc38 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 200fc2c:	00bffcc4 	movi	r2,-13
 200fc30:	e0bfff15 	stw	r2,-4(fp)
 200fc34:	00000a06 	br	200fc60 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 200fc38:	e0bffd17 	ldw	r2,-12(fp)
 200fc3c:	10800044 	addi	r2,r2,1
 200fc40:	e0bffd15 	stw	r2,-12(fp)
 200fc44:	00808074 	movhi	r2,513
 200fc48:	1085bc04 	addi	r2,r2,5872
 200fc4c:	10800017 	ldw	r2,0(r2)
 200fc50:	1007883a 	mov	r3,r2
 200fc54:	e0bffd17 	ldw	r2,-12(fp)
 200fc58:	18bfd72e 	bgeu	r3,r2,200fbb8 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 200fc5c:	e03fff15 	stw	zero,-4(fp)
 200fc60:	e0bfff17 	ldw	r2,-4(fp)
}
 200fc64:	e037883a 	mov	sp,fp
 200fc68:	dfc00217 	ldw	ra,8(sp)
 200fc6c:	df000117 	ldw	fp,4(sp)
 200fc70:	dc000017 	ldw	r16,0(sp)
 200fc74:	dec00304 	addi	sp,sp,12
 200fc78:	f800283a 	ret

0200fc7c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 200fc7c:	defff404 	addi	sp,sp,-48
 200fc80:	dfc00b15 	stw	ra,44(sp)
 200fc84:	df000a15 	stw	fp,40(sp)
 200fc88:	df000a04 	addi	fp,sp,40
 200fc8c:	e13ffb15 	stw	r4,-20(fp)
 200fc90:	e17ffc15 	stw	r5,-16(fp)
 200fc94:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 200fc98:	00bfffc4 	movi	r2,-1
 200fc9c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 200fca0:	00bffb44 	movi	r2,-19
 200fca4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 200fca8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 200fcac:	e13ffb17 	ldw	r4,-20(fp)
 200fcb0:	01408074 	movhi	r5,513
 200fcb4:	2945ba04 	addi	r5,r5,5864
 200fcb8:	200f7c40 	call	200f7c4 <alt_find_dev>
 200fcbc:	e0bffa15 	stw	r2,-24(fp)
 200fcc0:	e0bffa17 	ldw	r2,-24(fp)
 200fcc4:	1004c03a 	cmpne	r2,r2,zero
 200fcc8:	1000051e 	bne	r2,zero,200fce0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 200fccc:	e13ffb17 	ldw	r4,-20(fp)
 200fcd0:	20100c00 	call	20100c0 <alt_find_file>
 200fcd4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 200fcd8:	00800044 	movi	r2,1
 200fcdc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 200fce0:	e0bffa17 	ldw	r2,-24(fp)
 200fce4:	1005003a 	cmpeq	r2,r2,zero
 200fce8:	1000311e 	bne	r2,zero,200fdb0 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 200fcec:	e13ffa17 	ldw	r4,-24(fp)
 200fcf0:	20101e00 	call	20101e0 <alt_get_fd>
 200fcf4:	e0bff815 	stw	r2,-32(fp)
 200fcf8:	e0bff817 	ldw	r2,-32(fp)
 200fcfc:	1004403a 	cmpge	r2,r2,zero
 200fd00:	1000031e 	bne	r2,zero,200fd10 <open+0x94>
    {
      status = index;
 200fd04:	e0bff817 	ldw	r2,-32(fp)
 200fd08:	e0bff715 	stw	r2,-36(fp)
 200fd0c:	00002a06 	br	200fdb8 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 200fd10:	e13ff817 	ldw	r4,-32(fp)
 200fd14:	01400304 	movi	r5,12
 200fd18:	2003b380 	call	2003b38 <__mulsi3>
 200fd1c:	1007883a 	mov	r3,r2
 200fd20:	00808074 	movhi	r2,513
 200fd24:	10850904 	addi	r2,r2,5156
 200fd28:	1885883a 	add	r2,r3,r2
 200fd2c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 200fd30:	e0fffc17 	ldw	r3,-16(fp)
 200fd34:	00900034 	movhi	r2,16384
 200fd38:	10bfffc4 	addi	r2,r2,-1
 200fd3c:	1886703a 	and	r3,r3,r2
 200fd40:	e0bff917 	ldw	r2,-28(fp)
 200fd44:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 200fd48:	e0bff617 	ldw	r2,-40(fp)
 200fd4c:	1004c03a 	cmpne	r2,r2,zero
 200fd50:	1000061e 	bne	r2,zero,200fd6c <open+0xf0>
 200fd54:	e13ff917 	ldw	r4,-28(fp)
 200fd58:	200fb840 	call	200fb84 <alt_file_locked>
 200fd5c:	e0bff715 	stw	r2,-36(fp)
 200fd60:	e0bff717 	ldw	r2,-36(fp)
 200fd64:	1004803a 	cmplt	r2,r2,zero
 200fd68:	1000131e 	bne	r2,zero,200fdb8 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 200fd6c:	e0bffa17 	ldw	r2,-24(fp)
 200fd70:	10800317 	ldw	r2,12(r2)
 200fd74:	1005003a 	cmpeq	r2,r2,zero
 200fd78:	1000091e 	bne	r2,zero,200fda0 <open+0x124>
 200fd7c:	e0bffa17 	ldw	r2,-24(fp)
 200fd80:	10800317 	ldw	r2,12(r2)
 200fd84:	e13ff917 	ldw	r4,-28(fp)
 200fd88:	e17ffb17 	ldw	r5,-20(fp)
 200fd8c:	e1bffc17 	ldw	r6,-16(fp)
 200fd90:	e1fffd17 	ldw	r7,-12(fp)
 200fd94:	103ee83a 	callr	r2
 200fd98:	e0bfff15 	stw	r2,-4(fp)
 200fd9c:	00000106 	br	200fda4 <open+0x128>
 200fda0:	e03fff15 	stw	zero,-4(fp)
 200fda4:	e0bfff17 	ldw	r2,-4(fp)
 200fda8:	e0bff715 	stw	r2,-36(fp)
 200fdac:	00000206 	br	200fdb8 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 200fdb0:	00bffb44 	movi	r2,-19
 200fdb4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 200fdb8:	e0bff717 	ldw	r2,-36(fp)
 200fdbc:	1004403a 	cmpge	r2,r2,zero
 200fdc0:	1000091e 	bne	r2,zero,200fde8 <open+0x16c>
  {
    alt_release_fd (index);  
 200fdc4:	e13ff817 	ldw	r4,-32(fp)
 200fdc8:	200d7940 	call	200d794 <alt_release_fd>
    ALT_ERRNO = -status;
 200fdcc:	200fe080 	call	200fe08 <alt_get_errno>
 200fdd0:	e0fff717 	ldw	r3,-36(fp)
 200fdd4:	00c7c83a 	sub	r3,zero,r3
 200fdd8:	10c00015 	stw	r3,0(r2)
    return -1;
 200fddc:	00bfffc4 	movi	r2,-1
 200fde0:	e0bffe15 	stw	r2,-8(fp)
 200fde4:	00000206 	br	200fdf0 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 200fde8:	e0bff817 	ldw	r2,-32(fp)
 200fdec:	e0bffe15 	stw	r2,-8(fp)
 200fdf0:	e0bffe17 	ldw	r2,-8(fp)
}
 200fdf4:	e037883a 	mov	sp,fp
 200fdf8:	dfc00117 	ldw	ra,4(sp)
 200fdfc:	df000017 	ldw	fp,0(sp)
 200fe00:	dec00204 	addi	sp,sp,8
 200fe04:	f800283a 	ret

0200fe08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200fe08:	defffd04 	addi	sp,sp,-12
 200fe0c:	dfc00215 	stw	ra,8(sp)
 200fe10:	df000115 	stw	fp,4(sp)
 200fe14:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200fe18:	00808074 	movhi	r2,513
 200fe1c:	1085bd04 	addi	r2,r2,5876
 200fe20:	10800017 	ldw	r2,0(r2)
 200fe24:	1005003a 	cmpeq	r2,r2,zero
 200fe28:	1000061e 	bne	r2,zero,200fe44 <alt_get_errno+0x3c>
 200fe2c:	00808074 	movhi	r2,513
 200fe30:	1085bd04 	addi	r2,r2,5876
 200fe34:	10800017 	ldw	r2,0(r2)
 200fe38:	103ee83a 	callr	r2
 200fe3c:	e0bfff15 	stw	r2,-4(fp)
 200fe40:	00000306 	br	200fe50 <alt_get_errno+0x48>
 200fe44:	00808074 	movhi	r2,513
 200fe48:	10889704 	addi	r2,r2,8796
 200fe4c:	e0bfff15 	stw	r2,-4(fp)
 200fe50:	e0bfff17 	ldw	r2,-4(fp)
}
 200fe54:	e037883a 	mov	sp,fp
 200fe58:	dfc00117 	ldw	ra,4(sp)
 200fe5c:	df000017 	ldw	fp,0(sp)
 200fe60:	dec00204 	addi	sp,sp,8
 200fe64:	f800283a 	ret

0200fe68 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 200fe68:	deffff04 	addi	sp,sp,-4
 200fe6c:	df000015 	stw	fp,0(sp)
 200fe70:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 200fe74:	000170fa 	wrctl	ienable,zero
}
 200fe78:	e037883a 	mov	sp,fp
 200fe7c:	df000017 	ldw	fp,0(sp)
 200fe80:	dec00104 	addi	sp,sp,4
 200fe84:	f800283a 	ret

0200fe88 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 200fe88:	defff404 	addi	sp,sp,-48
 200fe8c:	df000b15 	stw	fp,44(sp)
 200fe90:	df000b04 	addi	fp,sp,44
 200fe94:	e13ffc15 	stw	r4,-16(fp)
 200fe98:	e17ffd15 	stw	r5,-12(fp)
 200fe9c:	e1bffe15 	stw	r6,-8(fp)
 200fea0:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 200fea4:	e0fffe17 	ldw	r3,-8(fp)
 200fea8:	e0bfff17 	ldw	r2,-4(fp)
 200feac:	10c5883a 	add	r2,r2,r3
 200feb0:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
 200feb4:	e0c00117 	ldw	r3,4(fp)
 200feb8:	e0800217 	ldw	r2,8(fp)
 200febc:	10c5883a 	add	r2,r2,r3
 200fec0:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
 200fec4:	e0800117 	ldw	r2,4(fp)
 200fec8:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
 200fecc:	e0bffe17 	ldw	r2,-8(fp)
 200fed0:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 200fed4:	00800044 	movi	r2,1
 200fed8:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 200fedc:	e0bffc17 	ldw	r2,-16(fp)
 200fee0:	11000504 	addi	r4,r2,20
 200fee4:	e0fffd17 	ldw	r3,-12(fp)
 200fee8:	00800044 	movi	r2,1
 200feec:	10c6983a 	sll	r3,r2,r3
 200fef0:	2005883a 	mov	r2,r4
 200fef4:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 200fef8:	e0800317 	ldw	r2,12(fp)
 200fefc:	1080008c 	andi	r2,r2,2
 200ff00:	1004c03a 	cmpne	r2,r2,zero
 200ff04:	1000051e 	bne	r2,zero,200ff1c <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 200ff08:	e0bffc17 	ldw	r2,-16(fp)
 200ff0c:	10800304 	addi	r2,r2,12
 200ff10:	1007883a 	mov	r3,r2
 200ff14:	00810004 	movi	r2,1024
 200ff18:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 200ff1c:	e0bffc17 	ldw	r2,-16(fp)
 200ff20:	10800037 	ldwio	r2,0(r2)
 200ff24:	00000006 	br	200ff28 <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 200ff28:	e0bffc17 	ldw	r2,-16(fp)
 200ff2c:	10800204 	addi	r2,r2,8
 200ff30:	10800037 	ldwio	r2,0(r2)
 200ff34:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 200ff38:	e0bff717 	ldw	r2,-36(fp)
 200ff3c:	1080100c 	andi	r2,r2,64
 200ff40:	1005003a 	cmpeq	r2,r2,zero
 200ff44:	1000031e 	bne	r2,zero,200ff54 <alt_avalon_spi_command+0xcc>
 200ff48:	e0bff617 	ldw	r2,-40(fp)
 200ff4c:	1004c03a 	cmpne	r2,r2,zero
 200ff50:	1000041e 	bne	r2,zero,200ff64 <alt_avalon_spi_command+0xdc>
 200ff54:	e0bff717 	ldw	r2,-36(fp)
 200ff58:	1080200c 	andi	r2,r2,128
 200ff5c:	1005003a 	cmpeq	r2,r2,zero
 200ff60:	103ff11e 	bne	r2,zero,200ff28 <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 200ff64:	e0bff717 	ldw	r2,-36(fp)
 200ff68:	1080100c 	andi	r2,r2,64
 200ff6c:	1005003a 	cmpeq	r2,r2,zero
 200ff70:	1000201e 	bne	r2,zero,200fff4 <alt_avalon_spi_command+0x16c>
 200ff74:	e0bff617 	ldw	r2,-40(fp)
 200ff78:	10800050 	cmplti	r2,r2,1
 200ff7c:	10001d1e 	bne	r2,zero,200fff4 <alt_avalon_spi_command+0x16c>
    {
      credits--;
 200ff80:	e0bff617 	ldw	r2,-40(fp)
 200ff84:	10bfffc4 	addi	r2,r2,-1
 200ff88:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
 200ff8c:	e0ffff17 	ldw	r3,-4(fp)
 200ff90:	e0bffb17 	ldw	r2,-20(fp)
 200ff94:	18800b2e 	bgeu	r3,r2,200ffc4 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 200ff98:	e0bffc17 	ldw	r2,-16(fp)
 200ff9c:	11000104 	addi	r4,r2,4
 200ffa0:	e0bfff17 	ldw	r2,-4(fp)
 200ffa4:	10800003 	ldbu	r2,0(r2)
 200ffa8:	10c03fcc 	andi	r3,r2,255
 200ffac:	e0bfff17 	ldw	r2,-4(fp)
 200ffb0:	10800044 	addi	r2,r2,1
 200ffb4:	e0bfff15 	stw	r2,-4(fp)
 200ffb8:	2005883a 	mov	r2,r4
 200ffbc:	10c00035 	stwio	r3,0(r2)
 200ffc0:	00000c06 	br	200fff4 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
 200ffc4:	e0bff917 	ldw	r2,-28(fp)
 200ffc8:	1005003a 	cmpeq	r2,r2,zero
 200ffcc:	1000071e 	bne	r2,zero,200ffec <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
 200ffd0:	e0bff917 	ldw	r2,-28(fp)
 200ffd4:	10bfffc4 	addi	r2,r2,-1
 200ffd8:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 200ffdc:	e0bffc17 	ldw	r2,-16(fp)
 200ffe0:	10800104 	addi	r2,r2,4
 200ffe4:	10000035 	stwio	zero,0(r2)
 200ffe8:	00000206 	br	200fff4 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
 200ffec:	00bf0004 	movi	r2,-1024
 200fff0:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 200fff4:	e0bff717 	ldw	r2,-36(fp)
 200fff8:	1080200c 	andi	r2,r2,128
 200fffc:	1005003a 	cmpeq	r2,r2,zero
 2010000:	103fc91e 	bne	r2,zero,200ff28 <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2010004:	e0bffc17 	ldw	r2,-16(fp)
 2010008:	10800037 	ldwio	r2,0(r2)
 201000c:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
 2010010:	e0bff817 	ldw	r2,-32(fp)
 2010014:	1005003a 	cmpeq	r2,r2,zero
 2010018:	1000041e 	bne	r2,zero,201002c <alt_avalon_spi_command+0x1a4>
        read_ignore--;
 201001c:	e0bff817 	ldw	r2,-32(fp)
 2010020:	10bfffc4 	addi	r2,r2,-1
 2010024:	e0bff815 	stw	r2,-32(fp)
 2010028:	00000706 	br	2010048 <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
 201002c:	e0bff517 	ldw	r2,-44(fp)
 2010030:	1007883a 	mov	r3,r2
 2010034:	e0800217 	ldw	r2,8(fp)
 2010038:	10c00005 	stb	r3,0(r2)
 201003c:	e0800217 	ldw	r2,8(fp)
 2010040:	10800044 	addi	r2,r2,1
 2010044:	e0800215 	stw	r2,8(fp)
      credits++;
 2010048:	e0bff617 	ldw	r2,-40(fp)
 201004c:	10800044 	addi	r2,r2,1
 2010050:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
 2010054:	e0bff817 	ldw	r2,-32(fp)
 2010058:	1004c03a 	cmpne	r2,r2,zero
 201005c:	103fb21e 	bne	r2,zero,200ff28 <alt_avalon_spi_command+0xa0>
 2010060:	e0c00217 	ldw	r3,8(fp)
 2010064:	e0bffa17 	ldw	r2,-24(fp)
 2010068:	18800126 	beq	r3,r2,2010070 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
 201006c:	003fae06 	br	200ff28 <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2010070:	e0bffc17 	ldw	r2,-16(fp)
 2010074:	10800204 	addi	r2,r2,8
 2010078:	10800037 	ldwio	r2,0(r2)
 201007c:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 2010080:	e0bff717 	ldw	r2,-36(fp)
 2010084:	1080080c 	andi	r2,r2,32
 2010088:	1005003a 	cmpeq	r2,r2,zero
 201008c:	103ff81e 	bne	r2,zero,2010070 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 2010090:	e0800317 	ldw	r2,12(fp)
 2010094:	1080004c 	andi	r2,r2,1
 2010098:	1004c03a 	cmpne	r2,r2,zero
 201009c:	1000031e 	bne	r2,zero,20100ac <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 20100a0:	e0bffc17 	ldw	r2,-16(fp)
 20100a4:	10800304 	addi	r2,r2,12
 20100a8:	10000035 	stwio	zero,0(r2)

  return read_length;
 20100ac:	e0800117 	ldw	r2,4(fp)
}
 20100b0:	e037883a 	mov	sp,fp
 20100b4:	df000017 	ldw	fp,0(sp)
 20100b8:	dec00104 	addi	sp,sp,4
 20100bc:	f800283a 	ret

020100c0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 20100c0:	defffa04 	addi	sp,sp,-24
 20100c4:	dfc00515 	stw	ra,20(sp)
 20100c8:	df000415 	stw	fp,16(sp)
 20100cc:	df000404 	addi	fp,sp,16
 20100d0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 20100d4:	00808074 	movhi	r2,513
 20100d8:	1085b804 	addi	r2,r2,5856
 20100dc:	10800017 	ldw	r2,0(r2)
 20100e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 20100e4:	00003306 	br	20101b4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 20100e8:	e0bffd17 	ldw	r2,-12(fp)
 20100ec:	11000217 	ldw	r4,8(r2)
 20100f0:	2004cb80 	call	2004cb8 <strlen>
 20100f4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 20100f8:	e0bffd17 	ldw	r2,-12(fp)
 20100fc:	10c00217 	ldw	r3,8(r2)
 2010100:	e0bffc17 	ldw	r2,-16(fp)
 2010104:	1885883a 	add	r2,r3,r2
 2010108:	10bfffc4 	addi	r2,r2,-1
 201010c:	10800003 	ldbu	r2,0(r2)
 2010110:	10803fcc 	andi	r2,r2,255
 2010114:	1080201c 	xori	r2,r2,128
 2010118:	10bfe004 	addi	r2,r2,-128
 201011c:	10800bd8 	cmpnei	r2,r2,47
 2010120:	1000031e 	bne	r2,zero,2010130 <alt_find_file+0x70>
    {
      len -= 1;
 2010124:	e0bffc17 	ldw	r2,-16(fp)
 2010128:	10bfffc4 	addi	r2,r2,-1
 201012c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2010130:	e0bffc17 	ldw	r2,-16(fp)
 2010134:	1007883a 	mov	r3,r2
 2010138:	e0bffe17 	ldw	r2,-8(fp)
 201013c:	1885883a 	add	r2,r3,r2
 2010140:	10800003 	ldbu	r2,0(r2)
 2010144:	10803fcc 	andi	r2,r2,255
 2010148:	1080201c 	xori	r2,r2,128
 201014c:	10bfe004 	addi	r2,r2,-128
 2010150:	10800be0 	cmpeqi	r2,r2,47
 2010154:	10000a1e 	bne	r2,zero,2010180 <alt_find_file+0xc0>
 2010158:	e0bffc17 	ldw	r2,-16(fp)
 201015c:	1007883a 	mov	r3,r2
 2010160:	e0bffe17 	ldw	r2,-8(fp)
 2010164:	1885883a 	add	r2,r3,r2
 2010168:	10800003 	ldbu	r2,0(r2)
 201016c:	10803fcc 	andi	r2,r2,255
 2010170:	1080201c 	xori	r2,r2,128
 2010174:	10bfe004 	addi	r2,r2,-128
 2010178:	1004c03a 	cmpne	r2,r2,zero
 201017c:	10000a1e 	bne	r2,zero,20101a8 <alt_find_file+0xe8>
 2010180:	e0bffd17 	ldw	r2,-12(fp)
 2010184:	11000217 	ldw	r4,8(r2)
 2010188:	e1bffc17 	ldw	r6,-16(fp)
 201018c:	e17ffe17 	ldw	r5,-8(fp)
 2010190:	20102fc0 	call	20102fc <memcmp>
 2010194:	1004c03a 	cmpne	r2,r2,zero
 2010198:	1000031e 	bne	r2,zero,20101a8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 201019c:	e0bffd17 	ldw	r2,-12(fp)
 20101a0:	e0bfff15 	stw	r2,-4(fp)
 20101a4:	00000806 	br	20101c8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 20101a8:	e0bffd17 	ldw	r2,-12(fp)
 20101ac:	10800017 	ldw	r2,0(r2)
 20101b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 20101b4:	00c08074 	movhi	r3,513
 20101b8:	18c5b804 	addi	r3,r3,5856
 20101bc:	e0bffd17 	ldw	r2,-12(fp)
 20101c0:	10ffc91e 	bne	r2,r3,20100e8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 20101c4:	e03fff15 	stw	zero,-4(fp)
 20101c8:	e0bfff17 	ldw	r2,-4(fp)
}
 20101cc:	e037883a 	mov	sp,fp
 20101d0:	dfc00117 	ldw	ra,4(sp)
 20101d4:	df000017 	ldw	fp,0(sp)
 20101d8:	dec00204 	addi	sp,sp,8
 20101dc:	f800283a 	ret

020101e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 20101e0:	defffa04 	addi	sp,sp,-24
 20101e4:	dfc00515 	stw	ra,20(sp)
 20101e8:	df000415 	stw	fp,16(sp)
 20101ec:	dc000315 	stw	r16,12(sp)
 20101f0:	df000304 	addi	fp,sp,12
 20101f4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 20101f8:	00bffa04 	movi	r2,-24
 20101fc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2010200:	e03ffe15 	stw	zero,-8(fp)
 2010204:	00002006 	br	2010288 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 2010208:	e13ffe17 	ldw	r4,-8(fp)
 201020c:	04008074 	movhi	r16,513
 2010210:	84050904 	addi	r16,r16,5156
 2010214:	01400304 	movi	r5,12
 2010218:	2003b380 	call	2003b38 <__mulsi3>
 201021c:	1405883a 	add	r2,r2,r16
 2010220:	10800017 	ldw	r2,0(r2)
 2010224:	1004c03a 	cmpne	r2,r2,zero
 2010228:	1000141e 	bne	r2,zero,201027c <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 201022c:	e13ffe17 	ldw	r4,-8(fp)
 2010230:	04008074 	movhi	r16,513
 2010234:	84050904 	addi	r16,r16,5156
 2010238:	01400304 	movi	r5,12
 201023c:	2003b380 	call	2003b38 <__mulsi3>
 2010240:	1407883a 	add	r3,r2,r16
 2010244:	e0bfff17 	ldw	r2,-4(fp)
 2010248:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 201024c:	00808074 	movhi	r2,513
 2010250:	1085bc04 	addi	r2,r2,5872
 2010254:	10c00017 	ldw	r3,0(r2)
 2010258:	e0bffe17 	ldw	r2,-8(fp)
 201025c:	1880040e 	bge	r3,r2,2010270 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 2010260:	00c08074 	movhi	r3,513
 2010264:	18c5bc04 	addi	r3,r3,5872
 2010268:	e0bffe17 	ldw	r2,-8(fp)
 201026c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 2010270:	e0bffe17 	ldw	r2,-8(fp)
 2010274:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 2010278:	00000606 	br	2010294 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 201027c:	e0bffe17 	ldw	r2,-8(fp)
 2010280:	10800044 	addi	r2,r2,1
 2010284:	e0bffe15 	stw	r2,-8(fp)
 2010288:	e0bffe17 	ldw	r2,-8(fp)
 201028c:	10800810 	cmplti	r2,r2,32
 2010290:	103fdd1e 	bne	r2,zero,2010208 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 2010294:	e0bffd17 	ldw	r2,-12(fp)
}
 2010298:	e037883a 	mov	sp,fp
 201029c:	dfc00217 	ldw	ra,8(sp)
 20102a0:	df000117 	ldw	fp,4(sp)
 20102a4:	dc000017 	ldw	r16,0(sp)
 20102a8:	dec00304 	addi	sp,sp,12
 20102ac:	f800283a 	ret

020102b0 <atexit>:
 20102b0:	200b883a 	mov	r5,r4
 20102b4:	000d883a 	mov	r6,zero
 20102b8:	0009883a 	mov	r4,zero
 20102bc:	000f883a 	mov	r7,zero
 20102c0:	20103701 	jmpi	2010370 <__register_exitproc>

020102c4 <exit>:
 20102c4:	defffe04 	addi	sp,sp,-8
 20102c8:	000b883a 	mov	r5,zero
 20102cc:	dc000015 	stw	r16,0(sp)
 20102d0:	dfc00115 	stw	ra,4(sp)
 20102d4:	2021883a 	mov	r16,r4
 20102d8:	20104a80 	call	20104a8 <__call_exitprocs>
 20102dc:	00808074 	movhi	r2,513
 20102e0:	1085b504 	addi	r2,r2,5844
 20102e4:	11000017 	ldw	r4,0(r2)
 20102e8:	20800f17 	ldw	r2,60(r4)
 20102ec:	10000126 	beq	r2,zero,20102f4 <exit+0x30>
 20102f0:	103ee83a 	callr	r2
 20102f4:	8009883a 	mov	r4,r16
 20102f8:	20106980 	call	2010698 <_exit>

020102fc <memcmp>:
 20102fc:	00c000c4 	movi	r3,3
 2010300:	1980032e 	bgeu	r3,r6,2010310 <memcmp+0x14>
 2010304:	2144b03a 	or	r2,r4,r5
 2010308:	10c4703a 	and	r2,r2,r3
 201030c:	10000f26 	beq	r2,zero,201034c <memcmp+0x50>
 2010310:	31ffffc4 	addi	r7,r6,-1
 2010314:	3000061e 	bne	r6,zero,2010330 <memcmp+0x34>
 2010318:	00000a06 	br	2010344 <memcmp+0x48>
 201031c:	39ffffc4 	addi	r7,r7,-1
 2010320:	00bfffc4 	movi	r2,-1
 2010324:	21000044 	addi	r4,r4,1
 2010328:	29400044 	addi	r5,r5,1
 201032c:	38800526 	beq	r7,r2,2010344 <memcmp+0x48>
 2010330:	20c00003 	ldbu	r3,0(r4)
 2010334:	28800003 	ldbu	r2,0(r5)
 2010338:	18bff826 	beq	r3,r2,201031c <memcmp+0x20>
 201033c:	1885c83a 	sub	r2,r3,r2
 2010340:	f800283a 	ret
 2010344:	0005883a 	mov	r2,zero
 2010348:	f800283a 	ret
 201034c:	180f883a 	mov	r7,r3
 2010350:	20c00017 	ldw	r3,0(r4)
 2010354:	28800017 	ldw	r2,0(r5)
 2010358:	18bfed1e 	bne	r3,r2,2010310 <memcmp+0x14>
 201035c:	31bfff04 	addi	r6,r6,-4
 2010360:	21000104 	addi	r4,r4,4
 2010364:	29400104 	addi	r5,r5,4
 2010368:	39bff936 	bltu	r7,r6,2010350 <memcmp+0x54>
 201036c:	003fe806 	br	2010310 <memcmp+0x14>

02010370 <__register_exitproc>:
 2010370:	defffa04 	addi	sp,sp,-24
 2010374:	00808074 	movhi	r2,513
 2010378:	1085b504 	addi	r2,r2,5844
 201037c:	dc000015 	stw	r16,0(sp)
 2010380:	14000017 	ldw	r16,0(r2)
 2010384:	dd000415 	stw	r20,16(sp)
 2010388:	2829883a 	mov	r20,r5
 201038c:	81405217 	ldw	r5,328(r16)
 2010390:	dcc00315 	stw	r19,12(sp)
 2010394:	dc800215 	stw	r18,8(sp)
 2010398:	dc400115 	stw	r17,4(sp)
 201039c:	dfc00515 	stw	ra,20(sp)
 20103a0:	2023883a 	mov	r17,r4
 20103a4:	3027883a 	mov	r19,r6
 20103a8:	3825883a 	mov	r18,r7
 20103ac:	28002526 	beq	r5,zero,2010444 <__register_exitproc+0xd4>
 20103b0:	29000117 	ldw	r4,4(r5)
 20103b4:	008007c4 	movi	r2,31
 20103b8:	11002716 	blt	r2,r4,2010458 <__register_exitproc+0xe8>
 20103bc:	8800101e 	bne	r17,zero,2010400 <__register_exitproc+0x90>
 20103c0:	2105883a 	add	r2,r4,r4
 20103c4:	1085883a 	add	r2,r2,r2
 20103c8:	20c00044 	addi	r3,r4,1
 20103cc:	1145883a 	add	r2,r2,r5
 20103d0:	0009883a 	mov	r4,zero
 20103d4:	15000215 	stw	r20,8(r2)
 20103d8:	28c00115 	stw	r3,4(r5)
 20103dc:	2005883a 	mov	r2,r4
 20103e0:	dfc00517 	ldw	ra,20(sp)
 20103e4:	dd000417 	ldw	r20,16(sp)
 20103e8:	dcc00317 	ldw	r19,12(sp)
 20103ec:	dc800217 	ldw	r18,8(sp)
 20103f0:	dc400117 	ldw	r17,4(sp)
 20103f4:	dc000017 	ldw	r16,0(sp)
 20103f8:	dec00604 	addi	sp,sp,24
 20103fc:	f800283a 	ret
 2010400:	29802204 	addi	r6,r5,136
 2010404:	00800044 	movi	r2,1
 2010408:	110e983a 	sll	r7,r2,r4
 201040c:	30c04017 	ldw	r3,256(r6)
 2010410:	2105883a 	add	r2,r4,r4
 2010414:	1085883a 	add	r2,r2,r2
 2010418:	1185883a 	add	r2,r2,r6
 201041c:	19c6b03a 	or	r3,r3,r7
 2010420:	14802015 	stw	r18,128(r2)
 2010424:	14c00015 	stw	r19,0(r2)
 2010428:	00800084 	movi	r2,2
 201042c:	30c04015 	stw	r3,256(r6)
 2010430:	88bfe31e 	bne	r17,r2,20103c0 <__register_exitproc+0x50>
 2010434:	30804117 	ldw	r2,260(r6)
 2010438:	11c4b03a 	or	r2,r2,r7
 201043c:	30804115 	stw	r2,260(r6)
 2010440:	003fdf06 	br	20103c0 <__register_exitproc+0x50>
 2010444:	00808074 	movhi	r2,513
 2010448:	1088eb04 	addi	r2,r2,9132
 201044c:	100b883a 	mov	r5,r2
 2010450:	80805215 	stw	r2,328(r16)
 2010454:	003fd606 	br	20103b0 <__register_exitproc+0x40>
 2010458:	00808034 	movhi	r2,512
 201045c:	1090f204 	addi	r2,r2,17352
 2010460:	1000021e 	bne	r2,zero,201046c <__register_exitproc+0xfc>
 2010464:	013fffc4 	movi	r4,-1
 2010468:	003fdc06 	br	20103dc <__register_exitproc+0x6c>
 201046c:	01006404 	movi	r4,400
 2010470:	103ee83a 	callr	r2
 2010474:	1007883a 	mov	r3,r2
 2010478:	103ffa26 	beq	r2,zero,2010464 <__register_exitproc+0xf4>
 201047c:	80805217 	ldw	r2,328(r16)
 2010480:	180b883a 	mov	r5,r3
 2010484:	18000115 	stw	zero,4(r3)
 2010488:	18800015 	stw	r2,0(r3)
 201048c:	80c05215 	stw	r3,328(r16)
 2010490:	18006215 	stw	zero,392(r3)
 2010494:	18006315 	stw	zero,396(r3)
 2010498:	0009883a 	mov	r4,zero
 201049c:	883fc826 	beq	r17,zero,20103c0 <__register_exitproc+0x50>
 20104a0:	003fd706 	br	2010400 <__register_exitproc+0x90>

020104a4 <register_fini>:
 20104a4:	f800283a 	ret

020104a8 <__call_exitprocs>:
 20104a8:	00808074 	movhi	r2,513
 20104ac:	1085b504 	addi	r2,r2,5844
 20104b0:	10800017 	ldw	r2,0(r2)
 20104b4:	defff304 	addi	sp,sp,-52
 20104b8:	df000b15 	stw	fp,44(sp)
 20104bc:	d8800115 	stw	r2,4(sp)
 20104c0:	00808034 	movhi	r2,512
 20104c4:	1090ed04 	addi	r2,r2,17332
 20104c8:	1005003a 	cmpeq	r2,r2,zero
 20104cc:	d8800215 	stw	r2,8(sp)
 20104d0:	d8800117 	ldw	r2,4(sp)
 20104d4:	dd400815 	stw	r21,32(sp)
 20104d8:	dd000715 	stw	r20,28(sp)
 20104dc:	10805204 	addi	r2,r2,328
 20104e0:	dfc00c15 	stw	ra,48(sp)
 20104e4:	ddc00a15 	stw	r23,40(sp)
 20104e8:	dd800915 	stw	r22,36(sp)
 20104ec:	dcc00615 	stw	r19,24(sp)
 20104f0:	dc800515 	stw	r18,20(sp)
 20104f4:	dc400415 	stw	r17,16(sp)
 20104f8:	dc000315 	stw	r16,12(sp)
 20104fc:	282b883a 	mov	r21,r5
 2010500:	2039883a 	mov	fp,r4
 2010504:	d8800015 	stw	r2,0(sp)
 2010508:	2829003a 	cmpeq	r20,r5,zero
 201050c:	d8800117 	ldw	r2,4(sp)
 2010510:	14405217 	ldw	r17,328(r2)
 2010514:	88001026 	beq	r17,zero,2010558 <__call_exitprocs+0xb0>
 2010518:	ddc00017 	ldw	r23,0(sp)
 201051c:	88800117 	ldw	r2,4(r17)
 2010520:	8c802204 	addi	r18,r17,136
 2010524:	143fffc4 	addi	r16,r2,-1
 2010528:	80000916 	blt	r16,zero,2010550 <__call_exitprocs+0xa8>
 201052c:	05bfffc4 	movi	r22,-1
 2010530:	a000151e 	bne	r20,zero,2010588 <__call_exitprocs+0xe0>
 2010534:	8409883a 	add	r4,r16,r16
 2010538:	2105883a 	add	r2,r4,r4
 201053c:	1485883a 	add	r2,r2,r18
 2010540:	10c02017 	ldw	r3,128(r2)
 2010544:	a8c01126 	beq	r21,r3,201058c <__call_exitprocs+0xe4>
 2010548:	843fffc4 	addi	r16,r16,-1
 201054c:	85bff81e 	bne	r16,r22,2010530 <__call_exitprocs+0x88>
 2010550:	d8800217 	ldw	r2,8(sp)
 2010554:	10003126 	beq	r2,zero,201061c <__call_exitprocs+0x174>
 2010558:	dfc00c17 	ldw	ra,48(sp)
 201055c:	df000b17 	ldw	fp,44(sp)
 2010560:	ddc00a17 	ldw	r23,40(sp)
 2010564:	dd800917 	ldw	r22,36(sp)
 2010568:	dd400817 	ldw	r21,32(sp)
 201056c:	dd000717 	ldw	r20,28(sp)
 2010570:	dcc00617 	ldw	r19,24(sp)
 2010574:	dc800517 	ldw	r18,20(sp)
 2010578:	dc400417 	ldw	r17,16(sp)
 201057c:	dc000317 	ldw	r16,12(sp)
 2010580:	dec00d04 	addi	sp,sp,52
 2010584:	f800283a 	ret
 2010588:	8409883a 	add	r4,r16,r16
 201058c:	88c00117 	ldw	r3,4(r17)
 2010590:	2105883a 	add	r2,r4,r4
 2010594:	1445883a 	add	r2,r2,r17
 2010598:	18ffffc4 	addi	r3,r3,-1
 201059c:	11800217 	ldw	r6,8(r2)
 20105a0:	1c001526 	beq	r3,r16,20105f8 <__call_exitprocs+0x150>
 20105a4:	10000215 	stw	zero,8(r2)
 20105a8:	303fe726 	beq	r6,zero,2010548 <__call_exitprocs+0xa0>
 20105ac:	00c00044 	movi	r3,1
 20105b0:	1c06983a 	sll	r3,r3,r16
 20105b4:	90804017 	ldw	r2,256(r18)
 20105b8:	8cc00117 	ldw	r19,4(r17)
 20105bc:	1884703a 	and	r2,r3,r2
 20105c0:	10001426 	beq	r2,zero,2010614 <__call_exitprocs+0x16c>
 20105c4:	90804117 	ldw	r2,260(r18)
 20105c8:	1884703a 	and	r2,r3,r2
 20105cc:	10000c1e 	bne	r2,zero,2010600 <__call_exitprocs+0x158>
 20105d0:	2105883a 	add	r2,r4,r4
 20105d4:	1485883a 	add	r2,r2,r18
 20105d8:	11400017 	ldw	r5,0(r2)
 20105dc:	e009883a 	mov	r4,fp
 20105e0:	303ee83a 	callr	r6
 20105e4:	88800117 	ldw	r2,4(r17)
 20105e8:	98bfc81e 	bne	r19,r2,201050c <__call_exitprocs+0x64>
 20105ec:	b8800017 	ldw	r2,0(r23)
 20105f0:	147fd526 	beq	r2,r17,2010548 <__call_exitprocs+0xa0>
 20105f4:	003fc506 	br	201050c <__call_exitprocs+0x64>
 20105f8:	8c000115 	stw	r16,4(r17)
 20105fc:	003fea06 	br	20105a8 <__call_exitprocs+0x100>
 2010600:	2105883a 	add	r2,r4,r4
 2010604:	1485883a 	add	r2,r2,r18
 2010608:	11000017 	ldw	r4,0(r2)
 201060c:	303ee83a 	callr	r6
 2010610:	003ff406 	br	20105e4 <__call_exitprocs+0x13c>
 2010614:	303ee83a 	callr	r6
 2010618:	003ff206 	br	20105e4 <__call_exitprocs+0x13c>
 201061c:	88800117 	ldw	r2,4(r17)
 2010620:	1000081e 	bne	r2,zero,2010644 <__call_exitprocs+0x19c>
 2010624:	89000017 	ldw	r4,0(r17)
 2010628:	20000726 	beq	r4,zero,2010648 <__call_exitprocs+0x1a0>
 201062c:	b9000015 	stw	r4,0(r23)
 2010630:	8809883a 	mov	r4,r17
 2010634:	20043b40 	call	20043b4 <free>
 2010638:	bc400017 	ldw	r17,0(r23)
 201063c:	883fb71e 	bne	r17,zero,201051c <__call_exitprocs+0x74>
 2010640:	003fc506 	br	2010558 <__call_exitprocs+0xb0>
 2010644:	89000017 	ldw	r4,0(r17)
 2010648:	882f883a 	mov	r23,r17
 201064c:	2023883a 	mov	r17,r4
 2010650:	883fb21e 	bne	r17,zero,201051c <__call_exitprocs+0x74>
 2010654:	003fc006 	br	2010558 <__call_exitprocs+0xb0>

02010658 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 2010658:	defffd04 	addi	sp,sp,-12
 201065c:	df000215 	stw	fp,8(sp)
 2010660:	df000204 	addi	fp,sp,8
 2010664:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 2010668:	e0bfff17 	ldw	r2,-4(fp)
 201066c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2010670:	e0bffe17 	ldw	r2,-8(fp)
 2010674:	1005003a 	cmpeq	r2,r2,zero
 2010678:	1000021e 	bne	r2,zero,2010684 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 201067c:	002af070 	cmpltui	zero,zero,43969
 2010680:	00000106 	br	2010688 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 2010684:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 2010688:	e037883a 	mov	sp,fp
 201068c:	df000017 	ldw	fp,0(sp)
 2010690:	dec00104 	addi	sp,sp,4
 2010694:	f800283a 	ret

02010698 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2010698:	defffd04 	addi	sp,sp,-12
 201069c:	dfc00215 	stw	ra,8(sp)
 20106a0:	df000115 	stw	fp,4(sp)
 20106a4:	df000104 	addi	fp,sp,4
 20106a8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 20106ac:	e13fff17 	ldw	r4,-4(fp)
 20106b0:	20106580 	call	2010658 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 20106b4:	003fff06 	br	20106b4 <_exit+0x1c>
 20106b8:	020104a4 	muli	r8,zero,1042
